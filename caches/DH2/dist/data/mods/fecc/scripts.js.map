{
  "version": 3,
  "sources": ["../../../../data/mods/fecc/scripts.ts"],
  "sourcesContent": ["import {Pokemon} from '../../../sim/pokemon';\r\nimport {FS} from '../../../lib';\r\nimport {toID} from '../../../sim/dex-data';\r\nconst usergroups: {[userid: string]: string} = {};\r\nconst usergroupData = FS('config/usergroups.csv').readIfExistsSync().split('\\n');\r\nfor (const row of usergroupData) {\r\n\tif (!toID(row)) continue;\r\n\r\n\tconst cells = row.split(',');\r\n\tif (cells.length > 3) throw new Error(`Invalid entry when parsing usergroups.csv`);\r\n\tusergroups[toID(cells[0])] = cells[1].trim() || ' ';\r\n}\r\n\r\nexport function getName(name: string): string {\r\n\tconst userid = toID(name);\r\n\tif (!userid) throw new Error('No/Invalid name passed to getSymbol');\r\n\r\n\tconst group = usergroups[userid] || ' ';\r\n\treturn group + name;\r\n}\r\n\r\nexport const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tinit() {\r\n\t\t// Automatically construct fusion learnsets! (Thank u scoopapa)\r\n\t\tfor (const id in this.dataCache.Pokedex) { // check the dex for fusions\r\n\t\t\tconst fusionEntry = this.dataCache.Pokedex[id];\r\n\t\t\tif (fusionEntry.fusion) { // if the pokedex entry has a fusion field, it's a fusion\r\n\t\t\t\tconst learnsetFusionList = [];// list of pokemon whose learnsets need to be fused\r\n\t\t\t\tfor (let name of fusionEntry.fusion) {\r\n\t\t\t\t\tlet prevo = true;\r\n\t\t\t\t\twhile (prevo) { // make sure prevos of both fused pokemon are added to the list\r\n\t\t\t\t\t\tlearnsetFusionList.push(name);\r\n\t\t\t\t\t\tconst dexEntry = this.dataCache.Pokedex[this.toID(name)];\r\n\t\t\t\t\t\tif (dexEntry.prevo) name = dexEntry.prevo;\r\n\t\t\t\t\t\telse prevo = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.dataCache.Learnsets[id]) this.dataCache.Learnsets[id] = {learnset: {}};// create a blank learnset entry so we don't need a learnsets file\r\n\t\t\t\tfor (const name of learnsetFusionList) {\r\n\t\t\t\t\tconst learnset = this.dataCache.Learnsets[this.toID(name)].learnset;// get the learnset of each pokemon in the list\r\n\t\t\t\t\tfor (const moveid in learnset) {\r\n\t\t\t\t\t\tif (this.dataCache.Moves[moveid].isNonstandard === 'Past') continue; // exclude dexited moves (I hope!)\r\n\t\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = ['9L1'];// all moves are compatible with the fusion's only ability, so just set it to 8L1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now, case-by-case learnset revisions:\r\n\t\t// Behemoth Bash and Behemoth Blade are added automatically to the Crowned dogs somewhere,\r\n\t\t// so we will simulate that here, instead of actually editing that.\r\n\t\t/*\r\n\t\tthis.modData('Learnsets', 'yaciancrowned').learnset.behemothblade = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'igglyzentacrowned').learnset.behemothbash = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'nozedawnwings').learnset.moongeistbeam = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'phancrozmadawnwings').learnset.moongeistbeam = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'tyranetteeternal').learnset.lightofruin = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'monferpaunbound').learnset.hyperspacefury = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'hoopagigasunbound').learnset.hyperspacefury = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'rotofable').learnset.overheat = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'appletomwash').learnset.hydropump = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'igglyciancrowned').learnset.behemothblade = ['7L1'];\r\n\t\tdelete this.modData('Learnsets', 'yaciancrowned').learnset.ironhead;\r\n\t\tdelete this.modData('Learnsets', 'igglyzentacrowned').learnset.ironhead;\r\n\t\tdelete this.modData('Learnsets', 'igglyciancrowned').learnset.ironhead;*/\r\n\t},\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n\t\t// for micrometas to only show custom tiers\r\n\t\texcludeStandardTiers: true,\r\n\t\t// only to specify the order of custom tiers\r\n\t\tcustomTiers: ['FECC'],\r\n\t},\r\n\tbattle: {\r\n\t\theal(damage: number, target?: Pokemon, source: Pokemon | null = null, effect: 'drain' | Effect | null = null) {\r\n\t\tif (this.event) {\r\n\t\t\tif (!target) target = this.event.target;\r\n\t\t\tif (!source) source = this.event.source;\r\n\t\t\tif (!effect) effect = this.effect;\r\n\t\t}\r\n\t\tif (effect === 'drain') effect = this.dex.conditions.getByID(effect as ID);\r\n\t\tif (damage && damage <= 1) damage = 1;\r\n\t\tif (target.hasAbility('healaura') || source.hasAbility('healaura')) damage * 1.33;\r\n\t\tdamage = this.trunc(damage);\r\n\t\t// for things like Liquid Ooze, the Heal event still happens when nothing is healed.\r\n\t\tdamage = this.runEvent('TryHeal', target, source, effect, damage);\r\n\t\tif (!damage) return damage;\r\n\t\tif (!target?.hp) return false;\r\n\t\tif (!target.isActive) return false;\r\n\t\tif (target.hp >= target.maxhp) return false;\r\n\t\tconst finalDamage = target.heal(damage, source, effect);\r\n\t\tswitch (effect?.id) {\r\n\t\tcase 'leechseed':\r\n\t\tcase 'rest':\r\n\t\t\tthis.add('-heal', target, target.getHealth, '[silent]');\r\n\t\t\tbreak;\r\n\t\tcase 'drain':\r\n\t\t\tthis.add('-heal', target, target.getHealth, '[from] drain', '[of] ' + source);\r\n\t\t\tbreak;\r\n\t\tcase 'wish':\r\n\t\t\tbreak;\r\n\t\tcase 'zpower':\r\n\t\t\tthis.add('-heal', target, target.getHealth, '[zeffect]');\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tif (!effect) break;\r\n\t\t\tif (effect.effectType === 'Move') {\r\n\t\t\t\tthis.add('-heal', target, target.getHealth);\r\n\t\t\t} else if (source && source !== target) {\r\n\t\t\t\tthis.add('-heal', target, target.getHealth, '[from] ' + effect.fullname, '[of] ' + source);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add('-heal', target, target.getHealth, '[from] ' + effect.fullname);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.runEvent('Heal', target, source, effect, finalDamage);\r\n\t\treturn finalDamage;\r\n\t}\r\n\t},\r\n\tactions: {\r\n\t\tmodifyDamage(\r\n\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t) {\r\n\t\tconst tr = this.battle.trunc;\r\n\t\tif (!move.type) move.type = '???';\r\n\t\tconst type = move.type;\r\n\r\n\t\tbaseDamage += 2;\r\n\r\n\t\tif (move.spreadHit) {\r\n\t\t\t// multi-target modifier (doubles only)\r\n\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t// Parental Bond modifier\r\n\t\t\tconst bondModifier = this.battle.gen > 6 ? 0.25 : 0.5;\r\n\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t}\r\n\r\n\t\t// weather modifier\r\n\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t// crit - not a modifier\r\n\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\tif (isCrit) {\r\n\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.battle.gen >= 6 ? 1.5 : 2)));\r\n\t\t}\r\n\r\n\t\t// random factor - also not a modifier\r\n\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\r\n\t\t// STAB\r\n\t\t// The \"???\" type never gets STAB\r\n\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t// Struggle in the same turn.\r\n\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\tif (type !== '???') {\r\n\t\t\tlet stab: number | [number, number] = 1;\r\n\r\n\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\r\n\t\t\tif (isSTAB) {\r\n\t\t\t\tstab = 1.5;\r\n\t\t\t}\r\n\r\n\t\t\t// The Stellar tera type makes this incredibly confusing\r\n\t\t\t// If the move's type does not match one of the user's base types,\r\n\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\r\n\t\t\t//\r\n\t\t\t// If the move's type does match one of the user's base types,\r\n\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\r\n\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\r\n\t\t\tif (pokemon.terastallized === 'Stellar') {\r\n\t\t\t\tif (!pokemon.stellarBoostedTypes.includes(type)) {\r\n\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\r\n\t\t\t\t\tif (pokemon.species.name !== 'Teradoof-Stellar') {\r\n\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) {\r\n\t\t\t\t\tstab = 2;\r\n\t\t\t\t}\r\n\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, stab);\r\n\t\t\t}\r\n\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t}\r\n\r\n\t\t// types\r\n\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\r\n\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\tif (typeMod > 0) {\r\n\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\r\n\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\tbaseDamage *= 2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeMod < 0) {\r\n\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\r\n\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\r\n\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility('goondrive')) {\r\n\t\t\tif (this.battle.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\r\n\r\n\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t}\r\n\r\n\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\r\n\r\n\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\treturn tr(baseDamage, 16);\r\n\t},\r\n\t\tterastallize(pokemon: Pokemon) {\r\n\t\t\tif (pokemon.illusion && ['Ogerpon', 'Teradoof'].includes(pokemon.illusion.species.baseSpecies)) {\r\n\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t}\r\n\r\n\t\t\tconst type = pokemon.teraType;\r\n\t\t\tthis.battle.add('-terastallize', pokemon, type);\r\n\t\t\tpokemon.terastallized = type;\r\n\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\tally.canTerastallize = null;\r\n\t\t\t}\r\n\t\t\tpokemon.addedType = '';\r\n\t\t\tpokemon.knownType = true;\r\n\t\t\tpokemon.apparentType = type;\r\n\t\t\tif (pokemon.species.baseSpecies === 'Ogerpon') {\r\n\t\t\t\tconst tera = pokemon.species.id === 'ogerpon' ? 'tealtera' : 'tera';\r\n\t\t\t\tpokemon.formeChange(pokemon.species.id + tera, null, true);\r\n\t\t\t}\r\n\t\t\tif (pokemon.species.name === 'Teradoof-Terastal' && type === 'Stellar') {\r\n\t\t\t\tpokemon.formeChange('Teradoof-Stellar', null, true);\r\n\t\t\t\tpokemon.formeChange('Teradoof-Stellar', null, true);\r\n\t\t\t\tpokemon.baseMaxhp = Math.floor(Math.floor(\r\n\t\t\t\t\t2 * pokemon.species.baseStats['hp'] + pokemon.set.ivs['hp'] + Math.floor(pokemon.set.evs['hp'] / 4) + 100\r\n\t\t\t\t) * pokemon.level / 100 + 10);\r\n\t\t\t\tconst newMaxHP = pokemon.baseMaxhp;\r\n\t\t\t\tpokemon.hp = newMaxHP - (pokemon.maxhp - pokemon.hp);\r\n\t\t\t\tpokemon.maxhp = newMaxHP;\r\n\t\t\t\tthis.battle.add('-heal', pokemon, pokemon.getHealth, '[silent]');\r\n\t\t\t}\r\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\r\n\t\t},\r\n\t\tcanMegaEvo(pokemon: Pokemon) {\r\n\t\tconst species = pokemon.baseSpecies;\r\n\t\t\tconst altForme = species.otherFormes && this.dex.species.get(species.otherFormes[0]);\r\n\t\t\tif(altForme) console.log(altForme);\r\n\t\t\tconst item = pokemon.getItem();\r\n\t\t\t// Mega Rayquaza\r\n\t\t\tif (altForme?.isMega && altForme?.requiredMove &&\r\n\t\t\t\tpokemon.baseMoves.includes(toID(altForme.requiredMove)) && !item.zMove) {\r\n\t\t\t\treturn altForme.name;\r\n\t\t\t}\r\n\t\t\t// a hacked-in Megazard X can mega evolve into Megazard Y, but not into Megazard X\r\n\t\t\tif (item.megaEvolves === species.baseSpecies && item.megaStone !== species.name) {\r\n\t\t\t\treturn item.megaStone;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tcanUltraBurst(pokemon) {\r\n\t\t\tif (pokemon.baseSpecies.name === 'Necro Mane-Dusk Mane' && pokemon.getItem().id === 'depletedultranecroziumz') {\r\n\t\t\t\treturn \"Necro Mane-Ultra\";\r\n\t\t\t}\r\n\t\t\t/*if (['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane'].includes(pokemon.baseSpecies.name) &&\r\n\t\t\t\tpokemon.getItem().id === 'ultranecroziumz') {\r\n\t\t\t\treturn \"Necrozma-Ultra\";\r\n\t\t\t}*/\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\thitStepAccuracy(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t\tconst hitResults = [];\r\n\t\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\t\tthis.battle.activeTarget = target;\r\n\t\t\t\t// calculate true accuracy\r\n\t\t\t\tlet accuracy = move.accuracy;\r\n\t\t\t\tif (move.ohko) { // bypasses accuracy modifiers\r\n\t\t\t\t\tif (!target.isSemiInvulnerable()) {\r\n\t\t\t\t\t\taccuracy = 30;\r\n\t\t\t\t\t\tif (move.ohko === 'Ice' && this.battle.gen >= 7 && !pokemon.hasType('Ice')) {\r\n\t\t\t\t\t\t\taccuracy = 20;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!target.volatiles['dynamax'] && pokemon.level >= target.level &&\r\n\t\t\t\t\t\t\t(move.ohko === true || !target.hasType(move.ohko))) {\r\n\t\t\t\t\t\t\taccuracy += (pokemon.level - target.level);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\r\n\t\t\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\t\tlet boost = 0;\r\n\t\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boost - boosts['evasion'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * (3 + boost) / 3);\r\n\t\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * 3 / (3 - boost));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (move.alwaysHit || (move.id === 'toxic' && this.battle.gen >= 8 && pokemon.hasType('Poison')) ||\r\n\t\t\t\t\t\t(move.target === 'self' && move.category === 'Status' && !target.isSemiInvulnerable())) {\r\n\t\t\t\t\taccuracy = true; // bypasses ohko accuracy modifiers\r\n\t\t\t\t} else {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t}\r\n\t\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy, 100)) {\r\n\t\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!move.spreadHit) this.battle.attrLastMove('[miss]');\r\n\t\t\t\t\t\tthis.battle.add('-miss', pokemon, target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ohko && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pokemon.hasAbility('coinflipmechanics')) {\r\n\t\t\t\t\t\tthis.battle.add(`c:|${Math.floor(Date.now() / 1000)}|${pokemon.name}|Aw dang it`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (target.hasAbility('coinflipmechanics')) {\r\n\t\t\t\t\t\tthis.battle.add(`c:|${Math.floor(Date.now() / 1000)}|${target.name}|Hey, ${pokemon.side.name}, did you know 99% of gamblers quit right before hitting it big?`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (target.hasAbility('swallowswallow')) {\r\n\t\t\t\t\t\tthis.battle.add(`c:|${Math.floor(Date.now() / 1000)}|${target.name}|@${pokemon.name}, sorry, your vote did not follow the format - try again`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t}\r\n\t\t\treturn hitResults;\r\n\t\t}\r\n\t},\r\n\tpokemon: {\r\n\t\t// for serious showdown\r\n\t\tignoringAbility() {\r\n\t\t\tif (this.battle.gen >= 5 && !this.isActive) return true;\r\n\t\t\tif (this.getAbility().isPermanent) return false;\r\n\t\t\tif (this.volatiles['gastroacid']) return true;\r\n\t\t\tif (this.ability === ('neutralizinggas' as ID)) return false;\r\n\t\t\tif (this.volatiles['seriousshowdown']) return true;\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tgetActionSpeed() {\r\n\t\t\tlet speed = this.getStat('spe', false, false);\r\n\t\t\tif (this.battle.field.getPseudoWeather('trickroom') || this.battle.getAllActive().some(poke => poke.hasAbility('trjumpscare'))) {\r\n\t\t\t\tspeed = 10000 - speed;\r\n\t\t\t}\r\n\t\t\treturn this.battle.trunc(speed, 13);\r\n\t\t},\r\n\t\tsetStatus(\r\n\t\tstatus: string | Condition,\r\n\t\tsource: Pokemon | null = null,\r\n\t\tsourceEffect: Effect | null = null,\r\n\t\tignoreImmunities = false\r\n\t\t) {\r\n\t\t\tif (!this.hp) return false;\r\n\t\t\tstatus = this.battle.dex.conditions.get(status);\r\n\t\t\tif (this.battle.event) {\r\n\t\t\t\tif (!source) source = this.battle.event.source;\r\n\t\t\t\tif (!sourceEffect) sourceEffect = this.battle.effect;\r\n\t\t\t}\r\n\t\t\tif (!source) source = this;\r\n\r\n\t\t\tif (this.status === status.id) {\r\n\t\t\t\tif ((sourceEffect as Move)?.status === this.status) {\r\n\t\t\t\t\tthis.battle.add('-fail', this, this.status);\r\n\t\t\t\t} else if ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!ignoreImmunities && status.id &&\r\n\t\t\t\t\t!(source?.hasAbility('corrosion') && !(source?.hasAbility('codebreaker')) && ['tox', 'psn'].includes(status.id))) {\r\n\t\t\t\t// the game currently never ignores immunities\r\n\t\t\t\tif (!this.runStatusImmunity(status.id === 'tox' ? 'psn' : status.id)) {\r\n\t\t\t\t\tthis.battle.debug('immune to status');\r\n\t\t\t\t\tif ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst prevStatus = this.status;\r\n\t\t\tconst prevStatusState = this.statusState;\r\n\t\t\tif (status.id) {\r\n\t\t\t\tconst result: boolean = this.battle.runEvent('SetStatus', this, source, sourceEffect, status);\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tthis.battle.debug('set status [' + status.id + '] interrupted');\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.status = status.id;\r\n\t\t\tthis.statusState = {id: status.id, target: this};\r\n\t\t\tif (source) this.statusState.source = source;\r\n\t\t\tif (status.duration) this.statusState.duration = status.duration;\r\n\t\t\tif (status.durationCallback) {\r\n\t\t\t\tthis.statusState.duration = status.durationCallback.call(this.battle, this, source, sourceEffect);\r\n\t\t\t}\r\n\r\n\t\t\tif (status.id && !this.battle.singleEvent('Start', status, this.statusState, this, source, sourceEffect)) {\r\n\t\t\t\tthis.battle.debug('status start [' + status.id + '] interrupted');\r\n\t\t\t\t// cancel the setstatus\r\n\t\t\t\tthis.status = prevStatus;\r\n\t\t\t\tthis.statusState = prevStatusState;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (status.id && !this.battle.runEvent('AfterSetStatus', this, source, sourceEffect, status)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\thasAbility(ability) {\r\n\t\t\tif (this.ignoringAbility()) return false;\r\n\t\t\tif (Array.isArray(ability)) return ability.some(abil => this.hasAbility(abil));\r\n\t\t\tconst abilityid = this.battle.toID(ability);\r\n\t\t\treturn this.ability === abilityid || !!this.volatiles['ability:' + abilityid];\r\n\t\t},\r\n\t\tgetWorstStat(unboosted?: boolean, unmodified?: boolean): StatIDExceptHP {\r\n\t\t\tlet statName: StatIDExceptHP = 'atk';\r\n\t\t\tlet worstStat = 9999;\r\n\t\t\tconst stats: StatIDExceptHP[] = ['atk', 'def', 'spa', 'spd', 'spe'];\r\n\t\t\tfor (const i of stats) {\r\n\t\t\t\tif (this.getStat(i, unboosted, unmodified) < worstStat) {\r\n\t\t\t\t\tstatName = i;\r\n\t\t\t\t\tworstStat = this.getStat(i, unboosted, unmodified);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn statName;\r\n\t\t}\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
