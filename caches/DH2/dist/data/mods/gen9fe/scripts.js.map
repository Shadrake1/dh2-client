{
  "version": 3,
  "sources": ["../../../../data/mods/gen9fe/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n        excludeStandardTiers: true,\r\n        customTiers: ['FEOU', 'FEUUBL', 'FEUU', 'FENFE', 'FELC'],\r\n\t},\r\n\tactions: {\r\n\t\tinherit: true,\r\n\t\tterastallize(pokemon: Pokemon) {\r\n\t\t\tif (pokemon.illusion && ['Hattepon', 'Ogerpon', 'Terapagos'].includes(pokemon.illusion.species.baseSpecies)) {\r\n\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Rough Image'), pokemon.abilityState, pokemon);\r\n\t\t\t}\r\n\t\r\n\t\t\tconst type = pokemon.teraType;\r\n\t\t\tthis.battle.add('-terastallize', pokemon, type);\r\n\t\t\tpokemon.terastallized = type;\r\n\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\tally.canTerastallize = null;\r\n\t\t\t}\r\n\t\t\tpokemon.addedType = '';\r\n\t\t\tpokemon.knownType = true;\r\n\t\t\tpokemon.apparentType = type;\r\n\t\t\tpokemon.side.addSideCondition('teraused', pokemon);\r\n\t\t\tif (['Ogerpon','Hattepon'].includes(pokemon.species.baseSpecies)) {\r\n\t\t\t\tconst tera = ['ogerpon','hattepon'].includes(pokemon.species.id) ? 'tealtera' : 'tera';\r\n\t\t\t\tpokemon.formeChange(pokemon.species.id + tera, null, true);\r\n\t\t\t}\r\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\r\n\t\t},\r\n\t\tcanMegaEvo(pokemon) {\r\n\t\t\tconst species = pokemon.baseSpecies;\r\n\t\t\tconst altForme = species.otherFormes && this.dex.species.get(species.otherFormes[0]);\r\n\t\t\tconst item = pokemon.getItem();\r\n\t\t\tif (\r\n\t\t\t\taltForme?.isMega && altForme?.requiredMove &&\r\n\t\t\t\tpokemon.baseMoves.includes(this.dex.toID(altForme.requiredMove)) && !item.zMove\r\n\t\t\t) {\r\n\t\t\t\treturn altForme.name;\r\n\t\t\t}\r\n\t\t\tif (item.megaStone === species.name) return null;\r\n\t\t\tswitch (species.name) {\r\n\t\t\t\tcase \"Chomptry\":\r\n\t\t\t\t\tif (item.name === \"Garchompite\") {\r\n\t\t\t\t\t\treturn \"Chomptry-Mega\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\tcase \"Tentazor\":\r\n\t\t\t\t\tif (item.name === \"Scizorite\") {\r\n\t\t\t\t\t\treturn \"Tentazor-Mega\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\tcase \"Aerodirge\":\r\n\t\t\t\t\tif (item.name === \"Aerodactylite\") {\r\n\t\t\t\t\t\treturn \"Aerodirge-Mega\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (item.megaEvolves === species.baseSpecies) {\r\n\t\t\t\treturn item.megaStone;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tcanUltraBurst(pokemon) {\r\n\t\t\tif (pokemon.baseSpecies.name === 'Necrotrik-Dawn-Wings' && pokemon.getItem().id === 'depletedultranecroziumz') {\r\n\t\t\t\treturn \"Necrotrik-Ultra\";\r\n\t\t\t}\r\n\t\t\t/*if (['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane'].includes(pokemon.baseSpecies.name) &&\r\n\t\t\t\tpokemon.getItem().id === 'ultranecroziumz') {\r\n\t\t\t\treturn \"Necrozma-Ultra\";\r\n\t\t\t}*/\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\thitStepTryImmunity(targets, pokemon, move) {\r\n\t\t\tconst hitResults = [];\r\n\t\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\t\tif (/*this.battle.gen >= 6 && */move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\r\n\t\t\t\t\tthis.battle.debug('natural powder immunity');\r\n\t\t\t\t} else if (this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\r\n\t\t\t\t\tif (/*this.battle.gen >= 7 && */move.pranksterBoosted && !this.dex.getImmunity('prankster', target) && pokemon.hasAbility(['prankster','openingact','prankrock'])\r\n\t\t\t\t\t\t && !targets[i].isAlly(pokemon)) {\r\n\t\t\t\t\t\tthis.battle.debug('natural prankster immunity');\r\n\t\t\t\t\t\tif (!target.illusion) this.battle.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thitResults[i] = true;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t}\r\n\t\t\treturn hitResults;\r\n\t\t},\r\n\r\n  \t\trunMove(\r\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t\t\tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n\t\t\t) {\r\n\t\t\t\tpokemon.activeMoveActions++;\r\n\t\t\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\t\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\t\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet move;\r\n\t\t\t\tif (zMove) {\r\n\t\t\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t\t\t} else if (maxMove) {\r\n\t\t\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmove = baseMove;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tmove.isExternal = externalMove;\r\n\t\t\r\n\t\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\t\t\r\n\t\t\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n\t\t\t\tif (!willTryMove) {\r\n\t\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t// Used exclusively for a hint later\r\n\t\t\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t\t\t\tpokemon.addVolatile(move.id);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (move.beforeMoveCallback/*) {\r\n\t\t\t\t\tif (*/&& move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.lastDamage = 0;\r\n\t\t\t\tlet lockedMove;\r\n\t\t\t\tif (!externalMove) {\r\n\t\t\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\t\t\tif (lockedMove) {\r\n\t\t\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t\t\t} else if (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t// Dancer Petal Dance hack\r\n\t\t\t\t// TODO: implement properly\r\n\t\t\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\t\t\r\n\t\t\t\tif (zMove) {\r\n\t\t\t\t\tif (pokemon.illusion) {\r\n\t\t\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Rough Image'), pokemon.abilityState, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.battle.add('-zpower', pokemon);\r\n\t\t\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tconst oldActiveMove = move;\r\n\t\t\r\n\t\t\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\t\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t\t\t\tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\t\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t\t\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t\t\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\t\t\tif (move.flags['dance'] && moveDidSomething && !move.isExternal) {\r\n\t\t\t\t\tconst dancers = this.battle.getAllActive().filter(\r\n\t\t\t\t\t\t(currentPoke) => (currentPoke.hasAbility('choreography') && pokemon !== currentPoke\r\n\t\t\t\t\t\t&& !currentPoke.abilityState.choreography && !currentPoke.fainted && !currentPoke.isSemiInvulnerable())\r\n\t\t\t\t\t);\r\n\t\t\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\t\t\tdancers.sort(\r\n\t\t\t\t\t\t(a, b) => (a.storedStats['spe'] - b.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\r\n\t\t\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\t\t\tthis.battle.add('-activate', dancer, 'ability: Choreography');\r\n\t\t\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\r\n\t\t\t\t\t\t\ttargetOf1stDance :\r\n\t\t\t\t\t\t\tpokemon;\r\n\t\t\t\t\t\tconst dancersTargetLoc = dancer.getLocOf(dancersTarget);\r\n\t\t\t\t\t\tthis.runMove(move.id, dancer, dancersTargetLoc, this.dex.abilities.get('choreography'), undefined, true);\r\n\t\t\t\t\t\tdancer.abilityState.choreography = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t\t\t\tthis.battle.faintMessages();\r\n\t\t\t\tthis.battle.checkWin();\r\n\t\t\t},\r\n\r\n\t\t\r\n\t\t\tuseMoveInner(moveOrMoveName, pokemon, target, sourceEffect, zMove, maxMove) {\r\n\t\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\t\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\r\n\t\t\r\n\t\t\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\t\tpokemon.lastMoveUsed = move;\r\n\t\t\t\tif (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\r\n\t\t\t\t\tif (move.id === 'weatherball' && zMove) {\r\n\t\t\t\t\t\t// Z-Weather Ball only changes types if it's used directly,\r\n\t\t\t\t\t\t// not if it's called by Z-Sleep Talk or something.\r\n\t\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\t\tif (move.type !== 'Normal') sourceEffect = move;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmove = this.getActiveZMove(move, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tif (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\r\n\t\t\t\t\tif (maxMove && move.category !== 'Status') {\r\n\t\t\t\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\r\n\t\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\t\tthis.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmove = this.getActiveMaxMove(move, pokemon);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (this.battle.activeMove) {\r\n\t\t\t\t\tmove.priority = this.battle.activeMove.priority;\r\n\t\t\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.battle.activeMove.pranksterBoosted;\r\n\t\t\t\t}\r\n\t\t\t\tconst baseTarget = move.target;\r\n\t\t\t\tlet targetRelayVar = {target};\r\n\t\t\t\ttargetRelayVar = this.battle.runEvent('ModifyTarget', pokemon, target, move, targetRelayVar, true);\r\n\t\t\t\tif (targetRelayVar.target !== undefined) target = targetRelayVar.target;\r\n\t\t\t\telse if (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t\tif (move.target === 'self' || move.target === 'allies') {\r\n\t\t\t\t\ttarget = pokemon;\r\n\t\t\t\t}\r\n\t\t\t\tif (sourceEffect) {\r\n\t\t\t\t\tmove.sourceEffect = sourceEffect.id;\r\n\t\t\t\t\tmove.ignoreAbility = (sourceEffect as ActiveMove).ignoreAbility;\r\n\t\t\t\t}\r\n\t\t\t\tlet moveResult = false;\r\n\t\t\r\n\t\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\t\t\r\n\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t\t\t// Adjust before the next event so the correct target is passed to the\r\n\t\t\t\t\t// event\r\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\tmove = this.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t\t// Adjust again\r\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t\t}\r\n\t\t\t\tif (!move || pokemon.fainted) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tlet attrs = '';\r\n\t\t\r\n\t\t\t\tlet movename = move.name;\r\n\t\t\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\r\n\t\t\t\tif (sourceEffect) attrs += `|[from]${sourceEffect.fullname}`;\r\n\t\t\t\tif (zMove && move.isZ === true) {\r\n\t\t\t\t\tattrs = '|[anim]' + movename + attrs;\r\n\t\t\t\t\tmovename = 'Z-' + movename;\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.addMove('move', pokemon, movename, target + attrs);\r\n\t\t\r\n\t\t\t\tif (zMove) this.runZPower(move, pokemon);\r\n\t\t\r\n\t\t\t\tif (!target) {\r\n\t\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\t\t//this.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tconst {targets, pressureTargets} = pokemon.getMoveTargets(move, target);\r\n\t\t\t\tif (targets.length) {\r\n\t\t\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tconst callerMoveForPressure = sourceEffect && (sourceEffect as ActiveMove).pp ? sourceEffect as ActiveMove : null;\r\n\t\t\t\tif (!sourceEffect || callerMoveForPressure || sourceEffect.id === 'pursuit') {\r\n\t\t\t\t\tlet extraPP = 0;\r\n\t\t\t\t\tfor (const source of pressureTargets) {\r\n\t\t\t\t\t\tconst ppDrop = this.battle.runEvent('DeductPP', source, pokemon, move);\r\n\t\t\t\t\t\tif (ppDrop !== true) {\r\n\t\t\t\t\t\t\textraPP += ppDrop || 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (extraPP > 0) {\r\n\t\t\t\t\t\tpokemon.deductPP(callerMoveForPressure || moveOrMoveName, extraPP);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tthis.battle.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\r\n\t\t\r\n\t\t\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (/*this.battle.gen !== 4 &&*/ move.selfdestruct === 'always') {\r\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tlet damage: number | false | undefined | '' = false;\r\n\t\t\t\tif (['all','foeSide','allySide','allyTeam'].includes(move.target)) {\r\n\t\t\t\t\tdamage = this.tryMoveHit(targets, pokemon, move);\r\n\t\t\t\t\tif (damage === this.battle.NOT_FAIL) pokemon.moveThisTurnResult = null;\r\n\t\t\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\r\n\t\t\t\t} else if (targets.length) {\r\n\t\t\t\t\t//if (this.battle.gen === 4 && move.selfdestruct === 'always') {\r\n\t\t\t\t\t//\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if (!targets.length) {\r\n\t\t\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\t\t\t//this.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\r\n\t\t\t\tif (!pokemon.hp) {\r\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (!moveResult) {\r\n\t\t\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (\r\n\t\t\t\t\t!move.negateSecondary &&\r\n\t\t\t\t\t!(move.hasSheerForce && pokemon.hasAbility(['sheerforce','forceofnature','sandwrath','overwhelming','powerbuns'])) &&\r\n\t\t\t\t\t!move.flags['futuremove']\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst originalHp = pokemon.hp;\r\n\t\t\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status') {\r\n\t\t\t\t\t\tconst threshold = pokemon.maxhp * 0.5;\r\n\t\t\t\t\t\tif (pokemon.hp <= threshold && originalHp > threshold)\r\n\t\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tmodifyDamage(\r\n\t\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t\t\t) {\r\n\t\t\t\tconst tr = this.battle.trunc;\r\n\t\t\t\tconst type = (move.type ||= '???');\r\n\r\n\t\t\t\tbaseDamage += 2;\r\n\r\n\t\t\t\tif (move.spreadHit) {\r\n\t\t\t\t\t// multi-target modifier (doubles only)\r\n\t\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t\t\t// Parental Bond modifier\r\n\t\t\t\t\tconst bondModifier = 0.25; //this.battle.gen > 6 ? 0.25 : 0.5;\r\n\t\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// weather modifier\r\n\t\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\t\t// crit - not a modifier\r\n\t\t\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\t\t\tif (isCrit) {\r\n\t\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (1.5/*this.battle.gen >= 6 ? 1.5 : 2*/)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// random factor - also not a modifier\r\n\t\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\r\n\t\t\t\t// STAB\r\n\t\t\t\t// The \"???\" type never gets STAB\r\n\t\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t\t\t// Struggle in the same turn.\r\n\t\t\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\t\t\tif (type !== '???') {\r\n\t\t\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\r\n\t\t\t\t\tlet stab: number | [number, number] = isSTAB ? 1.5 : 1\r\n\t\t\t\r\n\t\t\t\t\t// The Stellar tera type makes this incredibly confusing\r\n\t\t\t\t\t// If the move's type does not match one of the user's base types,\r\n\t\t\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\r\n\t\r\n\t\t\t\t\t// If the move's type does match one of the user's base types,\r\n\t\t\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\r\n\t\t\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\r\n\t\t\t\t\tif (pokemon.terastallized !== 'Stellar') {\r\n\t\t\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, \r\n\t\t\t\t\t\t\t(pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) ? 2 : stab\t\t\t\t\t\t \r\n\t\t\t\t\t\t);\t\r\n\t\t\t\t\t} else if (!pokemon.stellarBoostedTypes.includes(type)) {\r\n\t\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\r\n\t\t\t\t\t\tif (pokemon.species.name !== 'Terapagos-Stellar') {\r\n\t\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t\t\t}\r\n\t\t\t\t// types\r\n\t\t\t\tconst typeMod = this.battle.clampIntRange(target.runEffectiveness(move), -6, 6);\r\n\t\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\t\t\tif (typeMod > 0) {\r\n\t\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\r\n\t\t\t\t\tbaseDamage *= 2**typeMod;\r\n\t\t\t\t}\r\n\t\t\t\telse if (typeMod < 0) {\r\n\t\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\r\n\t\t\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\r\n\t\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility(['wellbakedflameorb','feistytempo','guts','adrenalinearoma'])\r\n\t\t\t\t\t && move.id !== 'facade') {\r\n\t\t\t\t\t//if (this.battle.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\t\t\t//if (this.battle.gen === 5) baseDamage ||= 1;\r\n\r\n\t\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\t\t\tif (/*this.battle.gen !== 5 &&*/ !baseDamage) return 1;\r\n\r\n\t\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\t\t\treturn tr(baseDamage, 16);\r\n\t\t\t}\r\n\t},\r\n\tpokemon: { \r\n\t\trunImmunity(type: string, message?: string | boolean) {\r\n\t\t\tif (!type || type === '???') return true;\r\n\t\t\tif (!this.battle.dex.types.isName(type)) {\r\n\t\t\t\tthrow new Error(\"Use runStatusImmunity for \" + type);\r\n\t\t\t}\r\n\t\t\tif (this.fainted) return false;\r\n\t\r\n\t\t\tconst negateImmunity = !this.battle.runEvent('NegateImmunity', this, type);\r\n\t\t\tconst notImmune = type === 'Ground' ?\r\n\t\t\t\tthis.isGrounded(negateImmunity) :\r\n\t\t\t\tnegateImmunity || this.battle.dex.getImmunity(type, this);\r\n\t\t\tif (notImmune) return true;\r\n\t\t\tif (message) {\r\n\t\t\t\tif (notImmune === null) {\r\n\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: ' + this.getAbility().name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tisGrounded(negateImmunity = false) {\r\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather/*) return true;\r\n\t\t\tif (*/|| 'ingrain' in this.volatiles/* && this.battle.gen >= 4) return true;\r\n\t\t\tif (*/|| 'smackdown' in this.volatiles) return true;\r\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\r\n\t\t\tif (item === 'ironball') return true;\r\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\r\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !('roost' in this.volatiles)) return false;\r\n\t\t\tif (\r\n\t\t\t\t(this.hasAbility(['levitate', 'holygrail', 'risingtension', 'freeflight', 'airbornearmor', 'hellkite','honeymoon','aircontrol','magnetize','unidentifiedflyingobject','anointed'])) &&\r\n\t\t\t\t!this.battle.suppressingAbility(this)\r\n\t\t\t) return null;\r\n\t\t\tif ('magnetrise' in this.volatiles/*) return false;\r\n\t\t\tif (*/|| 'telekinesis' in this.volatiles) return false;\r\n\t\t\treturn item !== 'airballoon';\r\n\t\t },\r\n     },\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
