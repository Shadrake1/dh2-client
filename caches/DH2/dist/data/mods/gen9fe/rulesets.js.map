{
  "version": 3,
  "sources": ["../../../../data/mods/gen9fe/rulesets.ts"],
  "sourcesContent": ["export const Rulesets: import('../../../sim/dex-formats').ModdedFormatDataTable = {\r\n\tmegadatamod: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Mega Data Mod',\r\n\t\tdesc: 'Gives data on stats, Ability and types when a Pok\u00E9mon Mega Evolves or undergoes Ultra Burst.',\r\n\t\tonSwitchIn(pokemon) {\r\n\t\t\tconst appearance = pokemon.illusion || pokemon;\r\n\t\t\tif (appearance.species.forme.startsWith('Mega') || appearance.species.forme.startsWith('Ultra')) {\r\n\t\t\t\t\tthis.add('-start', pokemon, 'typechange', appearance.getTypes(true).join('/'), '[silent]');\r\n\t\t\t}\r\n\t\t},\r\n\t\tonDamagingHit(damage, target, source, move) {\r\n\t\t\tif (!target.hasAbility(['illusion','afterimage','roughimage'])) return;\r\n\t\t\tif (target.species.forme.startsWith('Mega') || target.species.forme.startsWith('Ultra')) {\r\n\t\t\t\tthis.add('-start', target, 'typechange', target.getTypes(true).join('/'), '[silent]');\r\n\t\t\t} else {\r\n\t\t\t\tconst types = target.baseSpecies.types;\r\n\t\t\t\tif (target.getTypes().join() === types.join()) {\r\n\t\t\t\t\tthis.add('-end', target, 'typechange', '[silent]');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterMega(pokemon) {\r\n\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\r\n\t\t\tconst species = this.dex.species.get(pokemon.species.name);\r\n\t\t\tconst abilities = species.abilities;\r\n\t\t\tconst baseStats = species.baseStats;\r\n\t\t\tconst type = species.types[0];\r\n\t\t\tif (species.types[1]) {\r\n\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"https://${Config.routes.client}/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities[0] + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities[0] + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tdatamod: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Data Mod',\r\n\t\tdesc: 'When a new Pok\u00E9mon switches in for the first time, information about its types, stats and Abilities is displayed to both players.',\r\n\t\tonBegin() {\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\tconst species = this.dex.species.get(pokemon.species.name);\r\n\t\t\t\tconst baseSpecies = Dex.species.get(pokemon.species.name);\r\n\t\t\t\t//let modded = [0,1].some(type => species.types[type] !== baseSpecies.types[type]);\r\n\t\t\t\tlet modded = false;\r\n\t\t\t\t/*for (const abil in species.abilities) {\r\n\t\t\t\t\tconst abilName = species.abilities[abil];\r\n\t\t\t\t\tconst ability = this.dex.abilities.get(abilName);\r\n\t\t\t\t\tconst baseAbility = Dex.abilities.get(abilName);\r\n\t\t\t\t\tif ((ability.shortDesc || ability.desc) !== (baseAbility.shortDesc || baseAbility.desc)) {\r\n\t\t\t\t\t\tmodded = true;\r\n\t\t\t\t\t\t(pokemon.m.speciesModdedAbils ||= {})[abil] = ability;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (modded) {\r\n\t\t\t\t\tpokemon.isModded = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}*/\r\n\t\t\t\tfor (const type in [0, 1]) {\r\n\t\t\t\t\tif (species.types[type] !== baseSpecies.types[type]) {\r\n\t\t\t\t\t\t// console.log(species.types[type] + \" is different from \" + baseSpecies.types[type]);\r\n\t\t\t\t\t\tmodded = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (modded) {\r\n\t\t\t\t\tpokemon.isModded = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tmodded = /*if*/ (species.baseStats.hp !== baseSpecies.baseStats.hp/*) modded = true;\r\n\t\t\t\telse if (*/ || species.baseStats.atk !== baseSpecies.baseStats.atk/*) modded = true;\r\n\t\t\t\telse if (*/ || species.baseStats.def !== baseSpecies.baseStats.def/*) modded = true;\r\n\t\t\t\telse if (*/ || species.baseStats.spa !== baseSpecies.baseStats.spa/*) modded = true;\r\n\t\t\t\telse if (*/ || species.baseStats.spd !== baseSpecies.baseStats.spd/*) modded = true;\r\n\t\t\t\telse if (*/ || species.baseStats.spe !== baseSpecies.baseStats.spe/*) modded = true;\r\n\t\t\t\telse if (*/ || species.abilities[0] !== baseSpecies.abilities[0]/*) modded = true;\r\n\t\t\t\telse if (*/ || species.abilities[1] !== baseSpecies.abilities[1]/*) modded = true;\r\n\t\t\t\telse if (*/ || species.abilities['H'] !== baseSpecies.abilities['H']/*) modded = true;\r\n\t\t\t\telse if (*/ || species.abilities['S'] !== baseSpecies.abilities['S'])/* modded = true*/;\r\n\t\t\t\tif (modded) {\r\n\t\t\t\t\tpokemon.isModded = true;\r\n\t\t\t\t\t// console.log(species.name + \" is different from in canon\");\r\n\t\t\t\t// } else {\r\n\t\t\t\t\t// console.log(species.name + \" is the same as in canon\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonSwitchIn(pokemon) {\r\n\t\t\tconst appearance = pokemon.illusion || pokemon;\r\n\t\t\tlet switchedIn = pokemon.switchedIn;\r\n\t\t\tconst species = this.dex.species.get(appearance.species.name);\r\n\t\t\t// console.log(appearance.name + \" is being reported\");\r\n\t\t\tif (!appearance.isModded) return;\r\n\t\t\tthis.add('-start', pokemon, 'typechange', appearance.getTypes(true).join('/'), '[silent]');\r\n\t\t\tif (appearance.switchedIn) return;\r\n\t\t\tappearance.switchedIn = true;\r\n\t\t\tlet abilities = species.abilities[0];\r\n\t\t\tif (species.abilities[1]) {\r\n\t\t\t\tabilities += ` / ${species.abilities[1]}`;\r\n\t\t\t}\r\n\t\t\tif (species.abilities['H']) {\r\n\t\t\t\tabilities += ` / ${species.abilities['H']}`;\r\n\t\t\t}\r\n\t\t\tif (species.abilities['S']) {\r\n\t\t\t\tabilities += ` / ${species.abilities['S']}`;\r\n\t\t\t}\r\n\t\t\tconst baseStats = species.baseStats;\r\n\t\t\tconst type = species.types[0];\r\n\t\t\tif (species.types[1]) {\r\n\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"https://${Config.routes.client}/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t}\r\n\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t/*if (appearance.m.speciesModdedAbils) {\r\n\t\t\t\tfor (const abil in appearance.m.speciesModdedAbils) {\r\n\t\t\t\t\tconst ability = appearance.m.speciesModdedAbils[abil];\r\n\t\t\t\t\tlet buf = `<ul class=\"utilichart\"><li class=\"result\">`;\r\n\t\t\t\t\tbuf += `<span class=\"col abilitydesccol\">${ability.name}: ${ability.shortDesc || ability.desc}</span> `;\r\n\t\t\t\t\tbuf += `</li><li style=\"clear:both\"></li></ul>`;\r\n\t\t\t\t\tthis.add(`raw|${buf}`);\r\n\t\t\t\t}\r\n\t\t\t\tdelete appearance.m.speciesModdedAbils;\r\n\t\t\t}*/\r\n\t\t\t\r\n\t\t},\r\n\t\tonDamagingHit(damage, target, source, move) {\r\n\t\t\tif (!target.hasAbility(['illusion','roughimage','afterimage'])) return; // making sure the correct information is given when an Illusion breaks\r\n\t\t\tif (target.isModded) {\r\n\t\t\t\tthis.add('-start', target, 'typechange', target.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\tif (target.switchedIn) return;\r\n\t\t\t\ttarget.switchedIn = true;\r\n\t\t\t\tlet species = this.dex.species.get(target.species.name);\r\n\t\t\t\tlet abilities = species.abilities[0];\r\n\t\t\t\tif (species.abilities[1]) {\r\n\t\t\t\t\tabilities += ` / ${species.abilities[1]}`;\r\n\t\t\t\t}\r\n\t\t\t\tif (species.abilities['H']) {\r\n\t\t\t\t\tabilities += ` / ${species.abilities['H']}`;\r\n\t\t\t\t}\r\n\t\t\t\tif (species.abilities['S']) {\r\n\t\t\t\t\tabilities += ` / ${species.abilities['S']}`;\r\n\t\t\t\t}\r\n\t\t\t\tconst baseStats = species.baseStats;\r\n\t\t\t\tconst type = species.types[0];\r\n\t\t\t\tif (species.types[1]) {\r\n\t\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"https://${Config.routes.client}/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t}\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\r\n\t\t\t} else {\r\n\t\t\t\tconst types = target.baseSpecies.types;\r\n\t\t\t\tif (target.getTypes().join() === types.join()) {\r\n\t\t\t\t\tthis.add('-end', target, 'typechange', '[silent]');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\t},\r\n\tterastalclause: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Terastal Clause',\r\n\t\tdesc: \"Prevents Pok&eacute;mon without Terastal forms from Terastallizing\",\r\n\t\tonBegin() {\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t  if (pokemon.species.baseSpecies !== 'Hattepon') {\r\n\t\t\t\t  pokemon.canTerastallize = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.add('rule', 'Terastal Clause: Only Pok\\u00E9mon with Tera forms can Terastallize');\r\n\t\t},\r\n\t},\r\n\touterastalclause: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'OU Terastal Clause',\r\n\t\tdesc: \"Prevents Pok&eacute;mon without Terastal forms from Terastallizing\",\r\n\t\tonBegin() {\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t  if (pokemon.species.baseSpecies !== 'Hattepon') {\r\n\t\t\t\t  pokemon.canTerastallize = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.add('rule', 'OU Terastal Clause: Only Pok\\u00E9mon with Tera forms can Terastallize');\r\n\t\t},\r\n\t},\r\n\t\r\n\tevasionabilitiesclause: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Evasion Abilities Clause',\r\n\t\tdesc: \"Bans abilities that boost Evasion under certain weather conditions\",\r\n\t\tbanlist: ['Sand Veil', 'Snow Cloak', 'Sand Sword'],\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Evasion Abilities Clause: Evasion abilities are banned');\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
