{
  "version": 3,
  "sources": ["../../../../data/mods/bearticphone/scripts.ts"],
  "sourcesContent": ["export const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tgen: 9,\r\n\tactions: {\r\n\t\tinherit: true,\r\n\t   runMove(\r\n\t\t   moveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t   \tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n   \t) {\r\n\t   \tpokemon.activeMoveActions++;\r\n\t   \tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t   \tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t   \tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n   \t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t   \t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t   \t\tif (changedMove && changedMove !== true) {\r\n\t\t   \t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t   \t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t   \t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t   \t}\r\n\t   \t}\r\n   \t\tlet move = baseMove;\r\n\t   \tif (zMove) {\r\n\t   \t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t   \t} else if (maxMove) {\r\n\t\t   \tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t   \t}\r\n\r\n\t   \tmove.isExternal = externalMove;\r\n\r\n\t   \tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t   \tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n   \t\tif (!willTryMove) {\r\n\t\t   \tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t   \tthis.battle.clearActiveMove(true);\r\n\t\t\t   pokemon.moveThisTurnResult = willTryMove;\r\n\t\t\t   return;\r\n\t\t   }\r\n\r\n\t\t   if (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t   \tpokemon.addVolatile(move.id);\r\n\t\t   }\r\n\r\n\t\t   if (move.beforeMoveCallback) {\r\n\t\t\t   if (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\t   this.battle.clearActiveMove(true);\r\n\t\t\t\t   pokemon.moveThisTurnResult = false;\r\n\t\t\t\t   return;\r\n\t\t\t   }\r\n\t\t   }\r\n\t\t   pokemon.lastDamage = 0;\r\n\t\t   let lockedMove;\r\n\t\t   if (!externalMove) {\r\n\t\t   \tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t   \tif (lockedMove === true) lockedMove = false;\r\n\t\t   \tif (!lockedMove) {\r\n\t\t\t    \tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t   \tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t   \tthis.battle.clearActiveMove(true);\r\n\t\t\t\t   \tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t   \treturn;\r\n\t\t\t   \t}\r\n\t   \t\t} else {\r\n\t\t   \t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t    \t}\r\n\t\t\t   pokemon.moveUsed(move, targetLoc);\r\n\t   \t}\r\n\r\n\t\t   const noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t   \tif (zMove) {\r\n\t\t\t   if (pokemon.illusion) {\r\n\t\t\t   \tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t   \t}\r\n\t\t   \tthis.battle.add('-zpower', pokemon);\r\n\t\t   \tpokemon.side.zMoveUsed = true;\r\n\t   \t}\r\n\r\n\t   \tconst oldActiveMove = move;\r\n\r\n\t\t   const moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t   \tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t   \tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t   \tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t   \tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t   \tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t   \t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t   \t}\r\n\r\n\t\t\t/*\r\n\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\t\tif (moveDidSomething && !move.isExternal) {\r\n\t\t\t\tconst dancers = [];\r\n\t\t\t\tconst confusemoves = ['axekick', 'chatter', 'confuseray', 'confusion', 'dizzypunch', 'dynamicpunch', 'flatter', 'hurricane', 'magicaltorque',\r\n\t\t\t\t\t\t\t\t\t\t\t 'psybeam', 'rockclimb', 'secretpower', 'shadowpanic', 'signalbeam', 'strangesteam', 'supersonic', 'swagger', 'sweetkiss', 'teeterdance', 'waterpulse'];\r\n\t\t\t\tfor (const currentPoke of this.battle.getAllActive()) {\r\n\t\t\t\t\tif (pokemon === currentPoke || currentPoke.isSemiInvulnerable()) continue;\r\n\t\t\t\t\tif (currentPoke.hasAbility('twoleftfeet')) {\r\n\t\t\t\t\t\tif (!confusemoves.includes(move.id) && !confusemoves.includes(move.name)) continue;\r\n\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t} else if (currentPoke.hasAbility('beantheredonethat') && move.category === 'Status') {\r\n\t\t\t\t\t\tif (['rototiller','flowershield','magneticflux','gearup'].includes(move.id)) {\r\n\t\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t\t} else if (move.boosts) {\r\n\t\t\t\t\t\t\tlet i: BoostID;\r\n\t\t\t\t\t\t\tfor (i in move.boosts) {\r\n\t\t\t\t\t\t\t\tif (boost[i]! > 0) {\r\n\t\t\t\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\t\tdancers.sort(\r\n\t\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t\t);\r\n\t\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\r\n\t\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\t\tif (dancer.fainted) continue;\r\n\t\t\t\t\tthis.battle.add('-activate', dancer, 'ability: ' + dancer.getAbility().name);\r\n\t\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\r\n\t\t\t\t\t\ttargetOf1stDance :\r\n\t\t\t\t\t\tpokemon;\r\n\t\t\t\t\tconst dancersTargetLoc = dancer.getLocOf(dancersTarget);\r\n\t\t\t\t\tthis.runMove(move.id, dancer, dancersTargetLoc, this.dex.abilities.get(dancer.ability), undefined, true);\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t   \tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t   \tthis.battle.faintMessages();\r\n\t   \tthis.battle.checkWin();\r\n   \t}\r\n   },\r\n\tteambuilderConfig: {\r\n\t\texcludeStandardTiers: true,\r\n\t\tcustomTiers: ['bear'],\r\n   },\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
