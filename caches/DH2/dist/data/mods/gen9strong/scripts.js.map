{
  "version": 3,
  "sources": ["../../../../data/mods/gen9strong/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\t\r\n\tactions: {\r\n\t\tinherit: true,\r\n\t\tgetDamage(\r\n\t\t\tsource: Pokemon, target: Pokemon, move: string | number | ActiveMove,\r\n\t\t\tsuppressMessages = false\r\n\t\t): number | undefined | null | false {\r\n\t\t\tif (typeof move === 'string') move = this.dex.getActiveMove(move);\r\n\r\n\t\t\tif (typeof move === 'number') {\r\n\t\t\t\tconst basePower = move;\r\n\t\t\t\tmove = new Dex.Move({\r\n\t\t\t\t\tbasePower,\r\n\t\t\t\t\ttype: '???',\r\n\t\t\t\t\tcategory: 'Physical',\r\n\t\t\t\t\twillCrit: false,\r\n\t\t\t\t}) as ActiveMove;\r\n\t\t\t\tmove.hit = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\t\tif (!target.runImmunity(move.type, !suppressMessages)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ohko) return target.maxhp;\r\n\t\t\tif (move.damageCallback) return move.damageCallback.call(this.battle, source, target);\r\n\t\t\tif (move.damage === 'level') {\r\n\t\t\t\treturn source.level;\r\n\t\t\t} else if (move.damage) {\r\n\t\t\t\treturn move.damage;\r\n\t\t\t}\r\n\r\n\t\t\tconst category = this.battle.getCategory(move);\r\n\r\n\t\t\tlet basePower: number | false | null = move.basePower;\r\n\t\t\tif (move.basePowerCallback) {\r\n\t\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\r\n\t\t\t}\r\n\t\t\tif (!basePower) return basePower === 0 ? undefined : basePower;\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\r\n\t\t\tlet critMult;\r\n\t\t\tlet critRatio = this.battle.runEvent('ModifyCritRatio', source, target, move, move.critRatio || 0);\r\n\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 4);\r\n\t\t\tcritMult = [0, 24, 8, 2, 1];\r\n\r\n\t\t\tconst moveHit = target.getMoveHitData(move);\r\n\t\t\tmoveHit.crit = move.willCrit || false;\r\n\t\t\tif (move.willCrit === undefined) {\r\n\t\t\t\tif (critRatio) {\r\n\t\t\t\t\tmoveHit.crit = this.battle.randomChance(1, critMult[critRatio]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (moveHit.crit) {\r\n\t\t\t\tmoveHit.crit = this.battle.runEvent('CriticalHit', target, null, move);\r\n\t\t\t}\r\n\r\n\t\t\t// happens after crit calculation\r\n\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\r\n\r\n\t\t\tif (!basePower) return 0;\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\t\t\t// Hacked Max Moves have 0 base power, even if you Dynamax\r\n\t\t\tif ((!source.volatiles['dynamax'] && move.isMax) || (move.isMax && this.dex.moves.get(move.baseMove).isMax)) {\r\n\t\t\t\tbasePower = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tbasePower < 60 && source.getTypes(true).includes(move.type) && source.terastallized && move.priority <= 0 &&\r\n\t\t\t\t// Hard move.basePower check for moves like Dragon Energy that have variable BP\r\n\t\t\t\t!move.multihit && !((move.basePower === 0 || move.basePower === 150) && move.basePowerCallback)\r\n\t\t\t) {\r\n\t\t\t\tbasePower = 60;\r\n\t\t\t}\r\n\r\n\t\t\tconst level = source.level;\r\n\r\n\t\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\r\n\t\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\r\n\r\n\t\t\tconst isPhysical = move.category === 'Physical';\r\n\t\t\tlet attackStat: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\r\n\t\t\tconst defenseStat: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\r\n\r\n\t\t\tconst statTable = {atk: 'Atk', def: 'Def', spa: 'SpA', spd: 'SpD', spe: 'Spe'};\r\n\r\n\t\t\tlet atkBoosts = attacker.boosts[attackStat];\r\n\t\t\tlet defBoosts = defender.boosts[defenseStat];\r\n\r\n\t\t\tlet ignoreNegativeOffensive = !!move.ignoreNegativeOffensive;\r\n\t\t\tlet ignorePositiveDefensive = !!move.ignorePositiveDefensive;\r\n\r\n\t\t\tif (moveHit.crit) {\r\n\t\t\t\tignoreNegativeOffensive = true;\r\n\t\t\t\tignorePositiveDefensive = true;\r\n\t\t\t}\r\n\t\t\tconst ignoreOffensive = !!(move.ignoreOffensive || (ignoreNegativeOffensive && atkBoosts < 0));\r\n\t\t\tconst ignoreDefensive = !!(move.ignoreDefensive || (ignorePositiveDefensive && defBoosts > 0));\r\n\r\n\t\t\tif (ignoreOffensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\t\tatkBoosts = 0;\r\n\t\t\t}\r\n\t\t\tif (ignoreDefensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\r\n\t\t\t\tdefBoosts = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlet attack = attacker.calculateStat(attackStat, atkBoosts, 1, source);\r\n\t\t\tlet defense = defender.calculateStat(defenseStat, defBoosts, 1, target);\r\n\r\n\t\t\tattackStat = (category === 'Physical' ? 'atk' : 'spa');\r\n\r\n\t\t\t// Apply Stat Modifiers\r\n\t\t\tattack = this.battle.runEvent('Modify' + statTable[attackStat], source, target, move, attack);\r\n\t\t\tdefense = this.battle.runEvent('Modify' + statTable[defenseStat], target, source, move, defense);\r\n\r\n\t\t\tif (['explosion', 'selfdestruct'].includes(move.id) && defenseStat === 'def') {\r\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t\t}\r\n\r\n\t\t\tconst tr = this.battle.trunc;\r\n\r\n\t\t\t// int(int(int(2 * L / 5 + 2) * A * P / D) / 50);\r\n\t\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50);\r\n\r\n\t\t\t// Calculate damage modifiers separately (order differs between generations)\r\n\t\t\treturn this.modifyDamage(baseDamage, source, target, move, suppressMessages);\r\n\t\t},\r\n\t\t\r\n\t\tmodifyDamage(\r\n\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t\t) {\r\n\t\t\tconst tr = this.battle.trunc;\r\n\t\t\tif (!move.type) move.type = '???';\r\n\t\t\tconst type = move.type;\r\n\r\n\t\t\tbaseDamage += 2;\r\n\r\n\t\t\tif (move.spreadHit) {\r\n\t\t\t\t// multi-target modifier (doubles only)\r\n\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t\t// Parental Bond modifier\r\n\t\t\t\tconst bondModifier = 0.5;\r\n\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t\t}\r\n\r\n\t\t\t// weather modifier\r\n\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\t// crit - not a modifier\r\n\t\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\t\tif (isCrit) {\r\n\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || 1.5));\r\n\t\t\t}\r\n\r\n\t\t\t// random factor - also not a modifier\r\n\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\r\n\t\t\t// STAB\r\n\t\t\tif (move.forceSTAB || (type !== '???' &&\r\n\t\t\t\t(pokemon.hasType(type) || (pokemon.terastallized && pokemon.getTypes(false, true).includes(type))))) {\r\n\t\t\t\t// The \"???\" type never gets STAB\r\n\t\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t\t\t// Struggle in the same turn.\r\n\t\t\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\r\n\t\t\t\tlet stab = move.stab || 1.5;\r\n\t\t\t\tif (type === pokemon.terastallized && pokemon.getTypes(false, true).includes(type)) {\r\n\t\t\t\t\t// In my defense, the game hardcodes the Adaptability check like this, too.\r\n\t\t\t\t\tstab = stab === 2 ? 2.25 : 2;\r\n\t\t\t\t} else if (pokemon.terastallized && type !== pokemon.terastallized) {\r\n\t\t\t\t\tstab = 1.5;\r\n\t\t\t\t}\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t\t}\r\n\r\n\t\t\t// types\r\n\t\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\r\n\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\t\tif (typeMod > 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\r\n\t\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\t\tbaseDamage *= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeMod < 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\r\n\t\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\r\n\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility('guts')) {\r\n\t\t\t\tif (this.battle.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\r\n\r\n\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t\t}\r\n\r\n\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\r\n\r\n\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\t\treturn tr(baseDamage, 16);\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["basePower"]
}
