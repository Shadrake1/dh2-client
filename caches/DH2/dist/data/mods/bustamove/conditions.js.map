{
  "version": 3,
  "sources": ["../../../../data/mods/bustamove/conditions.ts"],
  "sourcesContent": ["export const Conditions: {[k: string]: ConditionData} = {\r\n\tjawlock: {\r\n\t\tname: 'jawlock',\r\n\t\tonStart(target) {\r\n\t\t\tthis.add('-activate', target, 'jawlock');\r\n\t\t},\r\n\t\tonHit(target, source, sourceEffect) {\r\n\t\t\tif (sourceEffect && sourceEffect.effectType === 'Ability') {\r\n\t\t\t\tthis.add('-status', target, 'jawlock');\r\n\t\t\t}\r\n\t\t},\r\n\t\tonResidualOrder: 9,\r\n\t\tonResidual(pokemon) {\r\n\t\t\tconst source = this.effectState.source;\r\n\t\t\tconst gmaxEffect = ['gmaxcentiferno', 'gmaxsandblast'].includes(this.effectState.sourceEffect.id);\r\n\t\t\tif (source && (!source.isActive || source.hp <= 0 || !source.activeTurns) && !gmaxEffect) {\r\n\t\t\t\tdelete pokemon.volatiles['jawlock'];\r\n\t\t\t\tthis.add('-end', pokemon, this.effectState.sourceEffect, '[jawlock]', '[silent]');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.damage(pokemon.baseMaxhp / 8);\r\n\t\t},\r\n\t\tonEnd(pokemon) {\r\n\t\t\tthis.add('-end', pokemon, this.effectState.sourceEffect, '[jawlock]');\r\n\t\t},\r\n\t},\r\n\t/* diving: {\r\n\t\tname: 'diving',\r\n\t\tduration: 2,\r\n\t\tonStart(pokemon) {\r\n\t\t\tthis.add('-diving', pokemon);\r\n\t\t},\r\n\t},\r\n\ttwoturnmove: { // modified for Dive\r\n\t\t// Skull Bash, SolarBeam, Sky Drop...\r\n\t\tname: 'twoturnmove',\r\n\t\tduration: 2,\r\n\t\tonStart(target, source, effect) {\r\n\t\t\tthis.effectState.move = effect.id;\r\n\t\t\ttarget.addVolatile(effect.id, source);\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonEnd(target) {\r\n\t\t\ttarget.removeVolatile(this.effectState.move);\r\n\t\t},\r\n\t\tonLockMove(pokemon) {\r\n\t\t\tif (pokemon.volatile('diving')) return; // onLockMove traps the user\r\n\t\t\treturn this.effectState.move;\r\n\t\t},\r\n\t\tonDisableMove(pokemon) {\r\n\t\t\tif (pokemon.volatile('diving')) return; // equivalent to onLockMove if the user should not be trapped\r\n\t\t\tif (!this.effectState.move || !pokemon.hasMove(this.effectState.move)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\t\tif (moveSlot.id !== this.effectState.move) {\r\n\t\t\t\t\tpokemon.disableMove(moveSlot.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonMoveAborted(pokemon) {\r\n\t\t\tpokemon.removeVolatile('twoturnmove');\r\n\t\t},\r\n\t},\r\n\tcorrosed: {\r\n\t\tname: 'corrosed',\r\n\t\teffectType: 'Status',\r\n\t\tonStart(pokemon, source, sourceEffect) {\r\n\t\t\tif (sourceEffect && sourceEffect.effectType === 'Ability') {\r\n\t\t\t\tthis.add('-status', pokemon, 'corrosed', '[from] ability: ' + sourceEffect.name, '[of] ' + source);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add('-status', pokemon, 'corrosed');\r\n\t\t\t}\r\n\t\t},\r\n\t\tonModifyTypePriority: -5,\r\n\t\tonModifyType(type) {\r\n\t\t\tif (type === 'Steel') onNegateImmunity: false,\r\n\t\t},\r\n\t},*/\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,aAA2C;AAAA,EACvD,SAAS;AAAA,IACR,MAAM;AAAA,IACN,QAAQ,QAAQ;AACf,WAAK,IAAI,aAAa,QAAQ,SAAS;AAAA,IACxC;AAAA,IACA,MAAM,QAAQ,QAAQ,cAAc;AACnC,UAAI,gBAAgB,aAAa,eAAe,WAAW;AAC1D,aAAK,IAAI,WAAW,QAAQ,SAAS;AAAA,MACtC;AAAA,IACD;AAAA,IACA,iBAAiB;AAAA,IACjB,WAAW,SAAS;AACnB,YAAM,SAAS,KAAK,YAAY;AAChC,YAAM,aAAa,CAAC,kBAAkB,eAAe,EAAE,SAAS,KAAK,YAAY,aAAa,EAAE;AAChG,UAAI,WAAW,CAAC,OAAO,YAAY,OAAO,MAAM,KAAK,CAAC,OAAO,gBAAgB,CAAC,YAAY;AACzF,eAAO,QAAQ,UAAU,SAAS;AAClC,aAAK,IAAI,QAAQ,SAAS,KAAK,YAAY,cAAc,aAAa,UAAU;AAChF;AAAA,MACD;AACA,WAAK,OAAO,QAAQ,YAAY,CAAC;AAAA,IAClC;AAAA,IACA,MAAM,SAAS;AACd,WAAK,IAAI,QAAQ,SAAS,KAAK,YAAY,cAAc,WAAW;AAAA,IACrE;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDD;",
  "names": []
}
