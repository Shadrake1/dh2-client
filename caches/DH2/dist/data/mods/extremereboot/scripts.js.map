{
  "version": 3,
  "sources": ["../../../../data/mods/extremereboot/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect, zMove, externalMove, maxMove, originalTarget) { // used for\r\n\t\tpokemon.activeMoveActions++;\r\n\t\tlet target = this.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\tconst changedMove = this.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\ttarget = this.getRandomTarget(pokemon, baseMove);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet move = baseMove;\r\n\r\n\t\tmove.isExternal = externalMove;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\tconst willTryMove = this.runEvent('BeforeMove', pokemon, target, move);\r\n\t\tif (!willTryMove) {\r\n\t\t\tthis.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (move.beforeMoveCallback) {\r\n\t\t\tif (move.beforeMoveCallback.call(this, pokemon, target, move)) {\r\n\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet lockedMove;\r\n\t\tif (!externalMove) {\r\n\t\t\tlockedMove = this.runEvent('LockMove', pokemon);\r\n\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\tif (!lockedMove) {\r\n\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\tthis.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\tconst gameConsole = [\r\n\t\t\t\t\t\tnull, 'Game Boy', 'Game Boy Color', 'Game Boy Advance', 'DS', 'DS', '3DS', '3DS',\r\n\t\t\t\t\t][this.gen] || 'Switch';\r\n\t\t\t\t\tthis.hint(`This is not a bug, this is really how it works on the ${gameConsole}; try it yourself if you don't believe us.`);\r\n\t\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t}\r\n\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t}\r\n\r\n\t\t// Wave Crasher Lock-in move hack\r\n\t\t// TODO: implement properly\r\n\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\tthis.lastSuccessfulMoveThisTurn = moveDidSomething ? this.activeMove && this.activeMove.id : null;\r\n\t\tif (this.activeMove) move = this.activeMove;\r\n\t\tthis.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\tthis.runEvent('AfterMove', pokemon, target, move);\r\n\r\n\t\t// EXTREME REBOOT Code start\r\n\t\tif (move.type === 'Sea' && move.category !== \"Status\" && moveDidSomething && !move.isExternal) {\r\n\t\t\tconst waveCrashers = [];\r\n\t\t\tfor (const currentPoke of this.getAllActive()) {\r\n\t\t\t\tif (pokemon === currentPoke) continue;\r\n\t\t\t\tif (currentPoke.hasAbility('wavecrasher') && !currentPoke.isSemiInvulnerable()) {\r\n\t\t\t\t\twaveCrashers.push(currentPoke);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Wave Crasher activates in order of lowest speed stat to highest\r\n\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\twaveCrashers.sort(\r\n\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t);\r\n\t\t\tfor (const waveCrasher of waveCrashers) {\r\n\t\t\t\tif (this.faintMessages()) break;\r\n\t\t\t\tif (waveCrasher.fainted) continue;\r\n\t\t\t\tthis.add('-activate', waveCrasher, 'ability: Wave Crasher');\r\n\t\t\t\tconst dancersTarget = target.side !== waveCrasher.side && pokemon.side === waveCrasher.side ? target : pokemon;\r\n\t\t\t\tthis.runMove(move.id, waveCrasher, this.getTargetLoc(dancersTarget, waveCrasher), this.dex.abilities.get('wavecrasher'), undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t},\r\n\thitStepAccuracy(targets, pokemon, move) { // for Sun Kiss, Incantation and Cold Stare\r\n\t\tconst hitResults = [];\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tthis.activeTarget = target;\r\n\t\t\t// calculate true accuracy\r\n\t\t\tlet accuracy = move.accuracy;\r\n\t\t\tconst boostTable = [1, 4 / 3, 5 / 3, 2, 7 / 3, 8 / 3, 3];\r\n\t\t\tlet boosts;\r\n\t\t\tlet boost!: number;\r\n\t\t\tif (accuracy !== true) {\r\n\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\tboosts = this.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\tboost = this.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\taccuracy *= boostTable[boost];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\taccuracy /= boostTable[-boost];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\tboosts = this.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\tboost = this.clampIntRange(boosts['evasion'], -6, 6);\r\n\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\taccuracy /= boostTable[boost];\r\n\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\taccuracy *= boostTable[-boost];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\taccuracy = this.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\tif (move.alwaysHit ||\r\n\t\t\t\t(move.id === 'sunkiss' && pokemon.hasType('Summer')) || // Extreme Reboot code\r\n\t\t\t\t(move.id === 'coldstare' && pokemon.hasType('Winter')) ||\r\n\t\t\t\t(move.id === 'incantation' && pokemon.hasType('Folklore')) ||\r\n\t\t\t\t(move.id === 'incantation' && pokemon.hasType('Folklore'))) {\r\n\t\t\t\taccuracy = true; // bypasses ohko accuracy modifiers\r\n\t\t\t} else {\r\n\t\t\t\taccuracy = this.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t}\r\n\t\t\tif (accuracy !== true && !this.randomChance(accuracy, 100)) {\r\n\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!move.spreadHit) this.attrLastMove('[miss]');\r\n\t\t\t\t\tthis.add('-miss', pokemon, target);\r\n\t\t\t\t}\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\thitResults[i] = true;\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t},\r\n\tgetDamage(\r\n\t\tpokemon: Pokemon, target: Pokemon, move: string | number | ActiveMove,\r\n\t\tsuppressMessages = false\r\n\t): number | undefined | null | false { // modified for Swoop and Dive Bomb\r\n\t\tif (typeof move === 'string') move = this.dex.getActiveMove(move);\r\n\r\n\t\tif (typeof move === 'number') {\r\n\t\t\tconst basePower = move;\r\n\t\t\tmove = new Dex.Move({\r\n\t\t\t\tbasePower,\r\n\t\t\t\ttype: '???',\r\n\t\t\t\tcategory: 'Physical',\r\n\t\t\t\twillCrit: false,\r\n\t\t\t}) as ActiveMove;\r\n\t\t\tmove.hit = 0;\r\n\t\t}\r\n\r\n\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\tif (!target.runImmunity(move.type, !suppressMessages)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.ohko) return target.maxhp;\r\n\t\tif (move.damageCallback) return move.damageCallback.call(this, pokemon, target);\r\n\t\tif (move.damage === 'level') {\r\n\t\t\treturn pokemon.level;\r\n\t\t} else if (move.damage) {\r\n\t\t\treturn move.damage;\r\n\t\t}\r\n\r\n\t\tconst category = this.getCategory(move);\r\n\t\tconst defensiveCategory = move.defensiveCategory || category;\r\n\r\n\t\tlet basePower: number | false | null = move.basePower;\r\n\t\tif (move.basePowerCallback) {\r\n\t\t\tbasePower = move.basePowerCallback.call(this, pokemon, target, move);\r\n\t\t}\r\n\t\tif (!basePower) return basePower === 0 ? undefined : basePower;\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\tlet critMult;\r\n\t\tlet critRatio = this.runEvent('ModifyCritRatio', pokemon, target, move, move.critRatio || 0);\r\n\t\tif (this.gen <= 5) {\r\n\t\t\tcritRatio = this.clampIntRange(critRatio, 0, 5);\r\n\t\t\tcritMult = [0, 16, 8, 4, 3, 2];\r\n\t\t} else {\r\n\t\t\tcritRatio = this.clampIntRange(critRatio, 0, 4);\r\n\t\t\tif (this.gen === 6) {\r\n\t\t\t\tcritMult = [0, 16, 8, 2, 1];\r\n\t\t\t} else {\r\n\t\t\t\tcritMult = [0, 24, 8, 2, 1];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst moveHit = target.getMoveHitData(move);\r\n\t\tmoveHit.crit = move.willCrit || false;\r\n\t\tif (move.willCrit === undefined) {\r\n\t\t\tif (critRatio) {\r\n\t\t\t\tmoveHit.crit = this.randomChance(1, critMult[critRatio]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (moveHit.crit) {\r\n\t\t\tmoveHit.crit = this.runEvent('CriticalHit', target, null, move);\r\n\t\t}\r\n\r\n\t\t// happens after crit calculation\r\n\t\tbasePower = this.runEvent('BasePower', pokemon, target, move, basePower, true);\r\n\r\n\t\tif (!basePower) return 0;\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\tconst level = pokemon.level;\r\n\r\n\t\tconst attacker = pokemon;\r\n\t\tconst defender = target;\r\n\t\tlet attackStat: StatNameExceptHP = category === 'Physical' ? 'atk' : 'spa';\r\n\t\tconst defenseStat: StatNameExceptHP = defensiveCategory === 'Physical' ? 'def' : 'spd';\r\n\t\tconst speedStat: StatNameExceptHP = 'spe';\r\n\t\tif (move.useSourceDefAsOffensive) attackStat = 'def';\r\n\t\tif (move.useSourceSpDAsOffensive) attackStat = 'spd';\r\n\t\tif (move.useSourceSpeedAsOffensive) attackStat = speedStat;\r\n\r\n\t\tconst statTable = {atk: 'Atk', def: 'Def', spa: 'SpA', spd: 'SpD', spe: 'Spe'};\r\n\t\tlet attack;\r\n\t\tlet defense;\r\n\r\n\t\tlet atkBoosts = move.useTargetOffensive ? defender.boosts[attackStat] : attacker.boosts[attackStat];\r\n\t\tlet defBoosts = defender.boosts[defenseStat];\r\n\r\n\t\tlet ignoreNegativeOffensive = !!move.ignoreNegativeOffensive;\r\n\t\tlet ignorePositiveDefensive = !!move.ignorePositiveDefensive;\r\n\r\n\t\tif (moveHit.crit) {\r\n\t\t\tignoreNegativeOffensive = true;\r\n\t\t\tignorePositiveDefensive = true;\r\n\t\t}\r\n\t\tconst ignoreOffensive = !!(move.ignoreOffensive || (ignoreNegativeOffensive && atkBoosts < 0));\r\n\t\tconst ignoreDefensive = !!(move.ignoreDefensive || (ignorePositiveDefensive && defBoosts > 0));\r\n\r\n\t\tif (ignoreOffensive) {\r\n\t\t\tthis.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\tatkBoosts = 0;\r\n\t\t}\r\n\t\tif (ignoreDefensive) {\r\n\t\t\tthis.debug('Negating (sp)def boost/penalty.');\r\n\t\t\tdefBoosts = 0;\r\n\t\t}\r\n\r\n\t\tif (move.useTargetOffensive) {\r\n\t\t\tattack = defender.calculateStat(attackStat, atkBoosts);\r\n\t\t} else {\r\n\t\t\tattack = attacker.calculateStat(attackStat, atkBoosts);\r\n\t\t}\r\n\r\n\t\tattackStat = (category === 'Physical' ? 'atk' : 'spa');\r\n\t\tdefense = defender.calculateStat(defenseStat, defBoosts);\r\n\r\n\t\t// Apply Stat Modifiers\r\n\t\tattack = this.runEvent('Modify' + statTable[attackStat], attacker, defender, move, attack);\r\n\t\tdefense = this.runEvent('Modify' + statTable[defenseStat], defender, attacker, move, defense);\r\n\r\n\t\tif (this.gen <= 4 && ['explosion', 'selfdestruct'].includes(move.id) && defenseStat === 'def') {\r\n\t\t\tdefense = this.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t}\r\n\r\n\t\tconst tr = this.trunc;\r\n\r\n\t\t// int(int(int(2 * L / 5 + 2) * A * P / D) / 50);\r\n\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50);\r\n\r\n\t\t// Calculate damage modifiers separately (order differs between generations)\r\n\t\treturn this.modifyDamage(baseDamage, pokemon, target, move, suppressMessages);\r\n\t},\r\n\tpokemon: {\r\n\t\tgetActionSpeed() {\r\n\t\t\tlet speed = this.getStat('spe', false, false);\r\n\t\t\tif (this.battle.field.getPseudoWeather('rulesrewrite')) {\r\n\t\t\t\tspeed = 0x2710 - speed;\r\n\t\t\t}\r\n\t\t\treturn this.battle.trunc(speed, 13);\r\n\t\t},\r\n\t\tignoringAbility() {\r\n\t\t\t// Check if any active pokemon have the ability Neutralizing Gas\r\n\t\t\tlet volatileSuppress = false;\r\n\t\t\tconst suppressingVolatiles = ['mindcleansing', 'moonblade', 'void'];\r\n\t\t\tfor (const volatileStatus of suppressingVolatiles) {\r\n\t\t\t\tif (this.volatiles[volatileStatus]) volatileSuppress = true;\r\n\t\t\t}\r\n\t\t\treturn !!(!this.isActive || (volatileSuppress && !this.getAbility().isPermanent));\r\n\t\t},\r\n\t\tignoringItem() {\r\n\t\t\treturn !!((this.battle.gen >= 5 && !this.isActive) ||\r\n\t\t\t\t(this.hasAbility('klutz') && !this.getItem().ignoreKlutz) ||\r\n\t\t\t\tthis.volatiles['void'] || this.battle.field.pseudoWeather['magicroom']);\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["basePower"]
}
