{
  "version": 3,
  "sources": ["../../../../data/mods/hideandseakingslate5clauses/scripts.ts"],
  "sourcesContent": ["export const Scripts: BattleScriptsData = { \r\n\tgen: 9,\r\n\tside: {\r\n\t\tinherit: true,\r\n\t\tconstructor(name: string, battle: Battle, sideNum: number, team: PokemonSet[]) {\r\n\t\t\tconst sideScripts = battle.dex.data.Scripts.side;\r\n\t\t\tif (sideScripts) Object.assign(this, sideScripts);\r\n\t\r\n\t\t\tthis.battle = battle;\r\n\t\t\tthis.id = ['p1', 'p2', 'p3', 'p4'][sideNum] as SideID;\r\n\t\t\tthis.n = sideNum;\r\n\t\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.avatar = '';\r\n\t\r\n\t\t\tthis.team = team;\r\n\t\t\tthis.pokemon = [];\r\n\t\t\tfor (let i = 0; i < this.team.length && i < 24; i++) {\r\n\t\t\t\t// console.log(\"NEW POKEMON: \" + (this.team[i] ? this.team[i].name : '[unidentified]'));\r\n\t\t\t\tthis.pokemon.push(new Pokemon(this.team[i], this));\r\n\t\t\t\tthis.pokemon[i].position = i;\r\n\t\t\t}\r\n\t\r\n\t\t\tswitch (this.battle.gameType) {\r\n\t\t\tcase 'doubles':\r\n\t\t\t\tthis.active = [null!, null!];\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'triples': case 'rotation':\r\n\t\t\t\tthis.active = [null!, null!, null!];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.active = [null!];\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.pokemonLeft = this.pokemon.length;\r\n\t\t\tthis.faintedLastTurn = null;\r\n\t\t\tthis.faintedThisTurn = null;\r\n\t\t\tthis.totalFainted = 0;\r\n\t\t\tthis.zMoveUsed = false;\r\n\t\t\tthis.dynamaxUsed = this.battle.gen !== 9;\r\n\t\r\n\t\t\tthis.sideConditions = {};\r\n\t\t\tthis.slotConditions = [];\r\n\t\t\t// Array#fill doesn't work for this\r\n\t\t\tfor (let i = 0; i < this.active.length; i++) this.slotConditions[i] = {};\r\n\t\r\n\t\t\tthis.activeRequest = null;\r\n\t\t\tthis.choice = {\r\n\t\t\t\tcantUndo: false,\r\n\t\t\t\terror: ``,\r\n\t\t\t\tactions: [],\r\n\t\t\t\tforcedSwitchesLeft: 0,\r\n\t\t\t\tforcedPassesLeft: 0,\r\n\t\t\t\tswitchIns: new Set(),\r\n\t\t\t\tzMove: false,\r\n\t\t\t\tmega: false,\r\n\t\t\t\tultra: false,\r\n\t\t\t\tterastallize: false,\r\n\t\t\t\tdynamax: false,\r\n\t\t\t};\r\n\t\r\n\t\t\t// old-gens\r\n\t\t\tthis.lastMove = null;\r\n\t\t},\r\n\t\tcanDynamaxNow() {\r\n\t\t\t//if (this.battle.gen !== 8) return false;\r\n\t\t\tif (this.battle.gameType === 'multi' && this.battle.turn % 2 !== [1, 1, 0, 0][this.n]) return false;\r\n\t\t\t// if (this.battle.gameType === 'multitriples' && this.battle.turn % 3 !== [1, 1, 2, 2, 0, 0][this.side.n]) {\r\n\t\t\t//        return false;\r\n\t\t\t// }\r\n\t\t\tif (this.dynamaxUsed) return false;\r\n\t\t\tif (this.battle.ruleTable.has('bigdogclause')) {\r\n\t\t\t\treturn this.active.some(pokemon => pokemon.m.dog);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t},\r\n\tpokemon: {\r\n\tinherit: true,\r\n\t\tgetDynamaxRequest(skipChecks?: boolean) {\r\n\t\t\t// {gigantamax?: string, maxMoves: {[k: string]: string} | null}[]\r\n\t\t\tif (!skipChecks) {\r\n\t\t\t\tif (!this.side.canDynamaxNow()) return;\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.species.isMega || this.species.isPrimal || this.species.forme === \"Ultra\" || this.canMegaEvo\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// Some pokemon species are unable to dynamax\r\n\t\t\t\tif (this.species.cannotDynamax || this.illusion?.species.cannotDynamax) return;\r\n\t\t\t}\r\n\t\t\tconst result: DynamaxOptions = {maxMoves: []};\r\n\t\t\tlet atLeastOne = false;\r\n\t\t\tfor (const moveSlot of this.moveSlots) {\r\n\t\t\t\tconst move = this.battle.dex.moves.get(moveSlot.id);\r\n\t\t\t\tconst maxMove = this.battle.actions.getMaxMove(move, this);\r\n\t\t\t\tif (maxMove) {\r\n\t\t\t\t\tif (this.maxMoveDisabled(move)) {\r\n\t\t\t\t\t\tresult.maxMoves.push({move: maxMove.id, target: maxMove.target, disabled: true});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.maxMoves.push({move: maxMove.id, target: maxMove.target});\r\n\t\t\t\t\t\tatLeastOne = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!atLeastOne) return;\r\n\t\t\tif (this.canGigantamax) result.gigantamax = this.canGigantamax;\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tconstructor(set: string | AnyObject, side: Side) {\r\n\t\t\tthis.side = side;\r\n\t\t\tthis.battle = side.battle;\r\n\r\n\t\t\tthis.m = {};\r\n\r\n\t\t\tconst pokemonScripts = this.battle.format.pokemon || this.battle.dex.data.Scripts.pokemon;\r\n\t\t\tif (pokemonScripts) Object.assign(this, pokemonScripts);\r\n\r\n\t\t\tif (typeof set === 'string') set = {name: set};\r\n\r\n\t\t\tthis.baseSpecies = this.battle.dex.species.get(set.species || set.name);\r\n\t\t\tif (!this.baseSpecies.exists) {\r\n\t\t\t\tthrow new Error(`Unidentified species: ${this.baseSpecies.name}`);\r\n\t\t\t}\r\n\t\t\tthis.set = set as PokemonSet;\r\n\r\n\t\t\tthis.species = this.baseSpecies;\r\n\t\t\tif (set.name === set.species || !set.name) {\r\n\t\t\t\tset.name = this.baseSpecies.baseSpecies;\r\n\t\t\t}\r\n\t\t\tthis.speciesState = {id: this.species.id};\r\n\r\n\t\t\tthis.name = set.name.substr(0, 20);\r\n\t\t\tthis.fullname = this.side.id + ': ' + this.name;\r\n\r\n\t\t\tlet monLevel = this.battle.clampIntRange(set.adjustLevel || set.level || 100, 1, 9999);\r\n\t\t\tif (this.battle.ruleTable.has('levelclause')) {\r\n\t\t\t\tconst tierboosts: {[tier: string]: number} = {\r\n\t\t\t\t\tuu: 5,\r\n\t\t\t\t\trubl: 5,\r\n\t\t\t\t\tru: 10,\r\n\t\t\t\t\tnubl: 10,\r\n\t\t\t\t\tnu: 15,\r\n\t\t\t\t\tpubl: 15,\r\n\t\t\t\t\tpu: 20,\r\n\t\t\t\t\tzubl: 20,\r\n\t\t\t\t\tzu: 25,\r\n\t\t\t\t\tnfe: 30,\r\n\t\t\t\t\tlc: 30,\r\n\t\t\t\t};\r\n\t\t\t\t const tier = this.species.tier;\r\n\t\t\t\t\tif (tierboosts[tier]) {\r\n\t\t\t\t\t\t  monLevel += tierboosts[tier];            \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tset.level = level;\r\n\t\t\tthis.level = set.level;\r\n\t\t\tconst genders: {[key: string]: GenderName} = {M: 'M', F: 'F', N: 'N'};\r\n\t\t\tthis.gender = genders[set.gender] || this.species.gender || (this.battle.random() * 2 < 1 ? 'M' : 'F');\r\n\t\t\tif (this.gender === 'N') this.gender = '';\r\n\t\t\tthis.happiness = typeof set.happiness === 'number' ? this.battle.clampIntRange(set.happiness, 0, 255) : 255;\r\n\t\t\tthis.pokeball = this.set.pokeball || 'pokeball';\r\n\t\t\tthis.dynamaxLevel = typeof set.dynamaxLevel === 'number' ? this.battle.clampIntRange(set.dynamaxLevel, 0, 10) : 10;\r\n\t\t\tthis.gigantamax = this.set.gigantamax || false;\r\n\r\n\t\t\tthis.baseMoveSlots = [];\r\n\t\t\tthis.moveSlots = [];\r\n\t\t\tif (!this.set.moves?.length) {\r\n\t\t\t\tthrow new Error(`Set ${this.name} has no moves`);\r\n\t\t\t}\r\n\t\t\tfor (const moveid of this.set.moves) {\r\n\t\t\t\tlet move = this.battle.dex.moves.get(moveid);\r\n\t\t\t\tif (!move.id) continue;\r\n\t\t\t\tif (move.id === 'hiddenpower' && move.type !== 'Normal') {\r\n\t\t\t\t\tset.hpType ||= move.type;\r\n\t\t\t\t\tmove = this.battle.dex.moves.get('hiddenpower');\r\n\t\t\t\t}\r\n\t\t\t\tlet basepp = (move.noPPBoosts || move.isZ) ? move.pp : move.pp * 8 / 5;\r\n\t\t\t\t//if (this.battle.gen < 3) basepp = Math.min(61, basepp);\r\n\t\t\t\tthis.baseMoveSlots.push({\r\n\t\t\t\t\tmove: move.name,\r\n\t\t\t\t\tid: move.id,\r\n\t\t\t\t\tpp: basepp,\r\n\t\t\t\t\tmaxpp: basepp,\r\n\t\t\t\t\ttarget: move.target,\r\n\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\tdisabledSource: '',\r\n\t\t\t\t\tused: false,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.position = 0;\r\n\t\t\tlet displayedSpeciesName = this.species.name;\r\n\t\t\tif (displayedSpeciesName === 'Greninja-Bond') displayedSpeciesName = 'Greninja';\r\n\t\t\tthis.details = displayedSpeciesName + (this.level === 100 ? '' : ', L' + this.level) +\r\n\t\t\t\t(this.gender && (', ' + this.gender)) + (this.set.shiny ? ', shiny' : '');\r\n\r\n\t\t\tthis.status = '';\r\n\t\t\tthis.statusState = {};\r\n\t\t\tthis.volatiles = {};\r\n\t\t\tthis.showCure = undefined;\r\n\r\n\t\t\tthis.set.evs ||= {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\r\n\t\t\tthis.set.ivs ||= {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\r\n\t\t\tconst stats: StatsTable = {hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31};\r\n\t\t\tlet stat: StatID;\r\n\t\t\tfor (stat in stats) {\r\n\t\t\t\tthis.set.evs[stat] ||= 0;\r\n\t\t\t\tif (!this.set.ivs[stat] && this.set.ivs[stat] !== 0) this.set.ivs[stat] = 31;\r\n\t\t\t}\r\n\t\t\tfor (stat in this.set.evs) {\r\n\t\t\t\tthis.set.evs[stat] = this.battle.clampIntRange(this.set.evs[stat], 0, 255);\r\n\t\t\t}\r\n\t\t\tfor (stat in this.set.ivs) {\r\n\t\t\t\tthis.set.ivs[stat] = this.battle.clampIntRange(this.set.ivs[stat], 0, 31);\r\n\t\t\t}\r\n\t\t\t/*if (this.battle.gen && this.battle.gen <= 2) {\r\n\t\t\t\t// We represent DVs using even IVs. Ensure they are in fact even.\r\n\t\t\t\tfor (stat in this.set.ivs) {\r\n\t\t\t\t\tthis.set.ivs[stat] &= 30;\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t\tconst hpData = this.battle.dex.getHiddenPower(this.set.ivs);\r\n\t\t\tthis.hpType = set.hpType || hpData.type;\r\n\t\t\tthis.hpPower = hpData.power;\r\n\r\n\t\t\tthis.baseHpType = this.hpType;\r\n\t\t\tthis.baseHpPower = this.hpPower;\r\n\r\n\t\t\t// initialized in this.setSpecies(this.baseSpecies)\r\n\t\t\tthis.baseStoredStats = null!;\r\n\t\t\tthis.storedStats = {atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\r\n\t\t\tthis.boosts = {atk: 0, def: 0, spa: 0, spd: 0, spe: 0, accuracy: 0, evasion: 0};\r\n\r\n\t\t\tthis.baseAbility = toID(set.ability);\r\n\t\t\tthis.ability = this.baseAbility;\r\n\t\t\tthis.abilityState = {id: this.ability};\r\n\r\n\t\t\tthis.item = toID(set.item);\r\n\t\t\tthis.itemState = {id: this.item};\r\n\t\t\tthis.lastItem = '';\r\n\t\t\tthis.usedItemThisTurn = false;\r\n\t\t\tthis.ateBerry = false;\r\n\r\n\t\t\tthis.trapped = false;\r\n\t\t\tthis.maybeTrapped = false;\r\n\t\t\tthis.maybeDisabled = false;\r\n\r\n\t\t\tthis.illusion = null;\r\n\t\t\tthis.transformed = false;\r\n\r\n\t\t\tthis.fainted = false;\r\n\t\t\tthis.faintQueued = false;\r\n\t\t\tthis.subFainted = null;\r\n\r\n\t\t\tthis.types = this.baseSpecies.types;\r\n\t\t\tthis.baseTypes = this.types;\r\n\t\t\tthis.addedType = '';\r\n\t\t\tthis.knownType = true;\r\n\t\t\tthis.apparentType = this.baseSpecies.types.join('/');\r\n\t\t\t// Every Pokemon has a Terastal type\r\n\t\t\tthis.teraType = this.set.teraType || this.types[0];\r\n\r\n\t\t\tthis.switchFlag = false;\r\n\t\t\tthis.forceSwitchFlag = false;\r\n\t\t\tthis.skipBeforeSwitchOutEventFlag = false;\r\n\t\t\tthis.draggedIn = null;\r\n\t\t\tthis.newlySwitched = false;\r\n\t\t\tthis.beingCalledBack = false;\r\n\r\n\t\t\tthis.lastMove = null;\r\n\t\t\t// This is used in gen 2 only, here to avoid code repetition.\r\n\t\t\t// Only declared if gen 2 to avoid declaring an object we aren't going to need.\r\n\t\t\t//if (this.battle.gen === 2) this.lastMoveEncore = null;\r\n\t\t\tthis.lastMoveUsed = null;\r\n\t\t\tthis.moveThisTurn = '';\r\n\t\t\tthis.statsRaisedThisTurn = false;\r\n\t\t\tthis.statsLoweredThisTurn = false;\r\n\t\t\tthis.hurtThisTurn = null;\r\n\t\t\tthis.lastDamage = 0;\r\n\t\t\tthis.attackedBy = [];\r\n\t\t\tthis.timesAttacked = 0;\r\n\r\n\t\t\tthis.isActive = false;\r\n\t\t\tthis.activeTurns = 0;\r\n\t\t\tthis.activeMoveActions = 0;\r\n\t\t\tthis.previouslySwitchedIn = 0;\r\n\t\t\tthis.truantTurn = false;\r\n\t\t\tthis.swordBoost = false;\r\n\t\t\tthis.shieldBoost = false;\r\n\t\t\tthis.syrupTriggered = false;\r\n\t\t\tthis.stellarBoostedTypes = [];\r\n\t\t\tthis.isStarted = false;\r\n\t\t\tthis.duringMove = false;\r\n\r\n\t\t\tthis.weighthg = 1;\r\n\t\t\tthis.speed = 0;\r\n\t\t\t/**\r\n\t\t\t * Determines the order in which redirect abilities like Lightning Rod\r\n\t\t\t * activate if speed tied. Surprisingly not random like every other speed\r\n\t\t\t * tie, but based on who first switched in or acquired the ability!\r\n\t\t\t */\r\n\t\t\tthis.abilityOrder = 0;\r\n\r\n\t\t\tthis.canMegaEvo = this.battle.actions.canMegaEvo(this);\r\n\t\t\tthis.canMegaEvoX = this.battle.actions.canMegaEvoX?.(this);\r\n\t\t\tthis.canMegaEvoY = this.battle.actions.canMegaEvoY?.(this);\r\n\t\t\tthis.canUltraBurst = this.battle.actions.canUltraBurst(this);\r\n\t\t\tthis.canGigantamax = this.baseSpecies.canGigantamax || null;\r\n\t\t\tthis.canTerastallize = this.battle.actions.canTerastallize(this);\r\n\r\n\t\t\t// This is used in gen 1 only, here to avoid code repetition.\r\n\t\t\t// Only declared if gen 1 to avoid declaring an object we aren't going to need.\r\n\t\t\t//if (this.battle.gen === 1) this.modifiedStats = {atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\r\n\r\n\t\t\tthis.maxhp = 0;\r\n\t\t\tthis.baseMaxhp = 0;\r\n\t\t\tthis.hp = 0;\r\n\t\t\tthis.clearVolatile();\r\n\t\t\tthis.hp = this.maxhp;\r\n\t\t},\t\t\r\n\t},\r\n\tactions: {\r\n\t\tinherit: true,\r\n\t\thitStepAccuracy(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t\tconst hitResults = [];\r\n\t\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\t\tthis.battle.activeTarget = target;\r\n\t\t\t\t// calculate true accuracy\r\n\t\t\t\tlet accuracy = move.accuracy;\r\n\t\t\t\tif (move.ohko) { // bypasses accuracy modifiers\r\n\t\t\t\t\tif (!target.isSemiInvulnerable()) {\r\n\t\t\t\t\t\taccuracy = 30;\r\n\t\t\t\t\t\tif (move.ohko === 'Ice' && this.battle.gen >= 7 && !pokemon.hasType('Ice')) {\r\n\t\t\t\t\t\t\taccuracy = 20;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!target.volatiles['dynamax'] && pokemon.level >= target.level &&\r\n\t\t\t\t\t\t\t(move.ohko === true || !target.hasType(move.ohko))) {\r\n\t\t\t\t\t\t\taccuracy += (pokemon.level - target.level);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\r\n\t\t\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\t\tlet boost = 0;\r\n\t\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boost - boosts['evasion'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * (3 + boost) / 3);\r\n\t\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * 3 / (3 - boost));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (move.alwaysHit || (move.id === 'toxic' && this.battle.gen >= 8 && pokemon.hasType('Poison')) ||\r\n\t\t\t\t\t\t(move.target === 'self' && move.category === 'Status' && !target.isSemiInvulnerable())) {\r\n\t\t\t\t\taccuracy = true; // bypasses ohko accuracy modifiers\r\n\t\t\t\t} else {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t}\r\n\t\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy, 100)) {\r\n\t\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!move.spreadHit) this.battle.attrLastMove('[miss]');\r\n\t\t\t\t\t\tthis.battle.add('-miss', pokemon, target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ohko && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t}\r\n\t\t\treturn hitResults;\r\n\t\t},\r\n\t\tgetConfusionDamage(pokemon: Pokemon, basePower: number) {\r\n\t\t\tconst tr = this.battle.trunc;\r\n\r\n\t\t\tconst attack = pokemon.calculateStat('atk', pokemon.boosts['atk']);\r\n\t\t\tconst defense = pokemon.calculateStat('def', pokemon.boosts['def']);\r\n\t\t\tconst level = pokemon.level;\r\n\t\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50) + 2;\r\n\r\n\t\t\t// Damage is 16-bit context in self-hit confusion damage\r\n\t\t\tlet damage = tr(baseDamage, 16);\r\n\t\t\tdamage = this.battle.randomizer(damage);\r\n\t\t\treturn Math.max(1, damage);\r\n\t\t},\r\n\t\t getDamage(\r\n\t\t\tsource: Pokemon, target: Pokemon, move: string | number | ActiveMove,\r\n\t\t\tsuppressMessages = false\r\n\t\t): number | undefined | null | false {\r\n\t\t\tif (typeof move === 'string') move = this.dex.getActiveMove(move);\r\n\r\n\t\t\tif (typeof move === 'number') {\r\n\t\t\t\tconst basePower = move;\r\n\t\t\t\tmove = new Dex.Move({\r\n\t\t\t\t\tbasePower,\r\n\t\t\t\t\ttype: '???',\r\n\t\t\t\t\tcategory: 'Physical',\r\n\t\t\t\t\twillCrit: false,\r\n\t\t\t\t}) as ActiveMove;\r\n\t\t\t\tmove.hit = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\t\tif (!target.runImmunity(move.type, !suppressMessages)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (move.ohko) return target.maxhp;\r\n\t\t\tif (move.damageCallback) return move.damageCallback.call(this.battle, source, target);\r\n\t\t\tif (move.damage === 'level') {\r\n\t\t\t\treturn source.level;\r\n\t\t\t} else if (move.damage) {\r\n\t\t\t\treturn move.damage;\r\n\t\t\t}\r\n\r\n\t\t\tconst category = this.battle.getCategory(move);\r\n\r\n\t\t\tlet basePower: number | false | null = move.basePower;\r\n\t\t\tif (move.basePowerCallback) {\r\n\t\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\r\n\t\t\t}\r\n\t\t\tif (!basePower) return basePower === 0 ? undefined : basePower;\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\r\n\t\t\tlet critMult;\r\n\t\t\tlet critRatio = this.battle.runEvent('ModifyCritRatio', source, target, move, move.critRatio || 0);\r\n\t\t\tif (this.battle.gen <= 5) {\r\n\t\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 5);\r\n\t\t\t\tcritMult = [0, 16, 8, 4, 3, 2];\r\n\t\t\t} else {\r\n\t\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 4);\r\n\t\t\t\tif (this.battle.gen === 6) {\r\n\t\t\t\t\tcritMult = [0, 16, 8, 2, 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcritMult = [0, 24, 8, 2, 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst moveHit = target.getMoveHitData(move);\r\n\t\t\tmoveHit.crit = move.willCrit || false;\r\n\t\t\tif (move.willCrit === undefined) {\r\n\t\t\t\tif (critRatio) {\r\n\t\t\t\t\tmoveHit.crit = this.battle.randomChance(1, critMult[critRatio]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (moveHit.crit) {\r\n\t\t\t\tmoveHit.crit = this.battle.runEvent('CriticalHit', target, null, move);\r\n\t\t\t}\r\n\r\n\t\t\t// happens after crit calculation\r\n\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\r\n\r\n\t\t\tif (!basePower) return 0;\r\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\r\n\t\t\t// Hacked Max Moves have 0 base power, even if you Dynamax\r\n\t\t\tif ((!source.volatiles['dynamax'] && move.isMax) || (move.isMax && this.dex.moves.get(move.baseMove).isMax)) {\r\n\t\t\t\tbasePower = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tbasePower < 60 && source.getTypes(true).includes(move.type) && source.terastallized && move.priority <= 0 &&\r\n\t\t\t\t// Hard move.basePower check for moves like Dragon Energy that have variable BP\r\n\t\t\t\t!move.multihit && !((move.basePower === 0 || move.basePower === 150) && move.basePowerCallback)\r\n\t\t\t) {\r\n\t\t\t\tbasePower = 60;\r\n\t\t\t}\r\n\r\n\t\t\tconst level = source.level;\r\n\r\n\t\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\r\n\t\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\r\n\r\n\t\t\tconst isPhysical = move.category === 'Physical';\r\n\t\t\tlet attackStat: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\r\n\t\t\tconst defenseStat: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\r\n\r\n\t\t\tconst statTable = {atk: 'Atk', def: 'Def', spa: 'SpA', spd: 'SpD', spe: 'Spe'};\r\n\r\n\t\t\tlet atkBoosts = attacker.boosts[attackStat];\r\n\t\t\tlet defBoosts = defender.boosts[defenseStat];\r\n\r\n\t\t\tlet ignoreNegativeOffensive = !!move.ignoreNegativeOffensive;\r\n\t\t\tlet ignorePositiveDefensive = !!move.ignorePositiveDefensive;\r\n\r\n\t\t\tif (moveHit.crit) {\r\n\t\t\t\tignoreNegativeOffensive = true;\r\n\t\t\t\tignorePositiveDefensive = true;\r\n\t\t\t}\r\n\t\t\tconst ignoreOffensive = !!(move.ignoreOffensive || (ignoreNegativeOffensive && atkBoosts < 0));\r\n\t\t\tconst ignoreDefensive = !!(move.ignoreDefensive || (ignorePositiveDefensive && defBoosts > 0));\r\n\r\n\t\t\tif (ignoreOffensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\t\tatkBoosts = 0;\r\n\t\t\t}\r\n\t\t\tif (ignoreDefensive) {\r\n\t\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\r\n\t\t\t\tdefBoosts = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlet attack = attacker.calculateStat(attackStat, atkBoosts, 1, source);\r\n\t\t\tlet defense = defender.calculateStat(defenseStat, defBoosts, 1, target);\r\n\r\n\t\t\tattackStat = (category === 'Physical' ? 'atk' : 'spa');\r\n\r\n\t\t\t// Apply Stat Modifiers\r\n\t\t\tattack = this.battle.runEvent('Modify' + statTable[attackStat], source, target, move, attack);\r\n\t\t\tdefense = this.battle.runEvent('Modify' + statTable[defenseStat], target, source, move, defense);\r\n\r\n\t\t\tif (this.battle.gen <= 4 && ['explosion', 'selfdestruct'].includes(move.id) && defenseStat === 'def') {\r\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t\t}\r\n\r\n\t\t\tconst tr = this.battle.trunc;\r\n\r\n\t\t\t// int(int(int(2 * L / 5 + 2) * A * P / D) / 50);\r\n\t\t\tconst baseDamage = tr(tr(tr(tr(2 * level / 5 + 2) * basePower * attack) / defense) / 50);\r\n\r\n\t\t\t// Calculate damage modifiers separately (order differs between generations)\r\n\t\t\treturn this.modifyDamage(baseDamage, source, target, move, suppressMessages);\r\n\t\t},\r\n\t\tterastallize(pokemon: Pokemon) {\r\n\t\t\tpokemon.addVolatile('dynamax');\r\n\t\t\tthis.battle.add('-message', `big dog Clause activated!`);\r\n\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\tally.canTerastallize = null;\r\n\t\t\t}\r\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["level", "basePower"]
}
