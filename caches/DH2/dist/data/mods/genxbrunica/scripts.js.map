{
  "version": 3,
  "sources": ["../../../../data/mods/genxbrunica/scripts.ts"],
  "sourcesContent": ["export const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n\t\t// for micrometas to only show custom tiers\r\n\t\texcludeStandardTiers: true,\r\n\t\t// only to specify the order of custom tiers\r\n\t\tcustomTiers: ['Brunica Uber', 'Brunica OU', 'Brunica NFE', 'Brunica LC'],\r\n\t},\t\r\n\tinit() {\r\n\t\t//Free dexited movesets\r\n\t\tconst undexitedMons = [];\r\n\t\tfor (const pokemon in this.data.FormatsData) {\r\n\t\t\t//We will skip mons absent from Brunica and custom formes that lack tiers\r\n\t\t\tconst tierData = this.modData(\"FormatsData\",pokemon);\r\n\t\t\tif (!tierData || !tierData.tier || !tierData.tier.startsWith('Brunica')) {\r\n\t\t\t\t//console.log(pokemon + \" is not in the Brunician Regional Pokedex. I think this is everything.\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst mon = this.modData(\"Pokedex\",pokemon);\r\n\t\t\tif (!mon) {\r\n\t\t\t\t//console.log(pokemon + \"'s entry could not be found. Skipping...\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t//Folovo is at 1101 for the time being\r\n\t\t\tif (mon.num > 1100) {\r\n\t\t\t\t//console.log(pokemon + \" is a custom Pokemon. Skipping...\");\r\n\t\t\t\t//Mysterelk is at 1328 so any custom mons before that must be from Brazdo or Loria\r\n\t\t\t\tif (mon.num < 1328) mon.gen = 8;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//We will also skip mons present in SV\r\n\t\t\tconst learnsetData = this.modData(\"Learnsets\", pokemon);\r\n\t\t\tif (!learnsetData || !learnsetData.learnset) {\r\n\t\t\t\t//console.log(pokemon + \" has an invalid moveset. Skipping...\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst learnset = learnsetData.learnset;\r\n\t\t\t//This will exclude inherited movesets and the mons that were in SV, as none of the mons specified to lack Tera Blast are in Desvega\r\n\t\t\tif (learnset.terablast /* || ['magikarp','ditto','smeargle','cosmog','cosmoem','terapagos'].includes(pokemon)*/) {\r\n\t\t\t\t//console.log(pokemon + \" was present in Scarlet and Violet. Skipping...\");\r\n\t\t\t\t\r\n\t\t\t\t//Also freeing these moves for realmons\r\n\t\t\t\tlearnset.hiddenpower = [\"9M\"];\r\n\t\t\t\tlearnset.snore = [\"9M\"];\r\n\t\t\t\tlearnset.naturalgift = [\"9M\"];\r\n\t\t\t\tlearnset.frustration = [\"9M\"];\r\n\t\t\t\tlearnset['return'] = [\"9M\"];\r\n\t\t\t\tlearnset.takedown = [\"9M\"];\r\n\t\t\t\tlearnset.doubleteam = [\"9M\"];\r\n\t\t\t\t//Now let's free the ones that were TMs/Tutors in past gens and Brunica but not SV\r\n\t\t\t\tlearnset.honeclaws &&= [\"9M\"];\r\n\t\t\t\tlearnset.safeguard &&= [\"9M\"];\r\n\t\t\t\tlearnset.attract &&= [\"9M\"];\r\n\t\t\t\tlearnset.roost &&= [\"9M\"];\r\n\t\t\t\tlearnset.steelwing &&= [\"9M\"];\r\n\t\t\t\tlearnset.explosion &&= [\"9M\"];\r\n\t\t\t\tlearnset.retaliate &&= [\"9M\"];\r\n\t\t\t\tlearnset.bounce &&= [\"9T\"];\r\n\t\t\t\tlearnset.irontail &&= [\"9T\"];\r\n\t\t\t\tlearnset.signalbeam &&= [\"9T\"];\r\n\t\t\t\tlearnset.steelroller &&= [\"9T\"];\r\n\t\t\t\tlearnset.superpower &&= [\"9T\"];\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (mon.forme) {\r\n\t\t\t\tif (['Brazdo','Loria'].includes(mon.forme)) {\r\n\t\t\t\t\tmon.gen = 8;\r\n\t\t\t\t\t//console.log(pokemon + \" is a custom regional variant from an earlier Gen X generation. Skipping...\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (mon.forme.startsWith('Desvega') || mon.forme === 'Brunica') {\r\n\t\t\t\t\tmon.gen = 9;\r\n\t\t\t\t\t//console.log(pokemon + \" is a Desvegan regional variant. Skipping...\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (pokemon.startsWith('rotom')) {\r\n\t\t\t\t\t//console.log(pokemon + \" inherits Rotom's moveset. Skipping...\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tundexitedMons.push(pokemon);\r\n\t\t\t//console.log(pokemon + \" was in Desvega but not Paldea.\");\r\n\t\t\t\r\n\t\t\t//Toxic distribution is reduced among non-Poisons (the ones that returned for Desvega but not SV that kept it will have it returned)\r\n\t\t\tif (!mon.types.includes('Poison') && learnset.toxic) delete learnset.toxic;\r\n\t\t\t//We replace Hail with Snowscape\r\n\t\t\tif (learnset.hail) {\r\n\t\t\t\tdelete learnset.hail;\r\n\t\t\t\tlearnset.snowscape = [];\r\n\t\t\t}\r\n\t\t\t//Now we free all the moves\r\n\t\t\tfor (const move in learnset) {\r\n\t\t\t\tlearnset[move].push(\"9L1\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Relicanth\r\n\t\tthis.modData(\"Learnsets\", \"relicanth\").learnset.terracharge = [\"9L35\"];\r\n\t\t\r\n\t\t//Shuppet line\r\n\t\tthis.modData(\"Learnsets\", \"shuppet\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"banette\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"banette\").learnset.drainpunch = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//Lorian move additions\r\n\t\tthis.modData(\"Learnsets\", \"spearow\").learnset.payday = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"fearow\").learnset.payday = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//zubat line\r\n\t\tthis.modData(\"Learnsets\", \"zubat\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golbat\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t/*//oddish line\r\n\t\tthis.modData(\"Learnsets\", \"oddish\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"oddish\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"gloom\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"gloom\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"vileplume\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"vileplume\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"bellossom\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"bellossom\").learnset.toxicshock = [\"9L1\"];\r\n\t\t\r\n\t\t//machop line\r\n\t\tthis.modData(\"Learnsets\", \"machop\").learnset.taunt = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"machoke\").learnset.taunt = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"machamp\").learnset.taunt = [\"9L1\"];\r\n\t\t\r\n\t\t//geodude line\r\n\t\tthis.modData(\"Learnsets\", \"geodude\").learnset.taunt = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"graveler\").learnset.taunt = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golem\").learnset.taunt = [\"9L1\"];\r\n\t\t\r\n\t\t//mandibuzz\r\n\t\tthis.modData(\"Learnsets\", \"mandibuzz\").learnset.airdive = [\"9L1\"];\r\n\t\t\r\n\t\t//trubbish line\r\n\t\tthis.modData(\"Learnsets\", \"trubbish\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"trubbish\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"garbodor\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"garbodor\").learnset.toxicshock = [\"9L1\"];\r\n\t\t\r\n\t\t//plusle and minun\r\n\t\tthis.modData(\"Learnsets\", \"plusle\").learnset.pluspulse = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"plusle\").learnset.sparkingleap = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"plusle\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"minun\").learnset.minusion = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"minun\").learnset.sparkingleap = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"minun\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\t*/\r\n\t\t//bidoof line\r\n\t\tdelete this.modData(\"Learnsets\", \"bidoof\").learnset.sunnyday;\r\n\t\tdelete this.modData(\"Learnsets\", \"bibarel\").learnset.sunnyday;\r\n\t\tthis.modData(\"Learnsets\", \"bibarel\").learnset.wavecrash = [\"9L70\"];\r\n\t\tthis.modData(\"Learnsets\", \"bibarel\").learnset.shocktail = [\"9M\"];\r\n\t\t/*\r\n\t\t//stunfisk\r\n\t\tthis.modData(\"Learnsets\", \"stunfisk\").learnset.sparkingleap = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//pachirisu\r\n\t\tthis.modData(\"Learnsets\", \"pachirisu\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//braviary\r\n\t\tthis.modData(\"Learnsets\", \"braviary\").learnset.airdive = [\"9L1\"];\r\n\t\t\r\n\t\t//hawlucha\r\n\t\tthis.modData(\"Learnsets\", \"hawlucha\").learnset.airdive = [\"9L1\"];\r\n\t\t\r\n\t\t//gligar line\r\n\t\tthis.modData(\"Learnsets\", \"gligar\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"gliscor\").learnset.poisonterrain = [\"9L1\"];\r\n\t\t\r\n\t\t//wooper lines\r\n\t\tthis.modData(\"Learnsets\", \"wooper\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"quagsire\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"wooperpaldea\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"wooperpaldea\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"clodsire\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"clodsire\").learnset.toxicshock = [\"9L1\"];\r\n\t\t\r\n\t\t//deino line\r\n\t\tthis.modData(\"Learnsets\", \"deino\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"zweilous\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hydreigon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hydreigon\").learnset.roost = [\"9L1\"];\r\n\t\t\r\n\t\t//swinub line\r\n\t\tthis.modData(\"Learnsets\", \"swinub\").learnset.terracharge = [\"9L1\", \"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"piloswine\").learnset.tripleaxel = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"piloswine\").learnset.terracharge = [\"9L1\", \"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"mamoswine\").learnset.tripleaxel = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"mamoswine\").learnset.terracharge = [\"9L1\", \"8L1\"];\r\n\t\t\r\n\t\t//tandemaus line\r\n\t\tthis.modData(\"Learnsets\", \"tandemaus\").learnset.nuzzle = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"tandemaus\").learnset.tripleaxel = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"maushold\").learnset.knockoff = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"maushold\").learnset.nuzzle = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"maushold\").learnset.tripleaxel = [\"9L1\"];\r\n\t\t\r\n\t\t//poipole line\r\n\t\tthis.modData(\"Learnsets\", \"poipole\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"naganadel\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"naganadel\").learnset.toxicshock = [\"9L1\"];\r\n\t\t\r\n\t\t//rotom\r\n\t\tthis.modData(\"Learnsets\", \"rotom\").learnset.sparkingleap = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"rotom\").learnset.dazzlinggleam = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"rotom\").learnset.playrough = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"rotom\").learnset.wildcharge = [\"9L1\"];\r\n\t\t\r\n\t\t//froakie line\r\n\t\tthis.modData(\"Learnsets\", \"frogadier\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"greninja\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"greninjabond\").learnset.toxicshock = [\"9L1\"];\r\n\t\t\r\n\t\t//mareanie line\r\n\t\tthis.modData(\"Learnsets\", \"mareanie\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"toxapex\").learnset.toxicshock = [\"9L1\"];\r\n\r\n\t\t//sinnoh hippopotas line\r\n\t\tthis.modData(\"Learnsets\", \"hippopotas\").learnset.terracharge = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hippowdon\").learnset.terracharge = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//kalosian litleo line\r\n\t\tthis.modData(\"Learnsets\", \"litleo\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"litleo\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"pyroar\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"pyroar\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//fennekin line\r\n\t\tthis.modData(\"Learnsets\", \"fennekin\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"fennekin\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"braixen\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"braixen\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"braixen\").learnset.shocktail = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"delphox\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"delphox\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"delphox\").learnset.shocktail = [\"9L1\"];\r\n\t\t*/\r\n\t\t//rockruff line\r\n\t\tthis.modData(\"Learnsets\", \"rockruff\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"rockruffdusk\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanroc\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocmidnight\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocmidnight\").learnset.crippleclobber = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocdusk\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\t/*\r\n\t\t//cripple clobber\r\n\t\tthis.modData(\"Learnsets\", \"rampardos\").learnset.crippleclobber = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"gigalith\").learnset.crippleclobber = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"stonjourner\").learnset.crippleclobber = [\"9L1\",\"8L1\"];\r\n\t\t*/this.modData(\"Learnsets\", \"onix\").learnset.crippleclobber = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"steelix\").learnset.crippleclobber = [\"9L1\",\"8L1\"];/*\r\n\r\n\t\t//magby line\r\n\t\tthis.modData(\"Learnsets\", \"magby\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"magmar\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"magmortar\").learnset.quickshot = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//elekid line\r\n\t\tthis.modData(\"Learnsets\", \"elekid\").learnset.thunderstrike = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"elekid\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"electabuzz\").learnset.thunderstrike = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"electabuzz\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"electivire\").learnset.thunderstrike = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"electivire\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\r\n\t\t//trapinch line\r\n\t\tthis.modData(\"Learnsets\", \"vibrava\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"flygon\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//pichu line\r\n\t\t*/\r\n\t\tthis.modData(\"Learnsets\", \"pichu\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"pikachu\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"raichu\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"raichualola\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\t/*\r\n\t\t//eeveelutions\r\n\t\tthis.modData(\"Learnsets\", \"eevee\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"vaporeon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"jolteon\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"jolteon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"flareon\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"flareon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"flareon\").learnset.bulkup = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"espeon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"umbreon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"leafeon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"leafeon\").learnset.bushclaws = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"leafeon\").learnset.fireworkleaf = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"glaceon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"glaceon\").learnset.surf = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"glaceon\").learnset.hydropump = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"sylveon\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\r\n\t\t//ekans line\r\n\t\tthis.modData(\"Learnsets\", \"ekans\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"ekans\").learnset.poisonterrain = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"arbok\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"arbok\").learnset.poisonterrain = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"arbok\").learnset.uturn = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"arbok\").learnset.dragonrush = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//sableye\r\n\t\tthis.modData(\"Learnsets\", \"sableye\").learnset.drainfang = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//dratini line\r\n\t\tthis.modData(\"Learnsets\", \"dragonair\").learnset.defog = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"dragonite\").learnset.defog = [\"9L1\"];\r\n\t\t\r\n\t\t//hoennian bagon line\r\n\t\tthis.modData(\"Learnsets\", \"bagon\").learnset.uturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"shelgon\").learnset.uturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"salamence\").learnset.uturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"salamence\").learnset.defog = [\"9L1\"];\r\n\t\t\r\n\t\t//rolycoly line\r\n\t\tthis.modData(\"Learnsets\", \"rolycoly\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"carkol\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"carkol\").learnset.knockoff = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"coalossal\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"coalossal\").learnset.knockoff = [\"9L1\"];\r\n\t\t\r\n\t\t//misc drift distribution (wouldn't you know it they're all in desvega)\r\n\t\tthis.modData(\"Learnsets\", \"flareon\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"tepig\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"pignite\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"emboar\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"turtonator\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"capsakid\").learnset.drift = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"scovillain\").learnset.drift = [\"9L1\"];\r\n\r\n\t\t//unovan starters (obtained from mega distribution back in loria, ampharos still kept dragon pulse since gen 6 after all)\r\n\t\tthis.modData(\"Learnsets\", \"serperior\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"serperior\").learnset.dragonhammer = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"serperior\").learnset.drillrun = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"emboar\").learnset.shocktail = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"emboar\").learnset.calmmind = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"emboar\").learnset.earthpower = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"samurott\").learnset.shadowball = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"samurott\").learnset.hypervoice = [\"9L1\",\"8L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"samurott\").learnset.focusblast = [\"9L1\",\"8L1\"];\r\n\t\t\r\n\t\t//Distributions at https://www.smogon.com/forums/threads/generation-x-the-third-chapter-desvega-concluded-coders-wanted.3722319/page-8\r\n\t\t//(Toxic excluded for mons present in SV because that post was made before the Teal Mask, which made Toxic a TM again and with limited distribution too)\r\n\t\t//(Custom mons and mons dexited from Desvega are excluded, hence why Heal Order and Chilly Reception were skipped)\r\n\t\t\r\n\t\tthis.modData(\"Learnsets\", \"applin\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"flapple\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"appletun\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"dipplin\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hydrapple\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"carbink\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"eiscue\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"wooloo\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"dubwool\").learnset.rapidspin = [\"9L1\"];\r\n\t\t*/this.modData(\"Learnsets\", \"roselia\").learnset.rapidspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"roserade\").learnset.rapidspin = [\"9L1\"];\r\n\t\t\r\n\t\t/*this.modData(\"Learnsets\", \"oddish\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"gloom\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"vileplume\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"bellossom\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"venipede\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"whirlipede\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"scolipede\").learnset.mortalspin = [\"9L1\"];*/\r\n\t\tthis.modData(\"Learnsets\", \"roselia\").learnset.mortalspin = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"roserade\").learnset.mortalspin = [\"9L1\"];\r\n\t\t/*\t\r\n\t\t//Returning Toxic to the select non-Poisons that returned for Desvega but not SV\r\n\t\tthis.modData(\"Learnsets\", \"paras\").learnset.toxic = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"parasect\").learnset.toxic = [\"9L1\"];\r\n\t\t*/\r\n\t\t\r\n\t\t/*\r\n\t\t\r\n\t\tthis.modData(\"Learnsets\", \"aerodactyl\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"cranidos\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"rampardos\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"geodude\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"graveler\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golem\").learnset.accelerock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"stonjourner\").learnset.accelerock = [\"9L1\"];*/\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocmidnight\").learnset.accelerock = [\"9L1\"];\r\n\t\t\r\n\t\t/*for (const pokemon in this.data.FormatsData) {\r\n\t\t\tconst tierData = this.modData(\"FormatsData\",pokemon);\r\n\t\t\tif (!tierData || !tierData.tier || !tierData.tier.startsWith('Brunica')) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst mon = this.modData(\"Pokedex\",pokemon);\r\n\t\t\tif (!mon) {\r\n\t\t\t\tconsole.log(pokemon + \"'s data is lost!\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (mon.forme && !mon.baseSpecies) {\r\n\t\t\t\tconsole.log(pokemon + \" was not assigned to a base species!\");\r\n\t\t\t}\r\n\t\t}*/\r\n\t\t//Distribution for returning mons to Brunica on Slate 5\r\n\t\tthis.modData(\"Learnsets\", \"wingull\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"pelipper\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"grimer\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"grimer\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"muk\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"muk\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"tyrogue\").learnset.stormthrow = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonlee\").learnset.stormthrow = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonlee\").learnset.darkestlariat = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonlee\").learnset.brutalswing = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonlee\").learnset.uturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonchan\").learnset.stormthrow = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonchan\").learnset.meteormash = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonchan\").learnset.ironhead = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmonchan\").learnset.steelbeam = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmontop\").learnset.stormthrow = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmontop\").learnset.victorydance = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmontop\").learnset.knockoff = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"hitmontop\").learnset.circlethrow = [\"9L1\"];\r\n\r\n\t\t//Distribution to returning mons on Slate 6\r\n\t\tthis.modData(\"Learnsets\", \"onix\").learnset.powertrick = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"steelix\").learnset.powertrick = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"zubat\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"zubat\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"zubat\").learnset.sleepdrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golbat\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golbat\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"golbat\").learnset.sleepdrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.xscissor = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.ominouswind = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.silverwind = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"crobat\").learnset.sleepdrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanroc\").learnset.extremespeed = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocmidnight\").learnset.pursuit = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\", \"lycanrocdusk\").learnset.earthquake = [\"9L1\"];\r\n\t\t\r\n\t\t//skarmory blade runner\r\n\t\tthis.modData(\"Learnsets\", \"skarmory\").learnset.bladerunner = [\"9L1\"];\r\n\r\n\t\t//absol\r\n\t\tthis.modData(\"Learnsets\", \"absol\").learnset.shocktail = [\"9L1\"];\r\n\t\t\r\n\t\t//doduo line\r\n\t\tdelete this.modData(\"Learnsets\",\"doduo\").learnset.endeavor;\r\n\t\tdelete this.modData(\"Learnsets\",\"dodrio\").learnset.endeavor;\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.axekick = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.triplekick = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.highjumpkick = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"doduo\").learnset.triplekick = [\"9E\"];\r\n\t\tthis.modData(\"Learnsets\",\"doduo\").learnset.jumpkick = [\"9L39\"];\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.jumpkick = [\"9L39\"];\r\n\t\tthis.modData(\"Learnsets\",\"doduo\").learnset.lunge = [\"9L47\"];\r\n\t\tthis.modData(\"Learnsets\",\"dodrio\").learnset.lunge = [\"9L47\"];\r\n\t\t\r\n\t\t//bouffalant\r\n\t\tthis.modData(\"Learnsets\",\"bouffalant\").learnset.trailblaze = [\"9E\"];\r\n\t\tthis.modData(\"Learnsets\",\"bouffalant\").learnset.headsmash = [\"9L39\"];\r\n\t\tthis.modData(\"Learnsets\",\"bouffalant\").learnset.supercellslam = [\"9L39\"];\r\n\t\t\r\n\t\t//budew line\r\n\t\tthis.modData(\"Learnsets\",\"budew\").learnset.mudslap = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roselia\").learnset.mudslap = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roselia\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roselia\").learnset.playrough = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.mudslap = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.playrough = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.earthpower = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"roserade\").learnset.tripleaxel = [\"9L1\"];\r\n\t\t\r\n\t\t//mandibuzz\r\n\t\tthis.modData(\"Learnsets\",\"mandibuzz\").learnset.airdive = [\"9L1\"];\r\n\t\t\r\n\t\t//gastly line\r\n\t\tthis.modData(\"Learnsets\",\"gastly\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gastly\").learnset.snatch = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gastly\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gastly\").learnset.drainfang = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"haunter\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"haunter\").learnset.snatch = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"haunter\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"haunter\").learnset.drainfang = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gengar\").learnset.poisonterrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gengar\").learnset.snatch = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gengar\").learnset.toxicshock = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gengar\").learnset.drainfang = [\"9L1\"];\r\n\t\t\r\n\t\t//sandygast line\r\n\t\tthis.modData(\"Learnsets\",\"sandygast\").learnset.nastyplot = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"palossand\").learnset.nastyplot = [\"9L1\"];\r\n\t\t\r\n\t\t//salandit line\r\n\t\tthis.modData(\"Learnsets\",\"salandit\").learnset.sleepdrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"salandit\").learnset.fierydance = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"salandit\").learnset.quickshot = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"salazzle\").learnset.sleepdrain = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"salazzle\").learnset.fierydance = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"salazzle\").learnset.quickshot = [\"9L1\"];\r\n\t\t\r\n\t\t//shiinotic\r\n\t\tthis.modData(\"Learnsets\",\"shiinotic\").learnset.calmmind = [\"9L1\"];\r\n\t\t\r\n\t\t//numel line\r\n\t\tthis.modData(\"Learnsets\",\"numel\").learnset.terracharge = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"camerupt\").learnset.terracharge = [\"9L1\"];\r\n\t\t\r\n\t\t//wailmer line\r\n\t\tthis.modData(\"Learnsets\",\"wailmer\").learnset.filpturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"wailmer\").learnset.frostfeint = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"wailmer\").learnset.iciclecrash = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"wailord\").learnset.filpturn = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"wailord\").learnset.frostfeint = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"wailord\").learnset.iciclecrash = [\"9L1\"];\r\n\t\t\r\n\t\t//fletchling line\r\n\t\tthis.modData(\"Learnsets\",\"fletchling\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"fletchling\").learnset.solarblade = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"fletchinder\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"fletchinder\").learnset.solarblade = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"talonflame\").learnset.airdive = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"talonflame\").learnset.solarblade = [\"9L1\"];\r\n\t\t\r\n\t\t//meowth line\r\n\t\tthis.modData(\"Learnsets\",\"meowth\").learnset.confuseray = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"persian\").learnset.confuseray = [\"9L1\"];\r\n\t\t\r\n\t\t//ralts family\r\n\t\tthis.modData(\"Learnsets\",\"kirlia\").learnset.healingnature = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gardevoir\").learnset.healingnature = [\"9L1\"];\r\n\t\tthis.modData(\"Learnsets\",\"gallade\").learnset.healingnature = [\"9L1\"];\r\n\t\t\r\n\t\t//noibat line\r\n\t\tthis.modData(\"Learnsets\",\"noibat\").learnset.drainfang = [\"9M\"];\r\n\t\tthis.modData(\"Learnsets\",\"noivern\").learnset.drainfang = [\"9M\"];\r\n\t\t\r\n\t},\r\n\trunAction(action) {\r\n\t\tconst pokemonOriginalHP = action.pokemon?.hp;\r\n\t\tlet residualPokemon: (readonly [Pokemon, number])[] = [];\r\n\t\t// returns whether or not we ended in a callback\r\n\t\tswitch (action.choice) {\r\n\t\tcase 'start': {\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tside.pokemonLeft &&= side.pokemon.length;\r\n\t\t\t}\r\n\t\t\tthis.add('start');\r\n\t\t\t// Change Zacian/Zamazenta into their Crowned formes and Lutakon into its Awakened form\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\tlet rawSpecies: Species | null = null;\r\n\t\t\t\tif (pokemon.species.id === 'lutakon') {\r\n\t\t\t\t\tif (pokemon.item === 'awakeningseed') rawSpecies = this.dex.species.get('Lutakon-Awakened');\r\n\t\t\t\t} else if (pokemon.species.id === 'zacian') {\r\n\t\t\t\t\tif (pokemon.item === 'rustedsword') rawSpecies = this.dex.species.get('Zacian-Crowned');\r\n\t\t\t\t} else if (pokemon.species.id === 'zamazenta' && pokemon.item === 'rustedshield') {\r\n\t\t\t\t\trawSpecies = this.dex.species.get('Zamazenta-Crowned');\r\n\t\t\t\t}\r\n\t\t\t\tif (!rawSpecies) continue;\r\n\t\t\t\tconst species = pokemon.setSpecies(rawSpecies);\r\n\t\t\t\tif (!species) continue;\r\n\t\t\t\tpokemon.baseSpecies = rawSpecies;\r\n\t\t\t\tpokemon.details = species.name + (pokemon.level === 100 ? '' : ', L' + pokemon.level) +\r\n\t\t\t\t\t(pokemon.gender === '' ? '' : ', ' + pokemon.gender) + (pokemon.set.shiny ? ', shiny' : '');\r\n\t\t\t\tpokemon.setAbility(species.abilities['0'], null, true);\r\n\t\t\t\tpokemon.baseAbility = pokemon.ability;\r\n\r\n\t\t\t\tconst behemothMove: {[k: string]: string} = {\r\n\t\t\t\t\t'Zacian-Crowned': 'behemothblade', \r\n\t\t\t\t\t'Zamazenta-Crowned': 'behemothbash', \r\n\t\t\t\t\t'Lutakon-Awakened': 'gaiarecovery',\r\n\t\t\t\t};\r\n\t\t\t\tconst ironHead = pokemon.baseMoves.indexOf(rawSpecies.name === 'Lutakon-Awakened' ? 'synthesis' : 'ironhead');\r\n\t\t\t\tif (ironHead >= 0) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(behemothMove[rawSpecies.name]);\r\n\t\t\t\t\tconst movepp = (move.noPPBoosts || move.isZ) ? move.pp : move.pp * 8 / 5;\r\n\t\t\t\t\tpokemon.baseMoveSlots[ironHead] = {\r\n\t\t\t\t\t\tmove: move.name,\r\n\t\t\t\t\t\tid: move.id,\r\n\t\t\t\t\t\tpp: movepp,\r\n\t\t\t\t\t\tmaxpp: movepp,\r\n\t\t\t\t\t\ttarget: move.target,\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t\tdisabledSource: '',\r\n\t\t\t\t\t\tused: false,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tpokemon.moveSlots = pokemon.baseMoveSlots.slice();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.format.onBattleStart) this.format.onBattleStart.call(this);\r\n\t\t\tfor (const rule of this.ruleTable.keys()) {\r\n\t\t\t\tif ('+*-!'.includes(rule.charAt(0))) continue;\r\n\t\t\t\tconst subFormat = this.dex.formats.get(rule);\r\n\t\t\t\tif (subFormat.onBattleStart) subFormat.onBattleStart.call(this);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tfor (let i = 0; i < side.active.length; i++) {\r\n\t\t\t\t\tif (side.pokemonLeft) {\r\n\t\t\t\t\t\tthis.actions.switchIn(side.pokemon[i], i);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// forfeited before starting\r\n\t\t\t\t\tside.active[i] = side.pokemon[i];\r\n\t\t\t\t\tside.active[i].fainted = true;\r\n\t\t\t\t\tside.active[i].hp = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\tthis.singleEvent('Start', this.dex.conditions.getByID(pokemon.species.id), pokemon.speciesState, pokemon);\r\n\t\t\t}\r\n\t\t\tthis.midTurn = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase 'move':\r\n\t\t\tif (!action.pokemon.isActive || action.pokemon.fainted) return false;\r\n\t\t\tthis.actions.runMove(action.move, action.pokemon, action.targetLoc, action.sourceEffect,\r\n\t\t\t\taction.zmove, undefined, action.maxMove, action.originalTarget);\r\n\t\t\tbreak;\r\n\t\tcase 'megaEvo':\r\n\t\t\tthis.actions.runMegaEvo(action.pokemon);\r\n\t\t\tbreak;\r\n\t\tcase 'runDynamax':\r\n\t\t\taction.pokemon.addVolatile('dynamax');\r\n\t\t\taction.pokemon.side.dynamaxUsed = true;\r\n\t\t\tif (action.pokemon.side.allySide) action.pokemon.side.allySide.dynamaxUsed = true;\r\n\t\t\tbreak;\r\n\t\tcase 'terastallize':\r\n\t\t\tthis.actions.terastallize(action.pokemon);\r\n\t\t\tbreak;\r\n\t\tcase 'beforeTurnMove':\r\n\t\t\tif (!action.pokemon.isActive || action.pokemon.fainted) return false;\r\n\t\t\tthis.debug('before turn callback: ' + action.move.id);\r\n\t\t\tconst target = this.getTarget(action.pokemon, action.move, action.targetLoc);\r\n\t\t\tif (!target) return false;\r\n\t\t\tif (!action.move.beforeTurnCallback) throw new Error(`beforeTurnMove has no beforeTurnCallback`);\r\n\t\t\taction.move.beforeTurnCallback.call(this, action.pokemon, target);\r\n\t\t\tbreak;\r\n\t\tcase 'priorityChargeMove':\r\n\t\t\tif (!action.pokemon.isActive || action.pokemon.fainted) return false;\r\n\t\t\tthis.debug('priority charge callback: ' + action.move.id);\r\n\t\t\tif (!action.move.priorityChargeCallback) throw new Error(`priorityChargeMove has no priorityChargeCallback`);\r\n\t\t\taction.move.priorityChargeCallback.call(this, action.pokemon);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'event':\r\n\t\t\tthis.runEvent(action.event!, action.pokemon);\r\n\t\t\tbreak;\r\n\t\tcase 'team':\r\n\t\t\tif (action.index === 0) {\r\n\t\t\t\taction.pokemon.side.pokemon = [];\r\n\t\t\t}\r\n\t\t\taction.pokemon.side.pokemon.push(action.pokemon);\r\n\t\t\taction.pokemon.position = action.index;\r\n\t\t\t// we return here because the update event would crash since there are no active pokemon yet\r\n\t\t\treturn;\r\n\r\n\t\tcase 'pass':\r\n\t\t\treturn;\r\n\t\tcase 'instaswitch':\r\n\t\tcase 'switch':\r\n\t\t\tif (action.choice === 'switch' && action.pokemon.status) {\r\n\t\t\t\tthis.singleEvent('CheckShow', this.dex.abilities.getByID('naturalcure' as ID), null, action.pokemon);\r\n\t\t\t}\r\n\t\t\tif (this.actions.switchIn(action.target, action.pokemon.position,\r\n\t\t\t\taction.sourceEffect) !== 'pursuitfaint') break;\r\n\t\t\t// a pokemon fainted from Pursuit before it could switch\r\n\t\t\t/*if (this.gen <= 4) {\r\n\t\t\t\t// in gen 2-4, the switch still happens\r\n\t\t\t\tthis.hint(\"Previously chosen switches continue in Gen 2-4 after a Pursuit target faints.\");\r\n\t\t\t\taction.priority = -101;\r\n\t\t\t\tthis.queue.unshift(action);\r\n\t\t\t\tbreak;\r\n\t\t\t}*/\r\n\t\t\t// in gen 5+, the switch is cancelled\r\n\t\t\tthis.hint(\"A Pokemon can't switch between when it runs out of HP and when it faints\");\r\n\t\t\tbreak;\r\n\t\tcase 'revivalblessing':\r\n\t\t\taction.pokemon.side.pokemonLeft++;\r\n\t\t\tif (action.target.position < action.pokemon.side.active.length) {\r\n\t\t\t\tthis.queue.addChoice({\r\n\t\t\t\t\tchoice: 'instaswitch',\r\n\t\t\t\t\tpokemon: action.target,\r\n\t\t\t\t\ttarget: action.target,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\taction.target.fainted = action.target.faintQueued = action.target.subFainted = false;\r\n\t\t\taction.target.status = '';\r\n\t\t\taction.target.hp = 1; // Needed so hp functions works\r\n\t\t\taction.target.sethp(action.target.maxhp / 2);\r\n\t\t\tthis.add('-heal', action.target, action.target.getHealth, '[from] move: Revival Blessing');\r\n\t\t\taction.pokemon.side.removeSlotCondition(action.pokemon, 'revivalblessing');\r\n\t\t\tbreak;\r\n\t\tcase 'runUnnerve':\r\n\t\t\tthis.singleEvent('PreStart', action.pokemon.getAbility(), action.pokemon.abilityState, action.pokemon);\r\n\t\t\tbreak;\r\n\t\tcase 'runSwitch':\r\n\t\t\tthis.actions.runSwitch(action.pokemon);\r\n\t\t\tbreak;\r\n\t\tcase 'runPrimal':\r\n\t\t\tif (!action.pokemon.transformed) {\r\n\t\t\t\tthis.singleEvent('Primal', action.pokemon.getItem(), action.pokemon.itemState, action.pokemon);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'shift':\r\n\t\t\tif (!action.pokemon.isActive || action.pokemon.fainted) return false;\r\n\t\t\tthis.swapPosition(action.pokemon, 1);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'beforeTurn':\r\n\t\t\tthis.eachEvent('BeforeTurn');\r\n\t\t\tbreak;\r\n\t\tcase 'residual':\r\n\t\t\tthis.add('');\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\tthis.updateSpeed();\r\n\t\t\tresidualPokemon = this.getAllActive().map(pokemon => [pokemon, pokemon.getUndynamaxedHP()] as const);\r\n\t\t\tthis.residualEvent('Residual');\r\n\t\t\tthis.add('upkeep');\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// phazing (Roar, etc)\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tfor (const pokemon of side.active) {\r\n\t\t\t\tif (!pokemon.forceSwitchFlag) continue;\r\n\t\t\t\tif (pokemon.hp) this.actions.dragIn(pokemon.side, pokemon.position);\r\n\t\t\t\tpokemon.forceSwitchFlag = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.clearActiveMove();\r\n\r\n\t\t// fainting\r\n\r\n\t\tthis.faintMessages();\r\n\t\tif (this.ended) return true;\r\n\r\n\t\t// switching (fainted pokemon, U-turn, Baton Pass, etc)\r\n\r\n\t\tif (!this.queue.peek() /*|| (this.gen <= 3 && ['move', 'residual'].includes(this.queue.peek()!.choice))*/) {\r\n\t\t\t// in gen 3 or earlier, switching in fainted pokemon is done after\r\n\t\t\t// every move, rather than only at the end of the turn.\r\n\t\t\tthis.checkFainted();\r\n\t\t} else if (action.choice === 'megaEvo'/* && this.gen === 7*/) {\r\n\t\t\tthis.eachEvent('Update');\r\n\t\t\t// In Gen 7, the action order is recalculated for a Pok\u00E9mon that mega evolves.\r\n\t\t\tfor (const [i, queuedAction] of this.queue.list.entries()) {\r\n\t\t\t\tif (queuedAction.pokemon === action.pokemon && queuedAction.choice === 'move') {\r\n\t\t\t\t\tthis.queue.list.splice(i, 1);\r\n\t\t\t\t\tqueuedAction.mega = 'done';\r\n\t\t\t\t\tthis.queue.insertChoice(queuedAction, true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t} else if (this.queue.peek()?.choice === 'instaswitch') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//if (this.gen >= 5) {\r\n\t\t\tthis.eachEvent('Update');\r\n\t\t\tfor (const [pokemon, originalHP] of residualPokemon) {\r\n\t\t\t\tconst halfOfMaxHP = pokemon.getUndynamaxedHP(pokemon.maxhp) / 2;\r\n\t\t\t\tif (pokemon.hp && pokemon.getUndynamaxedHP() <= halfOfMaxHP && originalHP > halfOfMaxHP) {\r\n\t\t\t\t\tthis.runEvent('EmergencyExit', pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t//}\r\n\r\n\t\tif (action.choice === 'runSwitch') {\r\n\t\t\tconst pokemon = action.pokemon;\r\n\t\t\tconst threshold = pokemon.maxhp / 2;\r\n\t\t\tif (pokemon.hp && pokemon.hp <= threshold && pokemonOriginalHP! > threshold) {\r\n\t\t\t\tthis.runEvent('EmergencyExit', pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst switches = this.sides.map(\r\n\t\t\tside => side.active.some(pokemon => pokemon && !!pokemon.switchFlag)\r\n\t\t);\r\n\r\n\t\tfor (let i = 0; i < this.sides.length; i++) {\r\n\t\t\tif (switches[i]) {\r\n\t\t\t\tlet reviveSwitch = false; // Used to ignore the fake switch for Revival Blessing\r\n\t\t\t\t\r\n\t\t\t\tif (!this.canSwitch(this.sides[i])) {\r\n\t\t\t\t\tfor (const pokemon of this.sides[i].active) {\r\n\t\t\t\t\t\tif (this.sides[i].slotConditions[pokemon.position]['revivalblessing']) {\r\n\t\t\t\t\t\t\treviveSwitch = true;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpokemon.switchFlag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!reviveSwitch) switches[i] = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (const pokemon of this.sides[i].active) {\r\n\t\t\t\t\t\tif (pokemon.switchFlag && pokemon.switchFlag !== 'revivalblessing' && !pokemon.skipBeforeSwitchOutEventFlag) {\r\n\t\t\t\t\t\t\tthis.runEvent('BeforeSwitchOut', pokemon);\r\n\t\t\t\t\t\t\tpokemon.skipBeforeSwitchOutEventFlag = true;\r\n\t\t\t\t\t\t\tthis.faintMessages(); // Pokemon may have fainted in BeforeSwitchOut\r\n\t\t\t\t\t\t\tif (this.ended) return true;\r\n\t\t\t\t\t\t\tif (pokemon.fainted) {\r\n\t\t\t\t\t\t\t\tswitches[i] = this.sides[i].active.some(sidePokemon => sidePokemon && !!sidePokemon.switchFlag);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (switches.some(Boolean)) {\r\n\t\t\tthis.makeRequest('switch');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t/*for (const playerSwitch of switches) {\r\n\t\t\tif (playerSwitch) {\r\n\t\t\t\tthis.makeRequest('switch');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t\t//if (this.gen < 5) this.eachEvent('Update');\r\n\r\n\t\tif (/*this.gen >= 8 &&*/ (this.queue.peek()?.choice === 'move' || this.queue.peek()?.choice === 'runDynamax')) {\r\n\t\t\t// In gen 8, speed is updated dynamically so update the queue's speed properties and sort it.\r\n\t\t\tthis.updateSpeed();\r\n\t\t\tfor (const queueAction of this.queue.list) {\r\n\t\t\t\tif (!queueAction.pokemon) continue; \r\n\t\t\t\tthis.getActionSpeed(queueAction);\r\n\t\t\t}\r\n\t\t\tthis.queue.sort();\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\t/*showOpenTeamSheets(hideFromSpectators = false) {\r\n\t\tif (this.turn !== 0) return;\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tconst team = side.pokemon.map(pokemon => {\r\n\t\t\t\tconst set = pokemon.set;\r\n\t\t\t\tconst newSet: PokemonSet = {\r\n\t\t\t\t\tname: '',\r\n\t\t\t\t\tspecies: set.species,\r\n\t\t\t\t\titem: set.item,\r\n\t\t\t\t\tability: set.ability,\r\n\t\t\t\t\tmoves: set.moves,\r\n\t\t\t\t\tnature: '',\r\n\t\t\t\t\tgender: pokemon.gender,\r\n\t\t\t\t\tevs: null!,\r\n\t\t\t\t\tivs: null!,\r\n\t\t\t\t\tlevel: set.level,\r\n\t\t\t\t};\r\n\t\t\t\t//if (this.gen === 8) newSet.gigantamax = set.gigantamax;\r\n\t\t\t\t//if (this.gen === 9) newSet.teraType = set.teraType;\r\n\t\t\t\t// Only display Hidden Power type if the Pokemon has Hidden Power\r\n\t\t\t\t// This is based on how team sheets were written in past VGC formats\r\n\t\t\t\tif (set.moves.some(m => this.dex.moves.get(m).id === 'hiddenpower')) newSet.hpType = set.hpType;\r\n\t\t\t\t// This is done so the client doesn't flag Zacian/Zamazenta as illusions\r\n\t\t\t\t// when they use their signature move\r\n\t\t\t\tconst setSpecies = toID(set.species);\r\n\t\t\t\tconst setItem = toID(set.item);\r\n\t\t\t\tconst isLutakon = setSpecies === 'lutakon';\r\n\t\t\t\tif ((setSpecies === 'zacian' && setItem === 'rustedsword') ||\r\n\t\t\t\t\t(setSpecies === 'zamazenta' && setItem === 'rustedshield') || \r\n\t\t\t\t\t(isLutakon && setItem === 'awakeningseed')) {\r\n\t\t\t\t\tnewSet.species = Dex.species.get(set.species + (isLutakon ? 'awakened' : 'crowned')).name;\r\n\t\t\t\t\tconst crowned: {[k: string]: string} = {\r\n\t\t\t\t\t\t'Zacian-Crowned': 'behemothblade', 'Zamazenta-Crowned': 'behemothbash', \r\n\t\t\t\t\t\t'Lutakon-Awakened': 'gaiarecovery'\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst ironHead = set.moves.map(toID).indexOf((isLutakon ? 'synthesis' : 'ironhead') as ID);\r\n\t\t\t\t\tif (ironHead >= 0) {\r\n\t\t\t\t\t\tnewSet.moves[ironHead] = crowned[newSet.species];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn newSet;\r\n\t\t\t});\r\n\t\t\tif (hideFromSpectators) {\r\n\t\t\t\tfor (const s of this.sides) {\r\n\t\t\t\t\tthis.addSplit(s.id, ['showteam', side.id, Teams.pack(team)]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.add('showteam', side.id, Teams.pack(team));\r\n\t\t\t}\r\n\t\t}\r\n\t},*/\r\n\tactions: {\t\r\n\t\tgetActiveBalmMove(baseMove: Move, balmMove: Move) {\r\n\t\t\tif (typeof baseMove === 'string') baseMove = this.dex.getActiveMove(baseMove);\r\n\t\t\tif (baseMove.name === 'struggle') return baseMove;\r\n\t\t\tif (typeof balmMove === 'string') balmMove = this.dex.getActiveMove(balmMove);\r\n\t\t\tif (baseMove.category !== balmMove.category && [balmMove.category, baseMove.category].includes('Status')) return baseMove;\r\n\t\t\t//This function assumes that either both moves passed are damaging or both are status.\r\n\t\t\tif (balmMove.category !== 'Status') {\r\n\t\t\t\tbalmMove.category = baseMove.category;\r\n\t\t\t\tbalmMove.basePower = baseMove.basePower*1.5;\r\n\t\t\t}\r\n\t\t\treturn balmMove;\r\n\t\t},\r\n\t\trunMove(\r\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t\t\tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n\t\t) {\r\n\t\t\tpokemon.activeMoveActions++;\r\n\t\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet move = baseMove;\r\n\t\t\tlet balmMove = null;\r\n\t\t\tif (zMove) {\r\n\t\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t\t} else if (maxMove) {\r\n\t\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t\t} else if (pokemon.volatiles['typebalm']?.balmMove) {\r\n\t\t\t\tconst balmEffectData = pokemon.volatiles['typebalm'];\r\n\t\t\t\tconst isBalmStatus = balmEffectData.isBalmStatus;\r\n\t\t\t\tif (\r\n\t\t\t\t\t(move.id === 'hiddenpower' ? pokemon.hpType : move.type) \r\n\t\t\t\t\t\t=== pokemon.volatiles['typebalm'].balmType //Check if balm type matches move type\r\n\t\t\t\t\t&& ((move.category === 'Status') ? isBalmStatus : !isBalmStatus) //If the balm or base move is status but not both it won't overwrite\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst balmMoveData = this.dex.getActiveMove(pokemon.volatiles['typebalm'].balmMove);\r\n\t\t\t\t\tmove = this.getActiveBalmMove(move, balmMoveData);\r\n\t\t\t\t\tbalmMove = pokemon.volatiles['typebalm'].balmMove;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tmove.isExternal = externalMove;\r\n\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t\t/* if (pokemon.moveThisTurn) {\r\n\t\t\t\t// THIS IS PURELY A SANITY CHECK\r\n\t\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\r\n\t\t\t\t// USE this.queue.cancelMove INSTEAD\r\n\t\t\t\tthis.battle.debug('' + pokemon.id + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\treturn;\r\n\t\t\t} */\r\n\t\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n\t\t\tif (!willTryMove) {\r\n\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\tif (willTryMove === false && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Used exclusively for a hint later\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t\t\tpokemon.addVolatile(move.id);\r\n\t\t\t}\r\n\r\n\t\t\tif (move.beforeMoveCallback && move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\tif (pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tpokemon.lastDamage = 0;\r\n\t\t\tlet lockedMove;\r\n\t\t\tif (!externalMove) {\r\n\t\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\t\tif (lockedMove) {\r\n\t\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst usedTomeOfImagination = pokemon.hasItem('tomeofimagination') && move.id !== 'fling' && pokemon.useItem();\r\n\t\t\t\t\tif (usedTomeOfImagination) {\r\n\t\t\t\t\t\tthis.battle.add('-activate', pokemon, 'item: Tome of Imagination');\r\n\t\t\t\t\t\tthis.battle.add('-message', `${pokemon.name} used its Tome of Imagination to preserve its move's PP!`);\r\n\t\t\t\t\t\tpokemon.addVolatile('tomeofimagination');\r\n\t\t\t\t\t} else if (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\t\tif (pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t\t}\r\n\r\n\t\t\t// Dancer Petal Dance hack\r\n\t\t\t// TODO: implement properly\r\n\t\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t\t\tif (zMove) {\r\n\t\t\t\tif (pokemon.illusion) {\r\n\t\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.add('-zpower', pokemon);\r\n\t\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t\t}\r\n\r\n\t\t\tconst oldActiveMove = move;\r\n\r\n\t\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove, balmMove);\r\n\t\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t\t\tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\t\tif ((move.flags['dance'] || move.flags['bullet']) && moveDidSomething && !move.isExternal) {\r\n\t\t\t\tconst active = this.battle.getAllActive().filter(currentPoke =>\r\n\t\t\t\t\tpokemon !== currentPoke && !currentPoke.isSemiInvulnerable() && currentPoke.hasAbility(['dancer','ballfetch'])\r\n\t\t\t\t);\r\n\t\t\t\tif (active.length) {\r\n\t\t\t\t\tconst dancers = [];\r\n\t\t\t\t\tif (move.flags['dance']) {\r\n\t\t\t\t\t\tfor (const currentPoke of active.filter(currentPoke => currentPoke.hasAbility('dancer'))) {\r\n\t\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (move.flags['bullet']) {\r\n\t\t\t\t\t\tfor (const currentPoke of active.filter(currentPoke => currentPoke.hasAbility('ballfetch'))) {\r\n\t\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\t\t\tdancers.sort(\r\n\t\t\t\t\t\t(a, b) => (a.storedStats['spe'] - b.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\r\n\t\t\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\t\t\tif (dancer.fainted) continue;\r\n\t\t\t\t\t\tthis.battle.add('-activate', dancer, 'ability: ' + (move.flags['dance'] ? 'Dancer' : 'Ball Fetch'));\r\n\t\t\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\r\n\t\t\t\t\t\t\ttargetOf1stDance :\r\n\t\t\t\t\t\t\tpokemon;\r\n\t\t\t\t\t\tthis.runMove(move.id, dancer, dancer.getLocOf(dancersTarget), this.dex.abilities.get(\r\n\t\t\t\t\t\tmove.flags['dance'] ? 'dancer' : 'ballfetch'), undefined, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t\t\tthis.battle.faintMessages();\r\n\t\t\tthis.battle.checkWin();\r\n\r\n\t\t\t/*if (this.battle.gen <= 4) {\r\n\t\t\t\t// In gen 4, the outermost move is considered the last move for Copycat\r\n\t\t\t\tthis.battle.activeMove = oldActiveMove;\r\n\t\t\t}*/\r\n\t\t},\r\n\t\tuseMove(\r\n\t\t\tmove: Move | string, pokemon: Pokemon, target?: Pokemon | null,\r\n\t\t\tsourceEffect?: Effect | null, zMove?: string, maxMove?: string, balmMove?: string\r\n\t\t) {\r\n\t\t\tpokemon.moveThisTurnResult = undefined;\r\n\t\t\tconst oldMoveResult: boolean | null | undefined = pokemon.moveThisTurnResult;\r\n\t\t\tconst moveResult = this.useMoveInner(move, pokemon, target, sourceEffect, zMove, maxMove, balmMove);\r\n\t\t\tif (oldMoveResult === pokemon.moveThisTurnResult) {\r\n\t\t\t\tpokemon.moveThisTurnResult = moveResult;\r\n\t\t\t\tif (moveResult === false && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn moveResult;\r\n\t\t},\r\n\t\tuseMoveInner(\r\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, target?: Pokemon | null,\r\n\t\t\tsourceEffect?: Effect | null, zMove?: string, maxMove?: string, balmMove?: string\r\n\t\t) {\r\n\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\r\n\t\t\t\r\n\t\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tpokemon.lastMoveUsed = move;\r\n\t\t\tif (balmMove) {\r\n\t\t\t\tmove = this.getActiveBalmMove(move, balmMove);\r\n\t\t\t} else if (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\r\n\t\t\t\tif (move.id === 'weatherball' && zMove) {\r\n\t\t\t\t\t// Z-Weather Ball only changes types if it's used directly,\r\n\t\t\t\t\t// not if it's called by Z-Sleep Talk or something.\r\n\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\tif (move.type !== 'Normal') sourceEffect = move;\r\n\t\t\t\t}\r\n\t\t\t\tmove = this.getActiveZMove(move, pokemon);\r\n\t\t\t} else if (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\r\n\t\t\t\tif (maxMove && move.category !== 'Status') {\r\n\t\t\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\r\n\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\tthis.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\t\t}\r\n\t\t\t\tmove = this.getActiveMaxMove(move, pokemon);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.battle.activeMove) {\r\n\t\t\t\tmove.priority = this.battle.activeMove.priority;\r\n\t\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.battle.activeMove.pranksterBoosted;\r\n\t\t\t}\r\n\t\t\tconst baseTarget = move.target;\r\n\t\t\tlet targetRelayVar = this.battle.runEvent('ModifyTarget', pokemon, target, move, {target}, true);\r\n\t\t\tif (targetRelayVar.target !== undefined) target = targetRelayVar.target;\r\n\t\t\tif (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\tif (move.target === 'self' || move.target === 'allies') {\r\n\t\t\t\ttarget = pokemon;\r\n\t\t\t}\r\n\t\t\tif (sourceEffect) {\r\n\t\t\t\tmove.sourceEffect = sourceEffect.id;\r\n\t\t\t\tmove.ignoreAbility = (sourceEffect as ActiveMove).ignoreAbility;\r\n\t\t\t}\r\n\t\t\tlet moveResult = false;\r\n\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t\t// Adjust before the next event so the correct target is passed to the\r\n\t\t\t\t// event\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tmove = this.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t// Adjust again\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (!move || pokemon.fainted) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet attrs = '';\r\n\r\n\t\t\tlet movename = move.name;\r\n\t\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\r\n\t\t\tif (sourceEffect) attrs += `|[from]${sourceEffect.fullname}`;\r\n\t\t\tif (zMove && move.isZ === true) {\r\n\t\t\t\tattrs = '|[anim]' + movename + attrs;\r\n\t\t\t\tmovename = 'Z-' + movename;\r\n\t\t\t}\r\n\t\t\tthis.battle.addMove('move', pokemon, movename, target + attrs);\r\n\r\n\t\t\tif (zMove) this.runZPower(move, pokemon);\r\n\r\n\t\t\tif (!target) {\r\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\tthis.battle.add(/*this.battle.gen >= 5 ?*/ '-fail' /*: '-notarget'*/, pokemon);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconst {targets, pressureTargets} = pokemon.getMoveTargets(move, target);\r\n\t\t\tif (targets.length) {\r\n\t\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\r\n\t\t\t}\r\n\t\t\tif (!pokemon.hasItem('tomeofimagination') && !pokemon.volatiles['tomeofimagination']) {\r\n\t\t\t\tconst callerMoveForPressure = sourceEffect && (sourceEffect as ActiveMove).pp ? sourceEffect as ActiveMove : null;\r\n\t\t\t\tif (!sourceEffect || callerMoveForPressure || sourceEffect.id === 'pursuit') {\r\n\t\t\t\t\tlet extraPP = 0;\r\n\t\t\t\t\tfor (const source of pressureTargets) {\r\n\t\t\t\t\t\tconst ppDrop = this.battle.runEvent('DeductPP', source, pokemon, move);\r\n\t\t\t\t\t\tif (ppDrop !== true) {\r\n\t\t\t\t\t\t\textraPP += ppDrop || 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (extraPP > 0) {\r\n\t\t\t\t\t\tpokemon.deductPP(callerMoveForPressure || moveOrMoveName, extraPP);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.battle.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\r\n\r\n\t\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t\t}\r\n\r\n\t\t\tif (/*this.battle.gen !== 4 &&*/ move.selfdestruct === 'always') {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\tlet damage: number | false | undefined | '' = false;\r\n\t\t\tif (move.target === 'all' || move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') {\r\n\t\t\t\tdamage = this.tryMoveHit(targets, pokemon, move);\r\n\t\t\t\tif (damage === this.battle.NOT_FAIL) pokemon.moveThisTurnResult = null;\r\n\t\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\r\n\t\t\t} else if (targets.length) {\r\n\t\t\t\t/*if (this.battle.gen === 4 && move.selfdestruct === 'always') {\r\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t}*/\r\n\t\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\r\n\t\t\t} else {\r\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\tthis.battle.add(/*this.battle.gen >= 5 ?*/ '-fail'/* : '-notarget'*/, pokemon);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\r\n\t\t\tif (!pokemon.hp) {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\tif (!moveResult) {\r\n\t\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\t!move.negateSecondary &&\r\n\t\t\t\t!(move.hasSheerForce && pokemon.hasAbility('sheerforce')) &&\r\n\t\t\t\t!move.flags['futuremove']\r\n\t\t\t) {\r\n\t\t\t\tconst originalHp = pokemon.hp;\r\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status'/*) {\r\n\t\t\t\t\tif (*/ && pokemon.hp <= pokemon.maxhp * .5 && originalHp > pokemon.maxhp * .5) {\r\n\t\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tmodifyDamage(\r\n\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t\t) {\r\n\t\t\tconst tr = this.battle.trunc;\r\n\t\t\tconst type = (move.type ||= '???');\r\n\r\n\t\t\tbaseDamage += 2;\r\n\r\n\t\t\tif (move.spreadHit) {\r\n\t\t\t\t// multi-target modifier (doubles only)\r\n\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t\t// Parental Bond modifier\r\n\t\t\t\tconst bondModifier = 0.25;//this.battle.gen > 6 ? 0.25 : 0.5;\r\n\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t\t}\r\n\r\n\t\t\t// weather modifier\r\n\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\t// crit - not a modifier\r\n\t\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\t\tif (isCrit) {\r\n\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || /*(this.battle.gen >= 6 ? 1.5 : 2)*/ 1.5));\r\n\t\t\t}\r\n\r\n\t\t\t// random factor - also not a modifier\r\n\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\r\n\t\t\t// STAB\r\n\t\t\t// The \"???\" type never gets STAB\r\n\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t\t// Struggle in the same turn.\r\n\t\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\t\tif (type !== '???') {\r\n\t\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\r\n\t\t\t\tlet stab: number | [number, number] = isSTAB ? 1.5 : 1\r\n\t\t\r\n\t\t\t\t// The Stellar tera type makes this incredibly confusing\r\n\t\t\t\t// If the move's type does not match one of the user's base types,\r\n\t\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\r\n\r\n\t\t\t\t// If the move's type does match one of the user's base types,\r\n\t\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\r\n\t\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\r\n\t\t\t\tif (pokemon.terastallized !== 'Stellar') {\r\n\t\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, \r\n\t\t\t\t\t\t(pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) ? 2 : stab\t\t\t\t\t\t \r\n\t\t\t\t\t);\t\r\n\t\t\t\t} else if (!pokemon.stellarBoostedTypes.includes(type)) {\r\n\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\r\n\t\t\t\t\tif (pokemon.species.name !== 'Terapagos-Stellar') {\r\n\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t\t}\r\n\r\n\t\t\t// types\r\n\t\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\r\n\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\t\tif (typeMod > 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\r\n\t\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\t\tbaseDamage *= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (typeMod < 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\r\n\t\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\r\n\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility('guts')\r\n\t\t\t\t&& !['facade','pepperrush'].includes(move.id)) {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t}\r\n\r\n\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\t\t//if (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\r\n\r\n\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t\t}\r\n\r\n\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\t\tif (/*this.battle.gen !== 5 && */!baseDamage) return 1;\r\n\r\n\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\t\treturn tr(baseDamage, 16);\r\n\t\t},\r\n\t\t\r\n\t\thitStepBreakProtect(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t\t//Adding custom protective moves\r\n\t\t\tif (move.breaksProtect) {\r\n\t\t\t\tfor (const target of targets) {\r\n\t\t\t\t\tlet broke = false;\r\n\t\t\t\t\tfor (const effectid of [\r\n\t\t\t\t\t\t'banefulbunker', 'burningbulwark', 'kingsshield', 'obstruct', 'protect', 'silktrap', 'spikyshield',\r\n\t\t\t\t\t\t'fieldofvision', 'toxicsnowball', 'firewall'\r\n\t\t\t\t\t]) {\r\n\t\t\t\t\t\tif (target.removeVolatile(effectid)) broke = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//if (this.battle.gen >= 6 || !target.isAlly(pokemon)) {\r\n\t\t\t\t\t\tfor (const effectid of ['craftyshield', 'matblock', 'quickguard', 'wideguard']) {\r\n\t\t\t\t\t\t\tif (target.side.removeSideCondition(effectid)) broke = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tif (broke) {\r\n\t\t\t\t\t\tif (move.id === 'feint') {\r\n\t\t\t\t\t\t\tthis.battle.add('-activate', target, 'move: Feint');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-activate', target, 'move: ' + move.name, '[broken]');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/*if (this.battle.gen >= 6)*/ delete target.volatiles['stall'];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t/*canMegaEvo(pokemon) {\r\n\t\t\tif (pokemon.species.isMega) return null;\r\n\r\n\t\t\tconst item = pokemon.getItem();\r\n\t\t\tif (!item.megaStone || item.megaStone === pokemon.baseSpecies.name) return null;\r\n\t\t\treturn item.megaStone;\r\n\t\t},\r\n\t\trunMegaEvo(pokemon) {\r\n\t\t\tif (pokemon.species.isMega) return false;\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst species: Species = this.getMixedSpecies(pokemon.species, pokemon.canMegaEvo);\r\n\r\n\t\t\t// Do we have a proper sprite for it?\r\n\t\t\tif (this.dex.species.get(pokemon.canMegaEvo!).baseSpecies === pokemon.species.baseSpecies) {\r\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\r\n\t\t\t\t// Limit one mega evolution\r\n\t\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\t\tif (!ally.item.endsWith('mask') || !ally.getItem().megaStone) {\r\n\t\t\t\t\t\tally.canMegaEvo = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst oSpecies = this.dex.species.get(pokemon.species);\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst oMegaSpecies = this.dex.species.get(species.originalSpecies);\r\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\r\n\t\t\t\tthis.battle.add('-start', pokemon, oMegaSpecies.requiredItem, '[silent]');\r\n\t\t\t\tif (oSpecies.types.length !== pokemon.species.types.length || oSpecies.types[1] !== pokemon.species.types[1]) {\r\n\t\t\t\t\tthis.battle.add('-start', pokemon, 'typechange', pokemon.species.types.join('/'), '[silent]');\r\n\t\t\t\t}\r\n\t\t\t\t//limit one wonder mask\r\n\t\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\t\tif (ally.item.endsWith('mask') && ally.getItem().megaStone) {\r\n\t\t\t\t\t\tally.canMegaEvo = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tgetMixedSpecies(originalForme, megaForme) {\r\n\t\t\tconst originalSpecies = this.dex.species.get(originalForme);\r\n\t\t\tconst megaSpecies = this.dex.species.get(megaForme);\r\n\t\t\tif (originalSpecies.baseSpecies === megaSpecies.baseSpecies) return megaSpecies;\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn this.mutateOriginalSpecies(originalSpecies, megaSpecies);\r\n\t\t},\r\n\t\tmutateOriginalSpecies(speciesOrForme, formeChangeSpecies) {\r\n\t\t\tconst baseSpecies = this.dex.species.get(formeChangeSpecies.baseSpecies);\r\n\t\t\tlet statDeltas = {};\r\n\t\t\tlet statId: StatID;\r\n\t\t\tfor (statId in formeChangeSpecies.baseStats) {\r\n\t\t\t\tstatDeltas[statId] = formeChangeSpecies.baseStats[statId] - baseSpecies.baseStats[statId];\r\n\t\t\t}\r\n\t\t\tconst species = this.dex.deepClone(this.dex.species.get(speciesOrForme));\r\n\t\t\tconst baseStats = species.baseStats;\r\n\t\t\tfor (const statName in baseStats) {\r\n\t\t\t\tbaseStats[statName] = this.battle.clampIntRange(baseStats[statName] + statDeltas[statName], 1, 255);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst abil = formeChangeSpecies.abilities['0'];\r\n\t\t\tspecies.abilities = {'0': abil};\r\n\t\t\tconst newType = formeChangeSpecies.types[0];\r\n\t\t\tspecies.types = (species.types[0] === newType) ?\r\n\t\t\t\t[newType] : [species.types[0], newType];\r\n\t\t\tif (species.types[1]) {\r\n\t\t\t\tconst firsttype = species.types[0];\r\n\t\t\t\tthis.battle.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + ` (` + formeChangeSpecies.requiredItem + `)</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${firsttype}.png\" alt=\"${firsttype}\" height=\"14\" width=\"32\"><img src=\"https://${Config.routes.client}/sprites/types/${newType}.png\" alt=\"${newType}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abil + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.battle.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + ` (` + formeChangeSpecies.requiredItem + `)</span> <span class=\"col typecol\"><img src=\"https://${Config.routes.client}/sprites/types/${newType}.png\" alt=\"${newType}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abil + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t}\r\n\t\t\tthis.battle.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\r\n\t\t\t//species.weighthg = Math.max(1, species.weighthg + formeChangeSpecies.weighthg - baseSpecies.weighthg);\r\n\t\t\tspecies.originalSpecies = formeChangeSpecies.name;\r\n\t\t\tspecies.requiredItem = formeChangeSpecies.requiredItem;\r\n\t\t\tspecies.isMega = true;\r\n\t\t\treturn species;\r\n\t\t},*/\r\n\t},\r\n\tpokemon: { \r\n\t\t/*addType(newType: string) {\r\n\t\t\tif (this.volatiles['typebalm'] || this.terastallized) return false;\r\n\t\t\tthis.addedType = newType;\r\n\t\t\treturn true;\r\n\t\t},*/\r\n\t\tignoringItem() {\r\n\t\t\treturn !!(\r\n\t\t\t\tthis.itemState.knockedOff || // Gen 3-4\r\n\t\t\t\t(/*this.battle.gen >= 5 &&*/ !this.isActive) ||\r\n\t\t\t\t(!this.getItem().ignoreKlutz && this.hasAbility('klutz')) ||\r\n\t\t\t\tthis.volatiles['rulebook'] || this.volatiles['embargo'] ||\r\n\t\t\t\tthis.battle.field.pseudoWeather['magicroom']\r\n\t\t\t);\r\n\t\t},\r\n\t\trunImmunity(type: string, message?: string | boolean) {\r\n\t\t\tif (!type || type === '???') return true;\r\n\t\t\tif (!this.battle.dex.types.isName(type)) {\r\n\t\t\t\tthrow new Error(\"Use runStatusImmunity for \" + type);\r\n\t\t\t}\r\n\t\t\tif (this.fainted) return false;\r\n\t\r\n\t\t\tconst negateImmunity = !this.battle.runEvent('NegateImmunity', this, type);\r\n\t\t\tconst notImmune = type === 'Ground' ?\r\n\t\t\t\tthis.isGrounded(negateImmunity) :\r\n\t\t\t\tnegateImmunity || this.battle.dex.getImmunity(type, this);\r\n\t\t\tif (notImmune) return true;\r\n\t\t\tif (message) {\r\n\t\t\t\tif (notImmune === null) {\r\n\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: ' + this.getAbility().name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tisGrounded(negateImmunity = false) {\r\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather/*) return true;\r\n\t\t\tif (*/|| 'ingrain' in this.volatiles/* && this.battle.gen >= 4) return true;\r\n\t\t\tif (*/|| 'smackdown' in this.volatiles) return true;\r\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\r\n\t\t\tif (item === 'ironball') return true;\r\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\r\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !('roost' in this.volatiles)) return false;\r\n\t\t\tif ((this.hasAbility(['levitate', 'soaringspirit']) || (this.species.name === 'Fulmenops-Stormy')\r\n\t\t\t\t&& this.hasAbility('weatherflux')) && !this.battle.suppressingAbility(this)) return null;\r\n\t\t\tif ('magnetrise' in this.volatiles/*) return false;\r\n\t\t\tif (*/|| 'telekinesis' in this.volatiles) return false;\r\n\t\t\t//These species are excluded from the Tree-Topper check due to Telekinesis failing against them\r\n\t\t\tif (!['Diglett', 'Dugtrio', 'Palossand', 'Sandygast'].includes(this.baseSpecies.baseSpecies) &&\r\n\t\t\t\t\t\tthis.baseSpecies.name !== 'Gengar-Mega' && this.battle.getAllActive().some(target => target.hasAbility('treetopper'))) return false;\r\n\t\t\treturn item !== 'airballoon';\r\n\t\t },\r\n\t\t\r\n\t\t/** Specifically: is protected against a single-target damaging move */\r\n\t\tisProtected() {\r\n\t\t\treturn !!(\r\n\t\t\t\tthis.volatiles['protect'] || this.volatiles['detect'] || this.volatiles['maxguard'] ||\r\n\t\t\t\tthis.volatiles['kingsshield'] || this.volatiles['spikyshield'] || this.volatiles['banefulbunker'] ||\r\n\t\t\t\tthis.volatiles['obstruct'] || this.volatiles['silktrap'] || this.volatiles['burningbulwark'] ||\r\n\t\t\t\tthis.volatiles['fieldofvision'] || this.volatiles['firewall'] || this.volatiles['toxicsnowball']\r\n\t\t\t);\r\n\t\t}\r\n     },\r\n};\r\n"],
  "mappings": "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",
  "names": ["currentPoke"]
}
