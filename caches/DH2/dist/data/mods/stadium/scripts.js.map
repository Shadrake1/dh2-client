{
  "version": 3,
  "sources": ["../../../../data/mods/stadium/scripts.ts"],
  "sourcesContent": ["/**\r\n * Stadium mechanics inherit from gen 1 mechanics, but fixes some stuff.\r\n */\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tinherit: 'gen1',\r\n\tgen: 1,\r\n\t// BattlePokemon scripts. Stadium shares gen 1 code but it fixes some problems with it.\r\n\tpokemon: {\r\n\t\tinherit: true,\r\n\t\t// Gen 1 function to apply a stat modification that is only active until the stat is recalculated or mon switched.\r\n\t\t// Modified stats are declared in the Pokemon object in sim/pokemon.js in about line 681.\r\n\t\tmodifyStat(statName, modifier) {\r\n\t\t\tif (!(statName in this.storedStats)) throw new Error(\"Invalid `statName` passed to `modifyStat`\");\r\n\t\t\tthis.modifiedStats![statName] = this.battle.clampIntRange(Math.floor(this.modifiedStats![statName] * modifier), 1);\r\n\t\t},\r\n\t\t// This is run on Stadium after boosts and status changes.\r\n\t\trecalculateStats() {\r\n\t\t\tlet statName: StatNameExceptHP;\r\n\t\t\tfor (statName in this.storedStats) {\r\n\t\t\t\tlet stat = this.species.baseStats[statName];\r\n\t\t\t\tstat = Math.floor(\r\n\t\t\t\t\tMath.floor(\r\n\t\t\t\t\t\t2 * stat + this.set.ivs[statName] + Math.floor(this.set.evs[statName] / 4)\r\n\t\t\t\t\t) * this.level / 100 + 5\r\n\t\t\t\t);\r\n\t\t\t\tthis.baseStoredStats[statName] = this.storedStats[statName] = Math.floor(stat);\r\n\t\t\t\tthis.modifiedStats![statName] = Math.floor(stat);\r\n\t\t\t\t// Re-apply drops, if necessary.\r\n\t\t\t\tif (this.status === 'par') this.modifyStat!('spe', 0.25);\r\n\t\t\t\tif (this.status === 'brn') this.modifyStat!('atk', 0.5);\r\n\t\t\t\tif (this.boosts[statName] !== 0) {\r\n\t\t\t\t\tif (this.boosts[statName] >= 0) {\r\n\t\t\t\t\t\tthis.modifyStat!(statName, [1, 1.5, 2, 2.5, 3, 3.5, 4][this.boosts[statName]]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.modifyStat!(statName, [100, 66, 50, 40, 33, 28, 25][-this.boosts[statName]] / 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Stadium's fixed boosting function.\r\n\t\tboostBy(boost) {\r\n\t\t\tlet changed = false;\r\n\t\t\tlet i: BoostName;\r\n\t\t\tfor (i in boost) {\r\n\t\t\t\tlet delta = boost[i];\r\n\t\t\t\tif (delta === undefined) continue;\r\n\t\t\t\tthis.boosts[i] += delta;\r\n\t\t\t\tif (this.boosts[i] > 6) {\r\n\t\t\t\t\tdelta -= this.boosts[i] - 6;\r\n\t\t\t\t\tthis.boosts[i] = 6;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.boosts[i] < -6) {\r\n\t\t\t\t\tdelta -= this.boosts[i] - (-6);\r\n\t\t\t\t\tthis.boosts[i] = -6;\r\n\t\t\t\t}\r\n\t\t\t\tif (delta) changed = true;\r\n\t\t\t}\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.recalculateStats();\r\n\t\t\treturn changed;\r\n\t\t},\r\n\t},\r\n\t// Battle scripts.\r\n\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect) {\r\n\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tconst target = this.getTarget(pokemon, move, targetLoc);\r\n\t\tif (target?.subFainted) target.subFainted = null;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\tif (pokemon.moveThisTurn || !this.runEvent('BeforeMove', pokemon, target, move)) {\r\n\t\t\tthis.debug('' + pokemon.fullname + ' move interrupted; movedThisTurn: ' + pokemon.moveThisTurn);\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\t// This is only run for sleep\r\n\t\t\tthis.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (move.beforeMoveCallback) {\r\n\t\t\tif (move.beforeMoveCallback.call(this, pokemon, target, move)) {\r\n\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet lockedMove = this.runEvent('LockMove', pokemon);\r\n\t\tif (lockedMove === true) lockedMove = false;\r\n\t\tif (\r\n\t\t\t!lockedMove &&\r\n\t\t\t(!pokemon.volatiles['partialtrappinglock'] || pokemon.volatiles['partialtrappinglock'].locked !== target)\r\n\t\t) {\r\n\t\t\tpokemon.deductPP(move, null, target);\r\n\t\t\tpokemon.side.lastMove = move;\r\n\t\t\tpokemon.lastMove = move;\r\n\t\t} else {\r\n\t\t\tsourceEffect = move;\r\n\t\t}\r\n\t\tthis.useMove(move, pokemon, target, sourceEffect);\r\n\t\tthis.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\r\n\t\t// If target fainted\r\n\t\tif (target && target.hp <= 0) {\r\n\t\t\t// We remove screens\r\n\t\t\ttarget.side.removeSideCondition('reflect');\r\n\t\t\ttarget.side.removeSideCondition('lightscreen');\r\n\t\t} else {\r\n\t\t\tthis.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t}\r\n\t\tif (pokemon.volatiles['mustrecharge']) this.add('-mustrecharge', pokemon);\r\n\r\n\t\t// For partial trapping moves, we are saving the target.\r\n\t\tif (move.volatileStatus === 'partiallytrapped' && target && target.hp > 0) {\r\n\t\t\t// It hit, so let's remove must recharge volatile. Yup, this happens on Stadium.\r\n\t\t\ttarget.removeVolatile('mustrecharge');\r\n\t\t\t// Let's check if the lock exists\r\n\t\t\tif (pokemon.volatiles['partialtrappinglock'] && target.volatiles['partiallytrapped']) {\r\n\t\t\t\t// Here the partialtrappinglock volatile has been already applied\r\n\t\t\t\tif (!pokemon.volatiles['partialtrappinglock'].locked) {\r\n\t\t\t\t\t// If it's the first hit, we save the target\r\n\t\t\t\t\tpokemon.volatiles['partialtrappinglock'].locked = target;\r\n\t\t\t\t}\r\n\t\t\t} // If we move to here, the move failed and there's no partial trapping lock\r\n\t\t}\r\n\t},\r\n\ttryMoveHit(target, pokemon, move) {\r\n\t\tlet damage: number | false | undefined = 0;\r\n\r\n\t\t// First, check if the target is semi-invulnerable\r\n\t\tlet hitResult = this.runEvent('Invulnerability', target, pokemon, move);\r\n\t\tif (hitResult === false) {\r\n\t\t\tif (!move.spreadHit) this.attrLastMove('[miss]');\r\n\t\t\tthis.add('-miss', pokemon);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Then, check if the Pokemon is immune to this move.\r\n\t\tif (\r\n\t\t\t(!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) &&\r\n\t\t\t!target.runImmunity(move.type, true)\r\n\t\t) {\r\n\t\t\tif (move.selfdestruct) {\r\n\t\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\thitResult = this.singleEvent('TryImmunity', move, null, target, pokemon, move);\r\n\t\tif (hitResult === false) {\r\n\t\t\tthis.add('-immune', target);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Now, let's calculate the accuracy.\r\n\t\tlet accuracy = move.accuracy;\r\n\r\n\t\t// Partial trapping moves: true accuracy while it lasts\r\n\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\tif (move.volatileStatus === 'partiallytrapped' && target === pokemon.volatiles['partialtrappinglock'].locked) {\r\n\t\t\t\taccuracy = true;\r\n\t\t\t} else if (pokemon.volatiles['partialtrappinglock'].locked !== target) {\r\n\t\t\t\t// The target switched, therefor, you fail using wrap.\r\n\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// OHKO moves only have a chance to hit if the user is at least as fast as the target\r\n\t\tif (move.ohko) {\r\n\t\t\tif (target.speed > pokemon.speed) {\r\n\t\t\t\tthis.add('-immune', target, '[ohko]');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate true accuracy for gen 1, which uses 0-255.\r\n\t\t// Stadium uses the Gen 2 boost table for accuracy and evasiveness, except for 1/3 instead of 0.33\r\n\t\tconst boostTable = [1 / 3, 0.36, 0.43, 0.5, 0.66, 0.75, 1, 1.33, 1.66, 2, 2.33, 2.66, 3];\r\n\t\tif (accuracy !== true) {\r\n\t\t\taccuracy = Math.floor(accuracy * 255 / 100);\r\n\t\t\t// Check also for accuracy modifiers.\r\n\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\taccuracy = Math.floor(accuracy * boostTable[pokemon.boosts.accuracy + 6]);\r\n\t\t\t}\r\n\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\taccuracy = Math.floor(accuracy * boostTable[-target.boosts.evasion + 6]);\r\n\t\t\t}\r\n\t\t\taccuracy = Math.min(accuracy, 255);\r\n\t\t}\r\n\t\taccuracy = this.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\r\n\t\t// Stadium fixes the 1/256 accuracy bug.\r\n\t\tif (accuracy !== true && !this.randomChance(accuracy + 1, 256)) {\r\n\t\t\tthis.attrLastMove('[miss]');\r\n\t\t\tthis.add('-miss', pokemon);\r\n\t\t\tdamage = false;\r\n\t\t}\r\n\r\n\t\t// If damage is 0 and not false it means it didn't miss, let's calc.\r\n\t\tif (damage !== false) {\r\n\t\t\tpokemon.lastDamage = 0;\r\n\t\t\tif (move.multihit) {\r\n\t\t\t\tlet hits = move.multihit;\r\n\t\t\t\tif (Array.isArray(hits)) {\r\n\t\t\t\t\t// Yes, it's hardcoded... meh\r\n\t\t\t\t\tif (hits[0] === 2 && hits[1] === 5) {\r\n\t\t\t\t\t\thits = this.sample([2, 2, 3, 3, 4, 5]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thits = this.random(hits[0], hits[1] + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\thits = Math.floor(hits);\r\n\t\t\t\t// In gen 1, all the hits have the same damage for multihits move\r\n\t\t\t\tlet moveDamage: number | false | undefined = 0;\r\n\t\t\t\tlet i: number;\r\n\t\t\t\tfor (i = 0; i < hits && target.hp && pokemon.hp; i++) {\r\n\t\t\t\t\tmove.hit = i + 1;\r\n\t\t\t\t\tmoveDamage = this.moveHit(target, pokemon, move);\r\n\t\t\t\t\tif (moveDamage === false) break;\r\n\t\t\t\t\tdamage = (moveDamage || 0);\r\n\t\t\t\t\t// Move damage is fixed to be the first move's damage\r\n\t\t\t\t\tif (i === 0) move.damage = damage;\r\n\t\t\t\t\tif (target.subFainted) {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmove.damage = null;\r\n\t\t\t\tif (i === 0) return 1;\r\n\t\t\t\tthis.add('-hitcount', target, i);\r\n\t\t\t} else {\r\n\t\t\t\tdamage = this.moveHit(target, pokemon, move);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.category !== 'Status') target.gotAttacked(move, damage, pokemon);\r\n\r\n\t\tif (move.selfdestruct) {\r\n\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t}\r\n\r\n\t\t// The move missed.\r\n\t\tif (damage === false) {\r\n\t\t\t// Delete the partial trap lock if necessary.\r\n\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (move.ohko) this.add('-ohko');\r\n\r\n\t\tif (!move.negateSecondary) {\r\n\t\t\tthis.singleEvent('AfterMoveSecondary', move, null, target, pokemon, move);\r\n\t\t\tthis.runEvent('AfterMoveSecondary', target, pokemon, move);\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t},\r\n\tmoveHit(target, pokemon, moveOrMoveName, moveData, isSecondary, isSelf) {\r\n\t\tlet damage: number | false | null | undefined = 0;\r\n\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\r\n\t\tif (!isSecondary && !isSelf) this.setActiveMove(move, pokemon, target);\r\n\t\tlet hitResult: number | boolean = true;\r\n\t\tif (!moveData) moveData = move;\r\n\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\tif (target) {\r\n\t\t\thitResult = this.singleEvent('TryHit', moveData, {}, target, pokemon, move);\r\n\r\n\t\t\t// Partial trapping moves still apply their volatile to Pok\u00E9mon behind a Sub\r\n\t\t\tconst targetHadSub = !!target.volatiles['substitute'];\r\n\t\t\tif (targetHadSub && moveData.volatileStatus && moveData.volatileStatus === 'partiallytrapped') {\r\n\t\t\t\ttarget.addVolatile(moveData.volatileStatus, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\tif (!hitResult) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Only run the hit events for the hit itself, not the secondary or self hits\r\n\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\thitResult = this.runEvent('TryHit', target, pokemon, move);\r\n\t\t\t\tif (!hitResult) {\r\n\t\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\t\t// Special Substitute hit flag\r\n\t\t\t\t\tif (hitResult !== 0) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.runEvent('TryFieldHit', target, pokemon, move)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else if (isSecondary && !moveData.self) {\r\n\t\t\t\thitResult = this.runEvent('TrySecondaryHit', target, pokemon, moveData);\r\n\t\t\t}\r\n\r\n\t\t\tif (hitResult === 0) {\r\n\t\t\t\ttarget = null;\r\n\t\t\t} else if (!hitResult) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (target) {\r\n\t\t\tlet didSomething = false;\r\n\r\n\t\t\tdamage = this.getDamage(pokemon, target, moveData);\r\n\t\t\tif ((damage || damage === 0) && !target.fainted) {\r\n\t\t\t\tif (move.noFaint && damage >= target.hp) {\r\n\t\t\t\t\tdamage = target.hp - 1;\r\n\t\t\t\t}\r\n\t\t\t\tdamage = this.damage(damage, target, pokemon, move);\r\n\t\t\t\tif (!(damage || damage === 0)) return false;\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t} else if (damage === false && typeof hitResult === 'undefined') {\r\n\t\t\t\tthis.add('-fail', target);\r\n\t\t\t}\r\n\t\t\tif (damage === false || damage === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (moveData.boosts && !target.fainted) {\r\n\t\t\t\tthis.boost(moveData.boosts, target, pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (moveData.heal && !target.fainted) {\r\n\t\t\t\tconst d = target.heal(Math.floor(target.maxhp * moveData.heal[0] / moveData.heal[1]));\r\n\t\t\t\tif (!d) {\r\n\t\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.add('-heal', target, target.getHealth);\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t}\r\n\t\t\tif (moveData.status) {\r\n\t\t\t\tif (!target.status) {\r\n\t\t\t\t\ttarget.setStatus(moveData.status, pokemon, move);\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\ttarget.recalculateStats();\r\n\t\t\t\t} else if (!isSecondary) {\r\n\t\t\t\t\tif (target.status === moveData.status) {\r\n\t\t\t\t\t\tthis.add('-fail', target, target.status);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t}\r\n\t\t\tif (moveData.forceStatus) {\r\n\t\t\t\tif (target.setStatus(moveData.forceStatus, pokemon, move)) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\ttarget.recalculateStats();\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.volatileStatus) {\r\n\t\t\t\tif (target.addVolatile(moveData.volatileStatus, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.sideCondition) {\r\n\t\t\t\tif (target.side.addSideCondition(moveData.sideCondition, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.pseudoWeather) {\r\n\t\t\t\tif (this.field.addPseudoWeather(moveData.pseudoWeather, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Hit events\r\n\t\t\thitResult = this.singleEvent('Hit', moveData, {}, target, pokemon, move);\r\n\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\tthis.runEvent('Hit', target, pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (!hitResult && !didSomething) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Here's where self effects are applied.\r\n\t\tif (moveData.self) {\r\n\t\t\tthis.moveHit(pokemon, pokemon, move, moveData.self, isSecondary, true);\r\n\t\t}\r\n\r\n\t\t// Now we can save the partial trapping damage.\r\n\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\tpokemon.volatiles['partialtrappinglock'].damage = pokemon.lastDamage;\r\n\t\t}\r\n\r\n\t\t// Apply move secondaries.\r\n\t\tif (moveData.secondaries) {\r\n\t\t\tfor (const secondary of moveData.secondaries) {\r\n\t\t\t\t// We check here whether to negate the probable secondary status if it's para, burn, or freeze.\r\n\t\t\t\t// In the game, this is checked and if true, the random number generator is not called.\r\n\t\t\t\t// That means that a move that does not share the type of the target can status it.\r\n\t\t\t\t// If a move that was not fire-type would exist on Gen 1, it could burn a Pok\u00E9mon.\r\n\t\t\t\tif (!(secondary.status && ['par', 'brn', 'frz'].includes(secondary.status) && target && target.hasType(move.type))) {\r\n\t\t\t\t\tconst effectChance = Math.floor((secondary.chance || 100) * 255 / 100);\r\n\t\t\t\t\tif (typeof secondary.chance === 'undefined' || this.randomChance(effectChance + 1, 256)) {\r\n\t\t\t\t\t\tthis.moveHit(target, pokemon, move, secondary, true, isSelf);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.selfSwitch && pokemon.hp) {\r\n\t\t\tpokemon.switchFlag = move.selfSwitch;\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t},\r\n\tgetDamage(pokemon, target, move, suppressMessages) {\r\n\t\t// First of all, we get the move.\r\n\t\tif (typeof move === 'string') {\r\n\t\t\tmove = this.dex.getActiveMove(move);\r\n\t\t} else if (typeof move === 'number') {\r\n\t\t\tmove = {\r\n\t\t\t\tbasePower: move,\r\n\t\t\t\ttype: '???',\r\n\t\t\t\tcategory: 'Physical',\r\n\t\t\t\twillCrit: false,\r\n\t\t\t\tflags: {},\r\n\t\t\t} as ActiveMove;\r\n\t\t}\r\n\r\n\t\t// Let's see if the target is immune to the move.\r\n\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\tif (!target.runImmunity(move.type, true)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Is it an OHKO move?\r\n\t\tif (move.ohko) {\r\n\t\t\treturn target.maxhp;\r\n\t\t}\r\n\r\n\t\t// We edit the damage through move's damage callback if necessary.\r\n\t\tif (move.damageCallback) {\r\n\t\t\treturn move.damageCallback.call(this, pokemon, target);\r\n\t\t}\r\n\r\n\t\t// We take damage from damage=level moves (seismic toss).\r\n\t\tif (move.damage === 'level') {\r\n\t\t\treturn pokemon.level;\r\n\t\t}\r\n\r\n\t\t// If there's a fix move damage, we return that.\r\n\t\tif (move.damage) {\r\n\t\t\treturn move.damage;\r\n\t\t}\r\n\r\n\t\t// If it's the first hit on a Normal-type partially trap move, it hits Ghosts anyways but damage is 0.\r\n\t\tif (move.volatileStatus === 'partiallytrapped' && move.type === 'Normal' && target.hasType('Ghost')) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Let's check if we are in middle of a partial trap sequence to return the previous damage.\r\n\t\tif (pokemon.volatiles['partialtrappinglock'] && (target === pokemon.volatiles['partialtrappinglock'].locked)) {\r\n\t\t\treturn pokemon.volatiles['partialtrappinglock'].damage;\r\n\t\t}\r\n\r\n\t\t// We check the category and typing to calculate later on the damage.\r\n\t\tif (!move.category) move.category = 'Physical';\r\n\t\tif (!move.defensiveCategory) move.defensiveCategory = move.category;\r\n\t\t// '???' is typeless damage: used for Struggle and Confusion etc\r\n\t\tif (!move.type) move.type = '???';\r\n\t\tconst type = move.type;\r\n\r\n\t\t// We get the base power and apply basePowerCallback if necessary.\r\n\t\tlet basePower: number | false | null = move.basePower;\r\n\t\tif (move.basePowerCallback) {\r\n\t\t\tbasePower = move.basePowerCallback.call(this, pokemon, target, move);\r\n\t\t}\r\n\t\tif (!basePower) {\r\n\t\t\treturn basePower === 0 ? undefined : basePower;\r\n\t\t}\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\t// Checking for the move's Critical Hit possibility. We check if it's a 100% crit move, otherwise we calculate the chance.\r\n\t\tlet isCrit = move.willCrit || false;\r\n\t\tif (!isCrit) {\r\n\t\t\t// In Stadium, the critical chance is based on speed.\r\n\t\t\t// First, we get the base speed and store it. Then we add 76. This is our current crit chance.\r\n\t\t\tlet critChance = pokemon.species.baseStats['spe'] + 76;\r\n\r\n\t\t\t// Now we right logical shift it two places, essentially dividing by 4 and flooring it.\r\n\t\t\tcritChance = critChance >> 2;\r\n\r\n\t\t\t// Now we check for focus energy volatile.\r\n\t\t\tif (pokemon.volatiles['focusenergy']) {\r\n\t\t\t\t// If it exists, crit chance is multiplied by 4 and floored with a logical left shift.\r\n\t\t\t\tcritChance = critChance << 2;\r\n\t\t\t\t// Then we add 160.\r\n\t\t\t\tcritChance += 160;\r\n\t\t\t} else {\r\n\t\t\t\t// If it is not active, we left shift it by 1.\r\n\t\t\t\tcritChance = critChance << 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Now we check for the move's critical hit ratio.\r\n\t\t\tif (move.critRatio === 2) {\r\n\t\t\t\t// High crit ratio, we multiply the result so far by 4.\r\n\t\t\t\tcritChance = critChance << 2;\r\n\t\t\t} else if (move.critRatio === 1) {\r\n\t\t\t\t// Normal hit ratio, we divide the crit chance by 2 and floor the result again.\r\n\t\t\t\tcritChance = critChance >> 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Now we make sure it's a number between 1 and 255.\r\n\t\t\tcritChance = this.clampIntRange(critChance, 1, 255);\r\n\r\n\t\t\t// Last, we check deppending on ratio if the move critical hits or not.\r\n\t\t\t// We compare our critical hit chance against a random number between 0 and 255.\r\n\t\t\t// If the random number is lower, we get a critical hit. This means there is always a 1/255 chance of not hitting critically.\r\n\t\t\tif (critChance > 0) {\r\n\t\t\t\tisCrit = this.randomChance(critChance, 256);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// There is a critical hit.\r\n\t\tif (isCrit && this.runEvent('CriticalHit', target, null, move)) {\r\n\t\t\ttarget.getMoveHitData(move).crit = true;\r\n\t\t}\r\n\r\n\t\t// Happens after crit calculation.\r\n\t\tif (basePower) {\r\n\t\t\tbasePower = this.runEvent('BasePower', pokemon, target, move, basePower);\r\n\t\t\tif (basePower && move.basePowerModifier) {\r\n\t\t\t\tbasePower *= move.basePowerModifier;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!basePower) return 0;\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\t// We now check attacker's and defender's stats.\r\n\t\tlet level = pokemon.level;\r\n\t\tlet attacker = pokemon;\r\n\t\tconst defender = target;\r\n\t\tif (move.useTargetOffensive) attacker = target;\r\n\t\tlet atkType: StatNameExceptHP = (move.category === 'Physical') ? 'atk' : 'spa';\r\n\t\tconst defType: StatNameExceptHP = (move.defensiveCategory === 'Physical') ? 'def' : 'spd';\r\n\t\tif (move.useSourceDefensiveAsOffensive) atkType = defType;\r\n\t\tlet attack = attacker.getStat(atkType);\r\n\t\tlet defense = defender.getStat(defType);\r\n\t\t// In gen 1, screen effect is applied here.\r\n\t\tif ((defType === 'def' && defender.volatiles['reflect']) || (defType === 'spd' && defender.volatiles['lightscreen'])) {\r\n\t\t\tthis.debug('Screen doubling (Sp)Def');\r\n\t\t\tdefense *= 2;\r\n\t\t\tdefense = this.clampIntRange(defense, 1, 1998);\r\n\t\t}\r\n\r\n\t\t// In the event of a critical hit, the offense and defense changes are ignored.\r\n\t\t// This includes both boosts and screens.\r\n\t\t// Also, level is doubled in damage calculation.\r\n\t\tif (isCrit) {\r\n\t\t\tmove.ignoreOffensive = true;\r\n\t\t\tmove.ignoreDefensive = true;\r\n\t\t\tlevel *= 2;\r\n\t\t\tif (!suppressMessages) this.add('-crit', target);\r\n\t\t}\r\n\t\tif (move.ignoreOffensive) {\r\n\t\t\tthis.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\tattack = attacker.getStat(atkType, true);\r\n\t\t}\r\n\t\tif (move.ignoreDefensive) {\r\n\t\t\tthis.debug('Negating (sp)def boost/penalty.');\r\n\t\t\tdefense = target.getStat(defType, true);\r\n\t\t}\r\n\r\n\t\t// When either attack or defense are higher than 256, they are both divided by 4 and moded by 256.\r\n\t\t// This is what cuases the roll over bugs.\r\n\t\tif (attack >= 256 || defense >= 256) {\r\n\t\t\tattack = this.clampIntRange(Math.floor(attack / 4) % 256, 1);\r\n\t\t\t// Defense isn't checked on the cartridge, but we don't want those / 0 bugs on the sim.\r\n\t\t\tdefense = this.clampIntRange(Math.floor(defense / 4) % 256, 1);\r\n\t\t}\r\n\r\n\t\t// Self destruct moves halve defense at this point.\r\n\t\tif (move.selfdestruct && defType === 'def') {\r\n\t\t\tdefense = this.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t}\r\n\r\n\t\t// Let's go with the calculation now that we have what we need.\r\n\t\t// We do it step by step just like the game does.\r\n\t\tlet damage = level * 2;\r\n\t\tdamage = Math.floor(damage / 5);\r\n\t\tdamage += 2;\r\n\t\tdamage *= basePower;\r\n\t\tdamage *= attack;\r\n\t\tdamage = Math.floor(damage / defense);\r\n\t\tdamage = this.clampIntRange(Math.floor(damage / 50), 1, 997);\r\n\t\tdamage += 2;\r\n\r\n\t\t// STAB damage bonus, the \"???\" type never gets STAB\r\n\t\tif (type !== '???' && pokemon.hasType(type)) {\r\n\t\t\tdamage += Math.floor(damage / 2);\r\n\t\t}\r\n\r\n\t\t// Type effectiveness.\r\n\t\t// The order here is not correct, must change to check the move versus each type.\r\n\t\tconst totalTypeMod = this.dex.getEffectiveness(type, target);\r\n\t\t// Super effective attack\r\n\t\tif (totalTypeMod > 0) {\r\n\t\t\tif (!suppressMessages) this.add('-supereffective', target);\r\n\t\t\tdamage *= 20;\r\n\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\tif (totalTypeMod >= 2) {\r\n\t\t\t\tdamage *= 20;\r\n\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (totalTypeMod < 0) {\r\n\t\t\tif (!suppressMessages) this.add('-resisted', target);\r\n\t\t\tdamage *= 5;\r\n\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\tif (totalTypeMod <= -2) {\r\n\t\t\t\tdamage *= 5;\r\n\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If damage becomes 0, the move is made to miss.\r\n\t\t// This occurs when damage was either 2 or 3 prior to applying STAB/Type matchup, and target is 4x resistant to the move.\r\n\t\tif (damage === 0) return damage;\r\n\r\n\t\t// Apply random factor is damage is greater than 1\r\n\t\tif (damage > 1) {\r\n\t\t\tdamage *= this.random(217, 256);\r\n\t\t\tdamage = Math.floor(damage / 255);\r\n\t\t\tif (damage > target.hp && !target.volatiles['substitute']) damage = target.hp;\r\n\t\t\tif (target.volatiles['substitute'] && damage > target.volatiles['substitute'].hp) {\r\n\t\t\t\tdamage = target.volatiles['substitute'].hp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// We are done, this is the final damage.\r\n\t\treturn Math.floor(damage);\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,MAAM,UAAmC;AAAA,EAC/C,SAAS;AAAA,EACT,KAAK;AAAA;AAAA,EAEL,SAAS;AAAA,IACR,SAAS;AAAA;AAAA;AAAA,IAGT,WAAW,UAAU,UAAU;AAC9B,UAAI,EAAE,YAAY,KAAK;AAAc,cAAM,IAAI,MAAM,2CAA2C;AAChG,WAAK,cAAe,QAAQ,IAAI,KAAK,OAAO,cAAc,KAAK,MAAM,KAAK,cAAe,QAAQ,IAAI,QAAQ,GAAG,CAAC;AAAA,IAClH;AAAA;AAAA,IAEA,mBAAmB;AAClB,UAAI;AACJ,WAAK,YAAY,KAAK,aAAa;AAClC,YAAI,OAAO,KAAK,QAAQ,UAAU,QAAQ;AAC1C,eAAO,KAAK;AAAA,UACX,KAAK;AAAA,YACJ,IAAI,OAAO,KAAK,IAAI,IAAI,QAAQ,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,QAAQ,IAAI,CAAC;AAAA,UAC1E,IAAI,KAAK,QAAQ,MAAM;AAAA,QACxB;AACA,aAAK,gBAAgB,QAAQ,IAAI,KAAK,YAAY,QAAQ,IAAI,KAAK,MAAM,IAAI;AAC7E,aAAK,cAAe,QAAQ,IAAI,KAAK,MAAM,IAAI;AAE/C,YAAI,KAAK,WAAW;AAAO,eAAK,WAAY,OAAO,IAAI;AACvD,YAAI,KAAK,WAAW;AAAO,eAAK,WAAY,OAAO,GAAG;AACtD,YAAI,KAAK,OAAO,QAAQ,MAAM,GAAG;AAChC,cAAI,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC/B,iBAAK,WAAY,UAAU,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,EAAE,KAAK,OAAO,QAAQ,CAAC,CAAC;AAAA,UAC9E,OAAO;AACN,iBAAK,WAAY,UAAU,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,CAAC,KAAK,OAAO,QAAQ,CAAC,IAAI,GAAG;AAAA,UACvF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA;AAAA,IAEA,QAAQ,OAAO;AACd,UAAI,UAAU;AACd,UAAI;AACJ,WAAK,KAAK,OAAO;AAChB,YAAI,QAAQ,MAAM,CAAC;AACnB,YAAI,UAAU;AAAW;AACzB,aAAK,OAAO,CAAC,KAAK;AAClB,YAAI,KAAK,OAAO,CAAC,IAAI,GAAG;AACvB,mBAAS,KAAK,OAAO,CAAC,IAAI;AAC1B,eAAK,OAAO,CAAC,IAAI;AAAA,QAClB;AACA,YAAI,KAAK,OAAO,CAAC,IAAI,IAAI;AACxB,mBAAS,KAAK,OAAO,CAAC,IAAK;AAC3B,eAAK,OAAO,CAAC,IAAI;AAAA,QAClB;AACA,YAAI;AAAO,oBAAU;AAAA,MACtB;AAEA,WAAK,iBAAiB;AACtB,aAAO;AAAA,IACR;AAAA,EACD;AAAA;AAAA,EAEA,QAAQ,gBAAgB,SAAS,WAAW,cAAc;AACzD,UAAM,OAAO,KAAK,IAAI,cAAc,cAAc;AAClD,UAAM,SAAS,KAAK,UAAU,SAAS,MAAM,SAAS;AACtD,QAAI,QAAQ;AAAY,aAAO,aAAa;AAE5C,SAAK,cAAc,MAAM,SAAS,MAAM;AAExC,QAAI,QAAQ,gBAAgB,CAAC,KAAK,SAAS,cAAc,SAAS,QAAQ,IAAI,GAAG;AAChF,WAAK,MAAM,KAAK,QAAQ,WAAW,uCAAuC,QAAQ,YAAY;AAC9F,WAAK,gBAAgB,IAAI;AAEzB,WAAK,SAAS,iBAAiB,SAAS,QAAQ,IAAI;AACpD;AAAA,IACD;AACA,QAAI,KAAK,oBAAoB;AAC5B,UAAI,KAAK,mBAAmB,KAAK,MAAM,SAAS,QAAQ,IAAI,GAAG;AAC9D,aAAK,gBAAgB,IAAI;AACzB;AAAA,MACD;AAAA,IACD;AACA,YAAQ,aAAa;AACrB,QAAI,aAAa,KAAK,SAAS,YAAY,OAAO;AAClD,QAAI,eAAe;AAAM,mBAAa;AACtC,QACC,CAAC,eACA,CAAC,QAAQ,UAAU,qBAAqB,KAAK,QAAQ,UAAU,qBAAqB,EAAE,WAAW,SACjG;AACD,cAAQ,SAAS,MAAM,MAAM,MAAM;AACnC,cAAQ,KAAK,WAAW;AACxB,cAAQ,WAAW;AAAA,IACpB,OAAO;AACN,qBAAe;AAAA,IAChB;AACA,SAAK,QAAQ,MAAM,SAAS,QAAQ,YAAY;AAChD,SAAK,YAAY,aAAa,MAAM,MAAM,SAAS,QAAQ,IAAI;AAG/D,QAAI,UAAU,OAAO,MAAM,GAAG;AAE7B,aAAO,KAAK,oBAAoB,SAAS;AACzC,aAAO,KAAK,oBAAoB,aAAa;AAAA,IAC9C,OAAO;AACN,WAAK,SAAS,iBAAiB,SAAS,QAAQ,IAAI;AAAA,IACrD;AACA,QAAI,QAAQ,UAAU,cAAc;AAAG,WAAK,IAAI,iBAAiB,OAAO;AAGxE,QAAI,KAAK,mBAAmB,sBAAsB,UAAU,OAAO,KAAK,GAAG;AAE1E,aAAO,eAAe,cAAc;AAEpC,UAAI,QAAQ,UAAU,qBAAqB,KAAK,OAAO,UAAU,kBAAkB,GAAG;AAErF,YAAI,CAAC,QAAQ,UAAU,qBAAqB,EAAE,QAAQ;AAErD,kBAAQ,UAAU,qBAAqB,EAAE,SAAS;AAAA,QACnD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,WAAW,QAAQ,SAAS,MAAM;AACjC,QAAI,SAAqC;AAGzC,QAAI,YAAY,KAAK,SAAS,mBAAmB,QAAQ,SAAS,IAAI;AACtE,QAAI,cAAc,OAAO;AACxB,UAAI,CAAC,KAAK;AAAW,aAAK,aAAa,QAAQ;AAC/C,WAAK,IAAI,SAAS,OAAO;AACzB,aAAO;AAAA,IACR;AAGA,SACE,CAAC,KAAK,kBAAmB,KAAK,mBAAmB,QAAQ,CAAC,KAAK,eAAe,KAAK,IAAI,MACxF,CAAC,OAAO,YAAY,KAAK,MAAM,IAAI,GAClC;AACD,UAAI,KAAK,cAAc;AACtB,aAAK,MAAM,SAAS,SAAS,IAAI;AAAA,MAClC;AACA,aAAO;AAAA,IACR;AACA,gBAAY,KAAK,YAAY,eAAe,MAAM,MAAM,QAAQ,SAAS,IAAI;AAC7E,QAAI,cAAc,OAAO;AACxB,WAAK,IAAI,WAAW,MAAM;AAC1B,aAAO;AAAA,IACR;AAGA,QAAI,WAAW,KAAK;AAGpB,QAAI,QAAQ,UAAU,qBAAqB,GAAG;AAC7C,UAAI,KAAK,mBAAmB,sBAAsB,WAAW,QAAQ,UAAU,qBAAqB,EAAE,QAAQ;AAC7G,mBAAW;AAAA,MACZ,WAAW,QAAQ,UAAU,qBAAqB,EAAE,WAAW,QAAQ;AAEtE,eAAO,QAAQ,UAAU,qBAAqB;AAC9C,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,KAAK,MAAM;AACd,UAAI,OAAO,QAAQ,QAAQ,OAAO;AACjC,aAAK,IAAI,WAAW,QAAQ,QAAQ;AACpC,eAAO;AAAA,MACR;AAAA,IACD;AAIA,UAAM,aAAa,CAAC,IAAI,GAAG,MAAM,MAAM,KAAK,MAAM,MAAM,GAAG,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC;AACvF,QAAI,aAAa,MAAM;AACtB,iBAAW,KAAK,MAAM,WAAW,MAAM,GAAG;AAE1C,UAAI,CAAC,KAAK,gBAAgB;AACzB,mBAAW,KAAK,MAAM,WAAW,WAAW,QAAQ,OAAO,WAAW,CAAC,CAAC;AAAA,MACzE;AACA,UAAI,CAAC,KAAK,eAAe;AACxB,mBAAW,KAAK,MAAM,WAAW,WAAW,CAAC,OAAO,OAAO,UAAU,CAAC,CAAC;AAAA,MACxE;AACA,iBAAW,KAAK,IAAI,UAAU,GAAG;AAAA,IAClC;AACA,eAAW,KAAK,SAAS,YAAY,QAAQ,SAAS,MAAM,QAAQ;AAGpE,QAAI,aAAa,QAAQ,CAAC,KAAK,aAAa,WAAW,GAAG,GAAG,GAAG;AAC/D,WAAK,aAAa,QAAQ;AAC1B,WAAK,IAAI,SAAS,OAAO;AACzB,eAAS;AAAA,IACV;AAGA,QAAI,WAAW,OAAO;AACrB,cAAQ,aAAa;AACrB,UAAI,KAAK,UAAU;AAClB,YAAI,OAAO,KAAK;AAChB,YAAI,MAAM,QAAQ,IAAI,GAAG;AAExB,cAAI,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,GAAG;AACnC,mBAAO,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,UACtC,OAAO;AACN,mBAAO,KAAK,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;AAAA,UACxC;AAAA,QACD;AACA,eAAO,KAAK,MAAM,IAAI;AAEtB,YAAI,aAAyC;AAC7C,YAAI;AACJ,aAAK,IAAI,GAAG,IAAI,QAAQ,OAAO,MAAM,QAAQ,IAAI,KAAK;AACrD,eAAK,MAAM,IAAI;AACf,uBAAa,KAAK,QAAQ,QAAQ,SAAS,IAAI;AAC/C,cAAI,eAAe;AAAO;AAC1B,mBAAU,cAAc;AAExB,cAAI,MAAM;AAAG,iBAAK,SAAS;AAC3B,cAAI,OAAO,YAAY;AACtB;AACA;AAAA,UACD;AAAA,QACD;AACA,aAAK,SAAS;AACd,YAAI,MAAM;AAAG,iBAAO;AACpB,aAAK,IAAI,aAAa,QAAQ,CAAC;AAAA,MAChC,OAAO;AACN,iBAAS,KAAK,QAAQ,QAAQ,SAAS,IAAI;AAAA,MAC5C;AAAA,IACD;AAEA,QAAI,KAAK,aAAa;AAAU,aAAO,YAAY,MAAM,QAAQ,OAAO;AAExE,QAAI,KAAK,cAAc;AACtB,WAAK,MAAM,SAAS,SAAS,IAAI;AAAA,IAClC;AAGA,QAAI,WAAW,OAAO;AAErB,aAAO,QAAQ,UAAU,qBAAqB;AAC9C,aAAO;AAAA,IACR;AAEA,QAAI,KAAK;AAAM,WAAK,IAAI,OAAO;AAE/B,QAAI,CAAC,KAAK,iBAAiB;AAC1B,WAAK,YAAY,sBAAsB,MAAM,MAAM,QAAQ,SAAS,IAAI;AACxE,WAAK,SAAS,sBAAsB,QAAQ,SAAS,IAAI;AAAA,IAC1D;AAEA,WAAO;AAAA,EACR;AAAA,EACA,QAAQ,QAAQ,SAAS,gBAAgB,UAAU,aAAa,QAAQ;AACvE,QAAI,SAA4C;AAChD,UAAM,OAAO,KAAK,IAAI,cAAc,cAAc;AAElD,QAAI,CAAC,eAAe,CAAC;AAAQ,WAAK,cAAc,MAAM,SAAS,MAAM;AACrE,QAAI,YAA8B;AAClC,QAAI,CAAC;AAAU,iBAAW;AAE1B,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,iBAAkB,KAAK,aAAa;AAAA,IAC1C;AAEA,QAAI,QAAQ;AACX,kBAAY,KAAK,YAAY,UAAU,UAAU,CAAC,GAAG,QAAQ,SAAS,IAAI;AAG1E,YAAM,eAAe,CAAC,CAAC,OAAO,UAAU,YAAY;AACpD,UAAI,gBAAgB,SAAS,kBAAkB,SAAS,mBAAmB,oBAAoB;AAC9F,eAAO,YAAY,SAAS,gBAAgB,SAAS,IAAI;AAAA,MAC1D;AAEA,UAAI,CAAC,WAAW;AACf,YAAI,cAAc;AAAO,eAAK,IAAI,SAAS,MAAM;AACjD,eAAO;AAAA,MACR;AAGA,UAAI,CAAC,UAAU,CAAC,aAAa;AAC5B,oBAAY,KAAK,SAAS,UAAU,QAAQ,SAAS,IAAI;AACzD,YAAI,CAAC,WAAW;AACf,cAAI,cAAc;AAAO,iBAAK,IAAI,SAAS,MAAM;AAEjD,cAAI,cAAc,GAAG;AACpB,mBAAO;AAAA,UACR;AAAA,QACD;AACA,YAAI,CAAC,KAAK,SAAS,eAAe,QAAQ,SAAS,IAAI,GAAG;AACzD,iBAAO;AAAA,QACR;AAAA,MACD,WAAW,eAAe,CAAC,SAAS,MAAM;AACzC,oBAAY,KAAK,SAAS,mBAAmB,QAAQ,SAAS,QAAQ;AAAA,MACvE;AAEA,UAAI,cAAc,GAAG;AACpB,iBAAS;AAAA,MACV,WAAW,CAAC,WAAW;AACtB,YAAI,cAAc;AAAO,eAAK,IAAI,SAAS,MAAM;AACjD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,QAAQ;AACX,UAAI,eAAe;AAEnB,eAAS,KAAK,UAAU,SAAS,QAAQ,QAAQ;AACjD,WAAK,UAAU,WAAW,MAAM,CAAC,OAAO,SAAS;AAChD,YAAI,KAAK,WAAW,UAAU,OAAO,IAAI;AACxC,mBAAS,OAAO,KAAK;AAAA,QACtB;AACA,iBAAS,KAAK,OAAO,QAAQ,QAAQ,SAAS,IAAI;AAClD,YAAI,EAAE,UAAU,WAAW;AAAI,iBAAO;AACtC,uBAAe;AAAA,MAChB,WAAW,WAAW,SAAS,OAAO,cAAc,aAAa;AAChE,aAAK,IAAI,SAAS,MAAM;AAAA,MACzB;AACA,UAAI,WAAW,SAAS,WAAW,MAAM;AACxC,eAAO;AAAA,MACR;AACA,UAAI,SAAS,UAAU,CAAC,OAAO,SAAS;AACvC,aAAK,MAAM,SAAS,QAAQ,QAAQ,SAAS,IAAI;AAAA,MAClD;AACA,UAAI,SAAS,QAAQ,CAAC,OAAO,SAAS;AACrC,cAAM,IAAI,OAAO,KAAK,KAAK,MAAM,OAAO,QAAQ,SAAS,KAAK,CAAC,IAAI,SAAS,KAAK,CAAC,CAAC,CAAC;AACpF,YAAI,CAAC,GAAG;AACP,eAAK,IAAI,SAAS,MAAM;AACxB,iBAAO;AAAA,QACR;AACA,aAAK,IAAI,SAAS,QAAQ,OAAO,SAAS;AAC1C,uBAAe;AAAA,MAChB;AACA,UAAI,SAAS,QAAQ;AACpB,YAAI,CAAC,OAAO,QAAQ;AACnB,iBAAO,UAAU,SAAS,QAAQ,SAAS,IAAI;AAE/C,iBAAO,iBAAiB;AAAA,QACzB,WAAW,CAAC,aAAa;AACxB,cAAI,OAAO,WAAW,SAAS,QAAQ;AACtC,iBAAK,IAAI,SAAS,QAAQ,OAAO,MAAM;AAAA,UACxC,OAAO;AACN,iBAAK,IAAI,SAAS,MAAM;AAAA,UACzB;AAAA,QACD;AACA,uBAAe;AAAA,MAChB;AACA,UAAI,SAAS,aAAa;AACzB,YAAI,OAAO,UAAU,SAAS,aAAa,SAAS,IAAI,GAAG;AAE1D,iBAAO,iBAAiB;AACxB,yBAAe;AAAA,QAChB;AAAA,MACD;AACA,UAAI,SAAS,gBAAgB;AAC5B,YAAI,OAAO,YAAY,SAAS,gBAAgB,SAAS,IAAI,GAAG;AAC/D,yBAAe;AAAA,QAChB;AAAA,MACD;AACA,UAAI,SAAS,eAAe;AAC3B,YAAI,OAAO,KAAK,iBAAiB,SAAS,eAAe,SAAS,IAAI,GAAG;AACxE,yBAAe;AAAA,QAChB;AAAA,MACD;AACA,UAAI,SAAS,eAAe;AAC3B,YAAI,KAAK,MAAM,iBAAiB,SAAS,eAAe,SAAS,IAAI,GAAG;AACvE,yBAAe;AAAA,QAChB;AAAA,MACD;AAEA,kBAAY,KAAK,YAAY,OAAO,UAAU,CAAC,GAAG,QAAQ,SAAS,IAAI;AACvE,UAAI,CAAC,UAAU,CAAC,aAAa;AAC5B,aAAK,SAAS,OAAO,QAAQ,SAAS,IAAI;AAAA,MAC3C;AACA,UAAI,CAAC,aAAa,CAAC,cAAc;AAChC,YAAI,cAAc;AAAO,eAAK,IAAI,SAAS,MAAM;AACjD,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,SAAS,MAAM;AAClB,WAAK,QAAQ,SAAS,SAAS,MAAM,SAAS,MAAM,aAAa,IAAI;AAAA,IACtE;AAGA,QAAI,QAAQ,UAAU,qBAAqB,GAAG;AAC7C,cAAQ,UAAU,qBAAqB,EAAE,SAAS,QAAQ;AAAA,IAC3D;AAGA,QAAI,SAAS,aAAa;AACzB,iBAAW,aAAa,SAAS,aAAa;AAK7C,YAAI,EAAE,UAAU,UAAU,CAAC,OAAO,OAAO,KAAK,EAAE,SAAS,UAAU,MAAM,KAAK,UAAU,OAAO,QAAQ,KAAK,IAAI,IAAI;AACnH,gBAAM,eAAe,KAAK,OAAO,UAAU,UAAU,OAAO,MAAM,GAAG;AACrE,cAAI,OAAO,UAAU,WAAW,eAAe,KAAK,aAAa,eAAe,GAAG,GAAG,GAAG;AACxF,iBAAK,QAAQ,QAAQ,SAAS,MAAM,WAAW,MAAM,MAAM;AAAA,UAC5D;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,KAAK,cAAc,QAAQ,IAAI;AAClC,cAAQ,aAAa,KAAK;AAAA,IAC3B;AAEA,WAAO;AAAA,EACR;AAAA,EACA,UAAU,SAAS,QAAQ,MAAM,kBAAkB;AAElD,QAAI,OAAO,SAAS,UAAU;AAC7B,aAAO,KAAK,IAAI,cAAc,IAAI;AAAA,IACnC,WAAW,OAAO,SAAS,UAAU;AACpC,aAAO;AAAA,QACN,WAAW;AAAA,QACX,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,QACV,OAAO,CAAC;AAAA,MACT;AAAA,IACD;AAGA,QAAI,CAAC,KAAK,kBAAmB,KAAK,mBAAmB,QAAQ,CAAC,KAAK,eAAe,KAAK,IAAI,GAAI;AAC9F,UAAI,CAAC,OAAO,YAAY,KAAK,MAAM,IAAI,GAAG;AACzC,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,KAAK,MAAM;AACd,aAAO,OAAO;AAAA,IACf;AAGA,QAAI,KAAK,gBAAgB;AACxB,aAAO,KAAK,eAAe,KAAK,MAAM,SAAS,MAAM;AAAA,IACtD;AAGA,QAAI,KAAK,WAAW,SAAS;AAC5B,aAAO,QAAQ;AAAA,IAChB;AAGA,QAAI,KAAK,QAAQ;AAChB,aAAO,KAAK;AAAA,IACb;AAGA,QAAI,KAAK,mBAAmB,sBAAsB,KAAK,SAAS,YAAY,OAAO,QAAQ,OAAO,GAAG;AACpG,aAAO;AAAA,IACR;AAGA,QAAI,QAAQ,UAAU,qBAAqB,KAAM,WAAW,QAAQ,UAAU,qBAAqB,EAAE,QAAS;AAC7G,aAAO,QAAQ,UAAU,qBAAqB,EAAE;AAAA,IACjD;AAGA,QAAI,CAAC,KAAK;AAAU,WAAK,WAAW;AACpC,QAAI,CAAC,KAAK;AAAmB,WAAK,oBAAoB,KAAK;AAE3D,QAAI,CAAC,KAAK;AAAM,WAAK,OAAO;AAC5B,UAAM,OAAO,KAAK;AAGlB,QAAI,YAAmC,KAAK;AAC5C,QAAI,KAAK,mBAAmB;AAC3B,kBAAY,KAAK,kBAAkB,KAAK,MAAM,SAAS,QAAQ,IAAI;AAAA,IACpE;AACA,QAAI,CAAC,WAAW;AACf,aAAO,cAAc,IAAI,SAAY;AAAA,IACtC;AACA,gBAAY,KAAK,cAAc,WAAW,CAAC;AAG3C,QAAI,SAAS,KAAK,YAAY;AAC9B,QAAI,CAAC,QAAQ;AAGZ,UAAI,aAAa,QAAQ,QAAQ,UAAU,KAAK,IAAI;AAGpD,mBAAa,cAAc;AAG3B,UAAI,QAAQ,UAAU,aAAa,GAAG;AAErC,qBAAa,cAAc;AAE3B,sBAAc;AAAA,MACf,OAAO;AAEN,qBAAa,cAAc;AAAA,MAC5B;AAGA,UAAI,KAAK,cAAc,GAAG;AAEzB,qBAAa,cAAc;AAAA,MAC5B,WAAW,KAAK,cAAc,GAAG;AAEhC,qBAAa,cAAc;AAAA,MAC5B;AAGA,mBAAa,KAAK,cAAc,YAAY,GAAG,GAAG;AAKlD,UAAI,aAAa,GAAG;AACnB,iBAAS,KAAK,aAAa,YAAY,GAAG;AAAA,MAC3C;AAAA,IACD;AAEA,QAAI,UAAU,KAAK,SAAS,eAAe,QAAQ,MAAM,IAAI,GAAG;AAC/D,aAAO,eAAe,IAAI,EAAE,OAAO;AAAA,IACpC;AAGA,QAAI,WAAW;AACd,kBAAY,KAAK,SAAS,aAAa,SAAS,QAAQ,MAAM,SAAS;AACvE,UAAI,aAAa,KAAK,mBAAmB;AACxC,qBAAa,KAAK;AAAA,MACnB;AAAA,IACD;AACA,QAAI,CAAC;AAAW,aAAO;AACvB,gBAAY,KAAK,cAAc,WAAW,CAAC;AAG3C,QAAI,QAAQ,QAAQ;AACpB,QAAI,WAAW;AACf,UAAM,WAAW;AACjB,QAAI,KAAK;AAAoB,iBAAW;AACxC,QAAI,UAA6B,KAAK,aAAa,aAAc,QAAQ;AACzE,UAAM,UAA6B,KAAK,sBAAsB,aAAc,QAAQ;AACpF,QAAI,KAAK;AAA+B,gBAAU;AAClD,QAAI,SAAS,SAAS,QAAQ,OAAO;AACrC,QAAI,UAAU,SAAS,QAAQ,OAAO;AAEtC,QAAK,YAAY,SAAS,SAAS,UAAU,SAAS,KAAO,YAAY,SAAS,SAAS,UAAU,aAAa,GAAI;AACrH,WAAK,MAAM,yBAAyB;AACpC,iBAAW;AACX,gBAAU,KAAK,cAAc,SAAS,GAAG,IAAI;AAAA,IAC9C;AAKA,QAAI,QAAQ;AACX,WAAK,kBAAkB;AACvB,WAAK,kBAAkB;AACvB,eAAS;AACT,UAAI,CAAC;AAAkB,aAAK,IAAI,SAAS,MAAM;AAAA,IAChD;AACA,QAAI,KAAK,iBAAiB;AACzB,WAAK,MAAM,iCAAiC;AAC5C,eAAS,SAAS,QAAQ,SAAS,IAAI;AAAA,IACxC;AACA,QAAI,KAAK,iBAAiB;AACzB,WAAK,MAAM,iCAAiC;AAC5C,gBAAU,OAAO,QAAQ,SAAS,IAAI;AAAA,IACvC;AAIA,QAAI,UAAU,OAAO,WAAW,KAAK;AACpC,eAAS,KAAK,cAAc,KAAK,MAAM,SAAS,CAAC,IAAI,KAAK,CAAC;AAE3D,gBAAU,KAAK,cAAc,KAAK,MAAM,UAAU,CAAC,IAAI,KAAK,CAAC;AAAA,IAC9D;AAGA,QAAI,KAAK,gBAAgB,YAAY,OAAO;AAC3C,gBAAU,KAAK,cAAc,KAAK,MAAM,UAAU,CAAC,GAAG,CAAC;AAAA,IACxD;AAIA,QAAI,SAAS,QAAQ;AACrB,aAAS,KAAK,MAAM,SAAS,CAAC;AAC9B,cAAU;AACV,cAAU;AACV,cAAU;AACV,aAAS,KAAK,MAAM,SAAS,OAAO;AACpC,aAAS,KAAK,cAAc,KAAK,MAAM,SAAS,EAAE,GAAG,GAAG,GAAG;AAC3D,cAAU;AAGV,QAAI,SAAS,SAAS,QAAQ,QAAQ,IAAI,GAAG;AAC5C,gBAAU,KAAK,MAAM,SAAS,CAAC;AAAA,IAChC;AAIA,UAAM,eAAe,KAAK,IAAI,iBAAiB,MAAM,MAAM;AAE3D,QAAI,eAAe,GAAG;AACrB,UAAI,CAAC;AAAkB,aAAK,IAAI,mBAAmB,MAAM;AACzD,gBAAU;AACV,eAAS,KAAK,MAAM,SAAS,EAAE;AAC/B,UAAI,gBAAgB,GAAG;AACtB,kBAAU;AACV,iBAAS,KAAK,MAAM,SAAS,EAAE;AAAA,MAChC;AAAA,IACD;AACA,QAAI,eAAe,GAAG;AACrB,UAAI,CAAC;AAAkB,aAAK,IAAI,aAAa,MAAM;AACnD,gBAAU;AACV,eAAS,KAAK,MAAM,SAAS,EAAE;AAC/B,UAAI,gBAAgB,IAAI;AACvB,kBAAU;AACV,iBAAS,KAAK,MAAM,SAAS,EAAE;AAAA,MAChC;AAAA,IACD;AAIA,QAAI,WAAW;AAAG,aAAO;AAGzB,QAAI,SAAS,GAAG;AACf,gBAAU,KAAK,OAAO,KAAK,GAAG;AAC9B,eAAS,KAAK,MAAM,SAAS,GAAG;AAChC,UAAI,SAAS,OAAO,MAAM,CAAC,OAAO,UAAU,YAAY;AAAG,iBAAS,OAAO;AAC3E,UAAI,OAAO,UAAU,YAAY,KAAK,SAAS,OAAO,UAAU,YAAY,EAAE,IAAI;AACjF,iBAAS,OAAO,UAAU,YAAY,EAAE;AAAA,MACzC;AAAA,IACD;AAGA,WAAO,KAAK,MAAM,MAAM;AAAA,EACzB;AACD;",
  "names": []
}
