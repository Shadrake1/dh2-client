{
  "version": 3,
  "sources": ["../../../../data/mods/m4apaldea/scripts.ts"],
  "sourcesContent": ["export const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n\t\tcustomTiers: ['Mega'],\r\n\t\tcustomDoublesTiers: ['Mega'],\r\n\t},\r\n\tinit() {\r\n\t\tfor (const id in this.dataCache.Pokedex) {\r\n\t\t\tconst pokemon = this.dataCache.Pokedex[id];\r\n\r\n\t\t\tif (pokemon.movepoolAdditions) {\r\n\t\t\t\tfor (const move of pokemon.movepoolAdditions) {\r\n\t\t\t\t\tthis.modData('Learnsets', this.toID(id)).learnset[this.toID(move)] = [\"9M\"];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!pokemon || !pokemon.mega) continue; // weeding out Pok\u00E9mon that aren't new Megas\r\n\t\t\tconst newMega = this.dataCache.Pokedex[pokemon.mega] = {name: pokemon.megaName};\r\n\r\n\t\t\tpokemon.otherFormes = pokemon.otherFormes ? pokemon.otherFormes.concat([newMega.name]) : [pokemon.megaName];\r\n\t\t\tpokemon.formeOrder = pokemon.formeOrder ? pokemon.formeOrder.concat([newMega.name]) : [pokemon.name, pokemon.megaName];\r\n\r\n\t\t\tnewMega.num = pokemon.num;\r\n\t\t\tnewMega.baseSpecies = pokemon.name;\r\n\t\t\tnewMega.forme = \"Mega\";\r\n\r\n\t\t\tnewMega.types = pokemon.megaType || pokemon.types;\r\n\t\t\tnewMega.abilities = pokemon.megaAbility || pokemon.abilities;\r\n\t\t\tnewMega.baseStats = pokemon.megaStats || pokemon.baseStats;\r\n\t\t\tnewMega.heightm = pokemon.megaHeightm || pokemon.heightm;\r\n\t\t\tnewMega.weightkg = pokemon.megaWeightkg || pokemon.weightkg;\r\n\t\t\tnewMega.eggGroups = pokemon.eggGroups;\r\n\t\t\tnewMega.color = pokemon.megaColor || pokemon.color;\r\n\r\n\t\t\tnewMega.creator = pokemon.megaCreator || null;\r\n\t\t\tnewMega.requiredItem = pokemon.megaStone || null;\r\n\t\t\tif (!this.modData('FormatsData', pokemon.mega)) this.data.FormatsData[pokemon.mega] = {tier: \"Mega\", doublesTier: \"Mega\"};\r\n\t\t}\r\n\t},\r\n\r\n\tactions: {\r\n\tcanMegaEvo(pokemon) { // modded for forms\r\n\t\tconst altForme = pokemon.baseSpecies.otherFormes && this.dex.species.get(pokemon.baseSpecies.otherFormes[0]);\r\n\t\tconst item = pokemon.getItem();\r\n\t\tif (\r\n\t\t\taltForme?.isMega && altForme?.requiredMove &&\r\n\t\t\tpokemon.baseMoves.includes(this.toID(altForme.requiredMove)) && !item.zMove\r\n\t\t) {\r\n\t\t\treturn altForme.name;\r\n\t\t}\r\n    // this is where form-specific Megas are defined when that becomes relevant\r\n    /* examples:\r\n\t\tif (item.name === \"Wormadamite\") {\r\n\t\t\tif (pokemon.species.name === \"Wormadam-Sandy\") return \"Wormadam-Sandy-Mega\";\r\n\t\t\telse return null;\r\n\t\t}\r\n\t\tif (item.name === \"Hoopanite\" && pokemon.species.name === \"Hoopa-Unbound\") return null;\r\n    */\r\n\t\tif (item.megaEvolves !== pokemon.species.name || item.megaStone === pokemon.species.name) return null;\r\n\t\treturn item.megaStone;\r\n\t},\r\n\t},\r\n\tpokemon: {\r\n\t\tisGrounded(negateImmunity = false) {\r\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather) return true;\r\n\t\t\tif ('ingrain' in this.volatiles && this.battle.gen >= 4) return true;\r\n\t\t\tif ('smackdown' in this.volatiles) return true;\r\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\r\n\t\t\tif (item === 'ironball') return true;\r\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\r\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !(this.hasType('???') && 'roost' in this.volatiles)) return false;\r\n\t\t\tif (this.hasAbility('levitate') && !this.battle.suppressingAbility(this)) return null;\r\n\t\t\tif ('magnetrise' in this.volatiles) return false;\r\n\t\t\tif ('telekinesis' in this.volatiles) return false;\r\n\t\t\tif ('poolfloaties' in this.volatiles) return false;\r\n\t\t\tfor (const target of this.battle.getAllActive()) {\r\n\t\t\t\tif (target.hasAbility('uplifting')) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn item !== 'airballoon';\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
