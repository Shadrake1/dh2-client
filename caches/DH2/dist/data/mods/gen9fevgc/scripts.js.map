{
  "version": 3,
  "sources": ["../../../../data/mods/gen9fevgc/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n    excludeStandardTiers: true,\r\n    customTiers: ['Reg A', 'Reg B', 'Reg C', 'Reg A NFE', 'Reg A LC', 'Reg B LC', 'Reg C LC'],\r\n\t},\r\n\tpokemon: {\r\n\t\tignoringAbility() {\r\n\t\t\tif (this.battle.gen >= 5 && !this.isActive) return true;\r\n\t\r\n\t\t\t// Certain Abilities won't activate while Transformed, even if they ordinarily couldn't be suppressed (e.g. Disguise)\r\n\t\t\tif (this.getAbility().flags['notransform'] && this.transformed) return true;\r\n\t\t\tif (this.getAbility().flags['cantsuppress']) return false;\r\n\t\t\tif (this.volatiles['gastroacid']) return true;\r\n\t\r\n\t\t\t// Check if any active pokemon have the ability Neutralizing Gas\r\n\t\t\tif (this.hasItem('Ability Shield') || this.ability === ('neutralizinggas' as ID) || \r\n\t\t\t\t this.ability === ('neutralmatch' as ID)) return false;\r\n\t\t\tfor (const pokemon of this.battle.getAllActive()) {\r\n\t\t\t\t// can't use hasAbility because it would lead to infinite recursion\r\n\t\t\t\tif ((pokemon.ability === ('neutralizinggas' as ID) || pokemon.ability === ('neutralmatch' as ID)) &&\r\n\t\t\t\t\t !pokemon.volatiles['gastroacid'] && !pokemon.transformed &&\r\n\t\t\t\t\t !pokemon.abilityState.ending && !this.volatiles['commanding']) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tsetStatus(\r\n\t\t\tstatus: string | Condition,\r\n\t\t\tsource: Pokemon | null = null,\r\n\t\t\tsourceEffect: Effect | null = null,\r\n\t\t\tignoreImmunities = false\r\n\t\t) {\r\n\t\t\tif (!this.hp) return false;\r\n\t\t\tstatus = this.battle.dex.conditions.get(status);\r\n\t\t\tif (this.battle.event) {\r\n\t\t\t\tif (!source) source = this.battle.event.source;\r\n\t\t\t\tif (!sourceEffect) sourceEffect = this.battle.effect;\r\n\t\t\t}\r\n\t\t\tif (!source) source = this;\r\n\t\r\n\t\t\tif (this.status === status.id) {\r\n\t\t\t\tif ((sourceEffect as Move)?.status === this.status) {\r\n\t\t\t\t\tthis.battle.add('-fail', this, this.status);\r\n\t\t\t\t} else if ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\tthis.battle.add('-fail', source);\r\n\t\t\t\t\tthis.battle.attrLastMove('[still]');\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\r\n\t\t\tif (!ignoreImmunities && status.id &&\r\n\t\t\t\t\t!((source?.hasAbility('corrosion') || source?.hasAbility('deeptoxin') || source?.hasAbility('poisonivy')) && ['tox', 'psn'].includes(status.id))) {\r\n\t\t\t\t// the game currently never ignores immunities\r\n\t\t\t\tif (!this.runStatusImmunity(status.id === 'tox' ? 'psn' : status.id)) {\r\n\t\t\t\t\tthis.battle.debug('immune to status');\r\n\t\t\t\t\tif ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst prevStatus = this.status;\r\n\t\t\tconst prevStatusState = this.statusState;\r\n\t\t\tif (status.id) {\r\n\t\t\t\tconst result: boolean = this.battle.runEvent('SetStatus', this, source, sourceEffect, status);\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tthis.battle.debug('set status [' + status.id + '] interrupted');\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.status = status.id;\r\n\t\t\tthis.statusState = {id: status.id, target: this};\r\n\t\t\tif (source) this.statusState.source = source;\r\n\t\t\tif (status.duration) this.statusState.duration = status.duration;\r\n\t\t\tif (status.durationCallback) {\r\n\t\t\t\tthis.statusState.duration = status.durationCallback.call(this.battle, this, source, sourceEffect);\r\n\t\t\t}\r\n\t\r\n\t\t\tif (status.id && !this.battle.singleEvent('Start', status, this.statusState, this, source, sourceEffect)) {\r\n\t\t\t\tthis.battle.debug('status start [' + status.id + '] interrupted');\r\n\t\t\t\t// cancel the setstatus\r\n\t\t\t\tthis.status = prevStatus;\r\n\t\t\t\tthis.statusState = prevStatusState;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (status.id && !this.battle.runEvent('AfterSetStatus', this, source, sourceEffect, status)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tisGrounded(negateImmunity = false) {\r\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather) return true;\r\n\t\t\tif ('ingrain' in this.volatiles && this.battle.gen >= 4) return true;\r\n\t\t\tif ('smackdown' in this.volatiles) return true;\r\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\r\n\t\t\tif (item === 'ironball') return true;\r\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\r\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !(this.hasType('???') && 'roost' in this.volatiles)) return false;\r\n\t\t\tif ((this.hasAbility('levitate') || this.hasAbility('sunlitflight') || this.hasAbility('airdrive') || this.hasAbility('aerialforce') || this.hasAbility('fightandflight')) && !this.battle.suppressingAbility(this)) return null;\r\n\t\t\tif ('magnetrise' in this.volatiles) return false;\r\n\t\t\tif ('telekinesis' in this.volatiles) return false;\r\n\t\t\treturn item !== 'airballoon';\r\n\t\t},\r\n\t\trunImmunity(type: string, message?: string | boolean) {\r\n\t\t\tif (!type || type === '???') return true;\r\n\t\t\tif (!this.battle.dex.types.isName(type)) {\r\n\t\t\t\tthrow new Error(\"Use runStatusImmunity for \" + type);\r\n\t\t\t}\r\n\t\t\tif (this.fainted) return false;\r\n\t\r\n\t\t\tconst negateImmunity = !this.battle.runEvent('NegateImmunity', this, type);\r\n\t\t\tconst notImmune = type === 'Ground' ?\r\n\t\t\t\tthis.isGrounded(negateImmunity) :\r\n\t\t\t\tnegateImmunity || this.battle.dex.getImmunity(type, this);\r\n\t\t\tif (notImmune) return true;\r\n\t\t\tif (!message) return false;\r\n\t\t\tif (notImmune === null) {\r\n\t\t\t\tthis.battle.add('-immune', this, '[from] ability: ' + this.getAbility().name);\r\n\t\t\t} else {\r\n\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\thitStepTryImmunity(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t\tconst hitResults = [];\r\n\t\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\t\tif (this.battle.gen >= 6 && move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\r\n\t\t\t\t\tthis.battle.debug('natural powder immunity');\r\n\t\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t} else if (!this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\r\n\t\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t} else if (this.battle.gen >= 7 && move.pranksterBoosted &&\r\n\t\t\t\t\t!targets[i].isAlly(pokemon) && !this.dex.getImmunity('prankster', target)) {\r\n\t\t\t\t\tthis.battle.debug('natural prankster immunity');\r\n\t\t\t\t\tif (target.illusion || !(move.status && !this.dex.getImmunity(move.status, target))) {\r\n\t\t\t\t\t\tthis.battle.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.battle.add('-immune', target);\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thitResults[i] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn hitResults;\r\n\t\t},\r\n\t\tuseMoveInner(moveOrMoveName, pokemon, target, sourceEffect, zMove, maxMove) {\r\n\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\r\n\t\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\r\n\t\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tpokemon.lastMoveUsed = move;\r\n\t\t\tif (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\r\n\t\t\t\tif (move.id === 'weatherball' && zMove) {\r\n\t\t\t\t\t// Z-Weather Ball only changes types if it's used directly,\r\n\t\t\t\t\t// not if it's called by Z-Sleep Talk or something.\r\n\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\tif (move.type !== 'Normal') sourceEffect = move;\r\n\t\t\t\t}\r\n\t\t\t\tmove = this.getActiveZMove(move, pokemon);\r\n\t\t\t}\r\n\t\t\tif (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\r\n\t\t\t\tif (maxMove && move.category !== 'Status') {\r\n\t\t\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\r\n\t\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\t\t\tthis.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\t\t}\r\n\t\t\t\tmove = this.getActiveMaxMove(move, pokemon);\r\n\t\t\t}\r\n\t\t\tif (this.battle.activeMove) {\r\n\t\t\t\tmove.priority = this.battle.activeMove.priority;\r\n\t\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.battle.activeMove.pranksterBoosted;\r\n\t\t\t}\r\n\t\t\tconst baseTarget = move.target;\r\n\t\t\tlet targetRelayVar = {target};\r\n\t\t\ttargetRelayVar = this.battle.runEvent('ModifyTarget', pokemon, target, move, targetRelayVar, true);\r\n\t\t\tif (targetRelayVar.target !== undefined) target = targetRelayVar.target;\r\n\t\t\telse if (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\tif (move.target === 'self' || move.target === 'allies') {\r\n\t\t\t\ttarget = pokemon;\r\n\t\t\t}\r\n\t\t\tif (sourceEffect) {\r\n\t\t\t\tmove.sourceEffect = sourceEffect.id;\r\n\t\t\t\tmove.ignoreAbility = (sourceEffect as ActiveMove).ignoreAbility;\r\n\t\t\t}\r\n\t\t\tlet moveResult = false;\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t\t// Adjust before the next event so the correct target is passed to the\r\n\t\t\t\t// event\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tmove = this.battle.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\t\tif (baseTarget !== move.target) {\r\n\t\t\t\t// Adjust again\r\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (!move || pokemon.fainted) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tlet attrs = '';\r\n\t\t\tlet movename = move.name;\r\n\t\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\r\n\t\t\tif (sourceEffect) attrs += `|[from]${sourceEffect.fullname}`;\r\n\t\t\tif (zMove && move.isZ === true) {\r\n\t\t\t\tattrs = '|[anim]' + movename + attrs;\r\n\t\t\t\tmovename = 'Z-' + movename;\r\n\t\t\t}\r\n\t\t\tthis.battle.addMove('move', pokemon, movename, target + attrs);\r\n\t\t\tif (zMove) this.runZPower(move, pokemon);\r\n\t\t\tif (!target) {\r\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\t//this.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst {targets, pressureTargets} = pokemon.getMoveTargets(move, target);\r\n\t\t\tif (targets.length) {\r\n\t\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\r\n\t\t\t}\r\n\t\t\tconst callerMoveForPressure = sourceEffect && (sourceEffect as ActiveMove).pp ? sourceEffect as ActiveMove : null;\r\n\t\t\tif (!sourceEffect || callerMoveForPressure || sourceEffect.id === 'pursuit') {\r\n\t\t\t\tlet extraPP = 0;\r\n\t\t\t\tfor (const source of pressureTargets) {\r\n\t\t\t\t\tconst ppDrop = this.battle.runEvent('DeductPP', source, pokemon, move);\r\n\t\t\t\t\tif (ppDrop !== true) {\r\n\t\t\t\t\t\textraPP += ppDrop || 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (extraPP > 0) {\r\n\t\t\t\t\tpokemon.deductPP(callerMoveForPressure || moveOrMoveName, extraPP);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.battle.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\r\n\t\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t\t}\r\n\t\t\tif (/*this.battle.gen !== 4 &&*/ move.selfdestruct === 'always') {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\tlet damage: number | false | undefined | '' = false;\r\n\t\t\tif (['all','foeSide','allySide','allyTeam'].includes(move.target)) {\r\n\t\t\t\tdamage = this.tryMoveHit(targets, pokemon, move);\r\n\t\t\t\tif (damage === this.battle.NOT_FAIL) pokemon.moveThisTurnResult = null;\r\n\t\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\r\n\t\t\t} else if (targets.length) {\r\n\t\t\t\t//if (this.battle.gen === 4 && move.selfdestruct === 'always') {\r\n\t\t\t\t//\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t\t//}\r\n\t\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\r\n\t\t\t} else {\r\n\t\t\t\t//if (!targets.length) {\r\n\t\t\t\t\tthis.battle.attrLastMove('[notarget]');\r\n\t\t\t\t\t//this.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\t\tthis.battle.add('-fail', pokemon);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//}\r\n\t\t\t}\r\n\t\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\r\n\t\t\tif (!pokemon.hp) {\r\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (!moveResult) {\r\n\t\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t!move.negateSecondary &&\r\n\t\t\t\t!(move.hasSheerForce && pokemon.hasAbility(['sheerforce','sirocco','strongarmor','sheerbird','brutebird','frostbite','polarpower','dinomight'])) &&\r\n\t\t\t\t!move.flags['futuremove']\r\n\t\t\t) {\r\n\t\t\t\tconst originalHp = pokemon.hp;\r\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status') {\r\n\t\t\t\t\tconst threshold = pokemon.maxhp * 0.5;\r\n\t\t\t\t\tif (pokemon.hp <= threshold && originalHp > threshold)\r\n\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tmodifyDamage(\r\n\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t\t) {\r\n\t\t\tconst tr = this.battle.trunc;\r\n\t\t\tif (!move.type) move.type = '???';\r\n\t\t\tconst type = move.type;\r\n\t\r\n\t\t\tbaseDamage += 2;\r\n\t\r\n\t\t\tif (move.spreadHit) {\r\n\t\t\t\t// multi-target modifier (doubles only)\r\n\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\r\n\t\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\r\n\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\r\n\t\t\t\t// Parental Bond modifier\r\n\t\t\t\tconst bondModifier = this.battle.gen > 6 ? 0.25 : 0.5;\r\n\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\r\n\t\t\t}\r\n\t\r\n\t\t\t// weather modifier\r\n\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\t\r\n\t\t\t// crit - not a modifier\r\n\t\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\t\tif (isCrit) {\r\n\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.battle.gen >= 6 ? 1.5 : 2)));\r\n\t\t\t}\r\n\t\r\n\t\t\t// random factor - also not a modifier\r\n\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\r\n\t\r\n\t\t\t// STAB\r\n\t\t\t// The \"???\" type never gets STAB\r\n\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t\t// Struggle in the same turn.\r\n\t\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\t\tif (type !== '???') {\r\n\t\t\t\tlet stab: number | [number, number] = 1;\r\n\t\r\n\t\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\r\n\t\t\t\tif (isSTAB) {\r\n\t\t\t\t\tstab = 1.5;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// The Stellar tera type makes this incredibly confusing\r\n\t\t\t\t// If the move's type does not match one of the user's base types,\r\n\t\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\r\n\t\t\t\t//\r\n\t\t\t\t// If the move's type does match one of the user's base types,\r\n\t\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\r\n\t\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\r\n\t\t\t\tif (pokemon.terastallized === 'Stellar') {\r\n\t\t\t\t\tif (!pokemon.stellarBoostedTypes.includes(type)) {\r\n\t\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\r\n\t\t\t\t\t\tif (pokemon.species.name !== 'Terapagos-Stellar') {\r\n\t\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) {\r\n\t\t\t\t\t\tstab = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, stab);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\r\n\t\t\t}\r\n\t\r\n\t\t\t// types\r\n\t\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\r\n\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\t\tif (typeMod > 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\r\n\t\r\n\t\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\t\tbaseDamage *= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeMod < 0) {\r\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\r\n\t\r\n\t\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\r\n\t\r\n\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility(['migrate','unsettling','guts','careless','overguts'])\r\n\t\t\t\t && move.id !== 'facade') {\r\n\t\t\t\t//if (this.battle.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\r\n\t\t\t\t//}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\r\n\t\r\n\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\t\r\n\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\r\n\t\t\t\tthis.battle.add('-zbroken', target);\r\n\t\t\t}\r\n\t\r\n\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\r\n\t\r\n\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\t\treturn tr(baseDamage, 16);\r\n\t\t},\r\n\t\trunMove(\r\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t\t\tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n\t\t) {\r\n\t\t\tpokemon.activeMoveActions++;\r\n\t\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet move = baseMove;\r\n\t\t\tif (zMove) {\r\n\t\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t\t} else if (maxMove) {\r\n\t\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t\t}\r\n\t\r\n\t\t\tmove.isExternal = externalMove;\r\n\t\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\t\r\n\t\t\t/* if (pokemon.moveThisTurn) {\r\n\t\t\t\t// THIS IS PURELY A SANITY CHECK\r\n\t\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\r\n\t\t\t\t// USE this.queue.cancelMove INSTEAD\r\n\t\t\t\tthis.battle.debug('' + pokemon.id + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\treturn;\r\n\t\t\t} */\r\n\t\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n\t\t\tif (!willTryMove) {\r\n\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Used exclusively for a hint later\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t\t\tpokemon.addVolatile(move.id);\r\n\t\t\t}\r\n\t\r\n\t\t\tif (move.beforeMoveCallback) {\r\n\t\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpokemon.lastDamage = 0;\r\n\t\t\tlet lockedMove;\r\n\t\t\tif (!externalMove) {\r\n\t\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\t\tif (!lockedMove) {\r\n\t\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t\t}\r\n\t\r\n\t\t\t// Dancer Petal Dance hack\r\n\t\t\t// TODO: implement properly\r\n\t\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\t\r\n\t\t\tif (zMove) {\r\n\t\t\t\tif (pokemon.illusion) {\r\n\t\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.add('-zpower', pokemon);\r\n\t\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t\t}\r\n\t\r\n\t\t\tconst oldActiveMove = move;\r\n\t\r\n\t\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t\t\tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t\t\t}\r\n\t\r\n\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\t\tif ((move.flags['dance'] || move.flags['sound']) && moveDidSomething && !move.isExternal) {\r\n\t\t\t\tconst dancers = [];\r\n\t\t\t\tfor (const currentPoke of this.battle.getAllActive()) {\r\n\t\t\t\t\tif (pokemon === currentPoke) continue;\r\n\t\t\t\t\tif ((currentPoke.hasAbility('dancer') || currentPoke.hasAbility('parroting')) && !currentPoke.isSemiInvulnerable()) {\r\n\t\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\t\tdancers.sort(\r\n\t\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t\t);\r\n\t\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\r\n\t\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\t\tif (dancer.fainted) continue;\r\n\t\t\t\t\tthis.battle.add('-activate', dancer, 'ability: Parroting');\r\n\t\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\r\n\t\t\t\t\t\ttargetOf1stDance :\r\n\t\t\t\t\t\tpokemon;\r\n\t\t\t\t\tconst dancersTargetLoc = dancer.getLocOf(dancersTarget);\r\n\t\t\t\t\tthis.runMove(move.id, dancer, dancersTargetLoc, this.dex.abilities.get('parroting'), undefined, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t\t\tthis.battle.faintMessages();\r\n\t\t\tthis.battle.checkWin();\r\n\t\r\n\t\t\tif (this.battle.gen <= 4) {\r\n\t\t\t\t// In gen 4, the outermost move is considered the last move for Copycat\r\n\t\t\t\tthis.battle.activeMove = oldActiveMove;\r\n\t\t\t}\r\n\t\t},\r\n\t\tterastallize(pokemon: Pokemon) {\r\n\t\t\tif (pokemon.illusion && ['Ogereena', 'Terapagos'].includes(pokemon.illusion.species.baseSpecies)) {\r\n\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t}\r\n\t\r\n\t\t\tconst type = pokemon.teraType;\r\n\t\t\tthis.battle.add('-terastallize', pokemon, type);\r\n\t\t\tpokemon.terastallized = type;\r\n\t\t\tfor (const ally of pokemon.side.pokemon) {\r\n\t\t\t\tally.canTerastallize = null;\r\n\t\t\t}\r\n\t\t\tpokemon.addedType = '';\r\n\t\t\tpokemon.knownType = true;\r\n\t\t\tpokemon.apparentType = type;\r\n\t\t\tif (pokemon.species.baseSpecies === 'Ogereena') {\r\n\t\t\t\tconst tera = pokemon.species.id === 'ogereena' ? 'tealtera' : 'tera';\r\n\t\t\t\tpokemon.formeChange(pokemon.species.id + tera, null, true);\r\n\t\t\t}\r\n\t\t\tif (pokemon.species.name === 'Terapagos-Terastal' && type === 'Stellar') {\r\n\t\t\t\tpokemon.formeChange('Terapagos-Stellar', null, true);\r\n\t\t\t\tpokemon.baseMaxhp = Math.floor(Math.floor(\r\n\t\t\t\t\t2 * pokemon.species.baseStats['hp'] + pokemon.set.ivs['hp'] + Math.floor(pokemon.set.evs['hp'] / 4) + 100\r\n\t\t\t\t) * pokemon.level / 100 + 10);\r\n\t\t\t\tconst newMaxHP = pokemon.baseMaxhp;\r\n\t\t\t\tpokemon.hp = newMaxHP - (pokemon.maxhp - pokemon.hp);\r\n\t\t\t\tpokemon.maxhp = newMaxHP;\r\n\t\t\t\tthis.battle.add('-heal', pokemon, pokemon.getHealth, '[silent]');\r\n\t\t\t}\r\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
