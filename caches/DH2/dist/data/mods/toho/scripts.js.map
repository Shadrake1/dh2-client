{
  "version": 3,
  "sources": ["../../../../data/mods/toho/scripts.ts"],
  "sourcesContent": ["export const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tgen: 9,\r\n\tinherit: 'gen9',\r\n\tteambuilderConfig: {\r\n\t\t// for micrometas to only show custom tiers\r\n\t\texcludeStandardTiers: true,\r\n\t\t// only to specify the order of custom tiers\r\n\t\tcustomTiers: ['TH'],\r\n\t},\r\n\t\r\n\tpokemon: {\r\n\t\teffectiveWeather() {\r\n\t\t\tconst weather = this.battle.field.effectiveWeather();\r\n\t\t\tswitch (weather) {\r\n\t\t\tcase 'sunnyday':\r\n\t\t\tcase 'desolateland':\r\n\t\t\t\tif (this.hasAbility('shadowshroud')) return '';\r\n\t\t\tcase 'raindance':\r\n\t\t\tcase 'primordialsea':\r\n\t\t\t\tif (this.hasItem('utilityumbrella')) return '';\r\n\t\t\t}\r\n\t\t\treturn weather;\r\n\t\t},\r\n\t},\r\n\t\r\n\tactions: {\r\n\t\trunMove(\r\n\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number, sourceEffect?: Effect | null,\r\n\t\tzMove?: string, externalMove?: boolean, maxMove?: string, originalTarget?: Pokemon\r\n\t\t) {\r\n\t\t\tpokemon.activeMoveActions++;\r\n\t\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet move = baseMove;\r\n\t\t\tif (zMove) {\r\n\t\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t\t} else if (maxMove) {\r\n\t\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t\t}\r\n\r\n\t\t\tmove.isExternal = externalMove;\r\n\r\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\r\n\r\n\t\t\t/* if (pokemon.moveThisTurn) {\r\n\t\t\t\t// THIS IS PURELY A SANITY CHECK\r\n\t\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\r\n\t\t\t\t// USE this.queue.cancelMove INSTEAD\r\n\t\t\t\tthis.battle.debug('' + pokemon.id + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\treturn;\r\n\t\t\t} */\r\n\t\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\r\n\t\t\tif (!willTryMove) {\r\n\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Used exclusively for a hint later\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\r\n\t\t\t\tpokemon.addVolatile(move.id);\r\n\t\t\t}\r\n\r\n\t\t\tif (move.beforeMoveCallback) {\r\n\t\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\r\n\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpokemon.lastDamage = 0;\r\n\t\t\tlet lockedMove;\r\n\t\t\tif (!externalMove) {\r\n\t\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\r\n\t\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\t\tif (!lockedMove) {\r\n\t\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\r\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t\t}\r\n\r\n\t\t\t// Dancer Petal Dance hack\r\n\t\t\t// TODO: implement properly\r\n\t\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t\t\tif (zMove) {\r\n\t\t\t\tif (pokemon.illusion) {\r\n\t\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityState, pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tthis.battle.add('-zpower', pokemon);\r\n\t\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t\t}\r\n\r\n\t\t\tconst oldActiveMove = move;\r\n\r\n\t\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\r\n\t\t\tif (this.battle.activeMove) move = this.battle.activeMove;\r\n\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\r\n\t\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\r\n\t\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\t\tif (move.flags['sound'] && !move.isExternal) {\r\n\t\t\t\tconst sounders = [];\r\n\t\t\t\tfor (const currentPoke of this.battle.getAllActive()) {\r\n\t\t\t\t\tif (pokemon === currentPoke) continue;\r\n\t\t\t\t\tif (currentPoke.hasAbility('echo') && !currentPoke.isSemiInvulnerable()) {\r\n\t\t\t\t\t\tsounders.push(currentPoke);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\t\tsounders.sort(\r\n\t\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t\t);\r\n\t\t\t\tconst targetOf1stSound = this.battle.activeTarget!;\r\n\t\t\t\tfor (const sounder of sounders) {\r\n\t\t\t\t\tif (this.battle.faintMessages()) break;\r\n\t\t\t\t\tif (sounder.fainted) continue;\r\n\t\t\t\t\tthis.battle.add('-activate', sounder, 'ability: Echo');\r\n\t\t\t\t\tconst soundersTarget = !targetOf1stSound.isAlly(sounder) && pokemon.isAlly(sounder) ?\r\n\t\t\t\t\t\ttargetOf1stSound :\r\n\t\t\t\t\t\tpokemon;\r\n\t\t\t\t\tconst soundersTargetLoc = sounder.getLocOf(soundersTarget);\r\n\t\t\t\t\tthis.runMove(move.id, sounder, soundersTargetLoc, this.dex.abilities.get('echo'), undefined, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t\t\tthis.battle.faintMessages();\r\n\t\t\tthis.battle.checkWin();\r\n\r\n\t\t\tif (this.battle.gen <= 4) {\r\n\t\t\t\t// In gen 4, the outermost move is considered the last move for Copycat\r\n\t\t\t\tthis.battle.activeMove = oldActiveMove;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
