{
  "version": 3,
  "sources": ["../../../../data/mods/m4av6/rulesets.ts"],
  "sourcesContent": ["export const Rulesets: {[k: string]: ModdedFormatData} = {\r\n\tmegadatamod: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Mega Data Mod',\r\n\t\tdesc: 'Gives data on stats, Ability and types when a Pok\u00E9mon Mega Evolves or undergoes Ultra Burst.',\r\n\t\tonBegin() {\r\n\t\t\tthis.add(`raw|<img src=\"https://raw.githubusercontent.com/scoopapa/DH/master/data/mods/m4av6/sprites/m4a_banner.png\" height=\"65\" width=\"381\">`);\r\n\t\t\tif (this.format.name === '[Gen 8] M4A Sandbox' || this.format.name === '[Gen 8] M4A VGC Sandbox') {\r\n\t\t\t\tthis.add('-message', `Welcome to the Megas for All Sandbox!`);\r\n\t\t\t\tthis.add('-message', `This is a custom game format where you can experiment outside of the normal rules.`);\r\n\t\t\t\tthis.add('-message', `Thanks to the work of KeroseneZanchu, you can even alter a Pok\u00E9mon's type, stats and Mega form with its nickname!`);\r\n\t\t\t\tthis.add('-message', `You can find the details on how this works here:`);\r\n\t\t\t\tthis.add('-message', `https://docs.google.com/document/d/1hhF49OIQKot72C30mCzSwxYgb3Ephhm9KCL_nMPrCW0/`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add('-message', `Welcome to Megas for All!`);\r\n\t\t\t\tthis.add('-message', `This is a National Dex-based format where we aim to give a new Mega Evolution to every Pok\u00E9mon.`);\r\n\t\t\t\tthis.add('-message', `Just like any official format, you can still only Mega Evolve one Pok\u00E9mon per team!`);\r\n\t\t\t\tthis.add('-message', `You can find our thread and metagame resources here:`);\r\n\t\t\t\tthis.add('-message', `https://www.smogon.com/forums/threads/3671140/`);\r\n\t\t\t}\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\t(pokemon as any).lostItemForDelibird = pokemon.item;\r\n\t\t\t}\r\n\t\t},\r\n\t\tonSwitchIn(pokemon) {\r\n\t\t\tif (pokemon.illusion) {\r\n\t\t\t\tif (pokemon.illusion.species.forme.startsWith('Mega') || pokemon.illusion.species.forme.startsWith('Ultra')) {\r\n\t\t\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.illusion.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (pokemon.species.forme.startsWith('Mega') || pokemon.species.forme.startsWith('Ultra')) {\r\n\t\t\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonDamagingHit(damage, target, source, move) {\r\n\t\t\tif (target.hasAbility('illusion')) {\r\n\t\t\t\tif (target.species.forme.startsWith('Mega') || target.species.forme.startsWith('Ultra')) {\r\n\t\t\t\t\tthis.add('-start', target, 'typechange', target.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst types = target.baseSpecies.types;\r\n\t\t\t\t\tif (target.getTypes().join() === types.join()) {\r\n\t\t\t\t\t\tthis.add('-end', target, 'typechange', '[silent]');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterMega(pokemon) {\r\n\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\r\n\t\t\tconst species = this.dex.species.get(pokemon.species);\r\n\t\t\tconst abilities = this.dex.abilities.get(species.abilities[0]).name;\r\n\t\t\tconst baseStats = species.baseStats;\r\n\t\t\tconst type = species.types[0];\r\n\t\t\tif (species.types[1]) {\r\n\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t}\r\n\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\tif (species.creator) this.hint(`${species.name} was submitted by ${species.creator}!`);\r\n\t\t},\r\n\t},\r\n\tstandardm4a: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Standard M4A',\r\n\t\tdesc: 'The universal banlist used by most standard Megas for All formats.',\r\n\t\tbanlist: [\r\n\t\t\t'AG', 'Uber',\r\n\t\t\t'Arena Trap', 'Moody', 'Power Construct', 'Shadow Tag',\r\n\t\t\t'Baton Pass',\r\n\t\t\t'Bright Powder', 'Lax Incense', 'King\\'s Rock', 'Razor Fang', 'Quick Claw',\r\n\t\t],\r\n\t\tonValidateSet(set) {\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tconst setHas: {[k: string]: true} = {};\r\n\t\t\tconst species = this.dex.species.get(set.species);\r\n\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\tlet tierSpecies = species;\r\n\r\n\t\t\tif (item.megaEvolves === species.name) {\r\n\t\t\t\tif (!item.megaStone) throw new Error(`Item ${item.name} has no base form for mega evolution`);\r\n\t\t\t\ttierSpecies = this.dex.species.get(item.megaStone);\r\n\t\t\t} else if (item.id === 'lycanite' && species.id === 'lycanrocmidnight') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Lycanroc-Midnight-Mega');\r\n\t\t\t} else if (item.id === 'lycanite' && species.id === 'lycanrocdusk') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Lycanroc-Dusk-Mega');\r\n\t\t\t} else if (item.id === 'gourgeite' && species.id === 'gourgeistsmall') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Gourgeist-Small-Mega');\r\n\t\t\t} else if (item.id === 'gourgeite' && species.id === 'gourgeistlarge') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Gourgeist-Large-Mega');\r\n\t\t\t} else if (item.id === 'gourgeite' && species.id === 'gourgeistsuper') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Gourgeist-Super-Mega');\r\n\t\t\t} else if (item.id === 'reginite' && species.id === 'regice') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Regice-Mega');\r\n\t\t\t} else if (item.id === 'reginite' && species.id === 'registeel') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Registeel-Mega');\r\n\t\t\t} else if (item.id === 'meowsticite' && species.id === 'meowsticf') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Meowstic-F-Mega');\r\n\t\t\t} else if (item.id === 'sawsbuckite' && species.id === 'sawsbucksummer') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Sawsbuck-Summer-Mega');\r\n\t\t\t} else if (item.id === 'sawsbuckite' && species.id === 'sawsbuckautumn') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Sawsbuck-Autumn-Mega');\r\n\t\t\t} else if (item.id === 'sawsbuckite' && species.id === 'sawsbuckwinter') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Sawsbuck-Winter-Mega');\r\n\t\t\t} else if (item.id === 'toxtricitite' && species.id === 'toxtricitylowkey') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Toxtricity-Low-Key-Mega');\r\n\t\t\t} else if (item.id === 'slowkinite' && species.id === 'slowkinggalar') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Slowking-Galar-Mega');\r\n\t\t\t} else if (item.id === 'redorb' && species.id === 'groudon') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Groudon-Primal');\r\n\t\t\t} else if (item.id === 'blueorb' && species.id === 'kyogre') {\r\n\t\t\t\ttierSpecies = this.dex.species.get('Kyogre-Primal');\r\n\t\t\t}\r\n\t\t\tconst problem = this.checkSpecies(set, species, tierSpecies, setHas);\r\n\t\t\tif (problem) problems.push(problem);\r\n\r\n\t\t\treturn problems;\r\n\t\t},\r\n\t},\r\n\tstandardm4amonothreat: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Standard M4A Monothreat',\r\n\t\tdesc: 'The universal banlist used by most standard Megas for All Monothreat formats.',\r\n\t\truleset: ['Evasion Moves Clause', 'Species Clause', 'Dynamax Clause', 'Sleep Clause Mod', 'Freeze Clause Mod', 'Mega Data Mod'],\r\n\t\tbanlist: [\r\n\t\t\t// Pok\u00E9mon restrictions\r\n\t\t\t'Arceus', 'Blaziken', 'Calyrex-Ice', 'Calyrex-Shadow', 'Darkrai', 'Deoxys-Base', 'Deoxys-Attack', 'Dialga', 'Dracovish', 'Dragapult',\r\n\t\t\t'Eternatus', 'Genesect', 'Giratina', 'Giratina-Origin', 'Greninja-Ash', 'Groudon', 'Ho-oh', 'Hoopa-Unbound', 'Kartana',\r\n\t\t\t'Kyogre', 'Kyurem-B', 'Kyurem-W', 'Landorus-Base', 'Lugia', 'Lunala', 'Magearna', 'Marshadow', 'Mewtwo', 'Naganadel', 'Necrozma-DW',\r\n\t\t\t'Necrozma-DM', 'Palkia', 'Pheromosa', 'Rayquaza', 'Reshiram', 'Shaymin-Sky', 'Solgaleo', 'Spectrier', 'Urshifu-Base', 'Xerneas', 'Yveltal', 'Zacian',\r\n\t\t\t'Zacian-Crowned', 'Zamazenta', 'Zamazenta-Crowned', 'Zekrom', 'Zygarde-Base',\r\n\r\n\t\t\t// Ability restrictions\r\n\t\t\t'Moody', 'Shadow Tag', 'Power Construct', 'Battle Bond',\r\n\r\n\t\t\t// Move restrictions\r\n\t\t\t'Baton Pass',\r\n\r\n\t\t\t// Item Restrictions\r\n\t\t\t'Blastoisinite', 'Damp Rock', 'Gengarite', 'Kangaskhanite', 'Lucarionite', 'Mawilite', 'Medichamite', 'Metagrossite', 'Salamencite', 'Smooth Rock', 'Terrain Extender',\r\n\t\t\t// Banned M4A Stones\r\n\t\t\t'Butterfrite', 'Cinderite',\r\n\t\t],\r\n\t},\r\n\r\n\tmegahintmod: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Mega Hint Mod',\r\n\t\tdesc: 'At the start of a battle, gives each player information about the potential Mega in their party',\r\n\t\tonBegin() {\r\n\t\t\tthis.add('-message', 'Your Mega Evolution this match is:');\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\tif (pokemon.canMegaEvo) {\r\n\t\t\t\t\tconst mega = this.dex.species.get(pokemon.canMegaEvo);\r\n\t\t\t\t\tconst baseStats = mega.baseStats;\r\n\t\t\t\t\tlet types = mega.types[0];\r\n\t\t\t\t\tif (mega.types[1]) {\r\n\t\t\t\t\t\ttypes += `/${mega.types[1]}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet msg = ``;\r\n\t\t\t\t\tif (mega.name === \"Mimikyu-Mega\") {\r\n\t\t\t\t\t\tmsg += `; Mega Mimikyu has two forms! If its Disguise is busted, it will Mega Evolve into Mimikyu-Busted-Mega. Use /dt for more info.`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst ability = this.dex.abilities.get(mega.abilities[0]);\r\n\t\t\t\t\tlet txt = `${mega.name} (${types}); `;\r\n\t\t\t\t\ttxt += `Ability: ${ability.name} (${ability.shortDesc}); `;\r\n\t\t\t\t\ttxt += `Stats: ${baseStats.hp} HP / ${baseStats.atk} Atk / ${baseStats.def} Def / ${baseStats.spa} SpA / ${baseStats.spd} SpD / ${baseStats.spe} Spe;${msg}`;\r\n\t\t\t\t\tthis.hint(txt, true, pokemon.side);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.add('-message', 'Use the command /dt for more information!');\r\n\t\t},\r\n\t},\r\n\r\n\tsametypeclause: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Same Type Clause',\r\n\t\tdesc: \"Forces all Pok&eacute;mon on a team to share a type with each other\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Same Type Clause: Pok\u00E9mon in a team must share a type');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tlet typeTable: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (i === 0) {\r\n\t\t\t\t\ttypeTable = species.types;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeTable = typeTable.filter(type => species.types.includes(type));\r\n\t\t\t\t}\r\n\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\ttypeTable = typeTable.filter(type => species.types.includes(type));\r\n\t\t\t\t}\r\n\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\ttypeTable = typeTable.filter(type => species.types.includes(type));\r\n\t\t\t\t}\r\n\t\t\t\tif (item.id === \"mimikyunite\" && species.baseSpecies === \"Mimikyu\") {\r\n\t\t\t\t\t// Mega Mimikyu is banned from Fairy Mono and this enforces that\r\n\t\t\t\t\tspecies = this.dex.species.get(\"Mimikyu-Busted-Mega\");\r\n\t\t\t\t\ttypeTable = typeTable.filter(type => species.types.includes(type));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tmonothreatnormal: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Normal',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Normal-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Normal-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Normal';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatfire: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Fire',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Fire-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Fire-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Fire';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatwater: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Water',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Water-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Water-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Water';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatelectric: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Electric',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Electric-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Electric-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Electric';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatgrass: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Grass',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Grass-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Grass-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Grass';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatice: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Ice',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Ice-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Ice-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Ice';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatfighting: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Fighting',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Fighting-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Fighting-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Fighting';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatpoison: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Poison',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Poison-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Poison-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Poison';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatground: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Ground',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Ground-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Ground-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Ground';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatflying: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Flying',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Flying-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Flying-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Flying';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatpsychic: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Psychic',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Psychic-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Psychic-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Psychic';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatbug: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Bug',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Bug-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Bug-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Bug';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatrock: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Rock',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Rock-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Rock-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Rock';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatghost: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Ghost',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Ghost-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Ghost-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Ghost';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatdragon: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Dragon',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Dragon-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Dragon-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Dragon';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatdark: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Dark',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Dark-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Dark-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Dark';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatsteel: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Steel',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Steel-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Steel-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Steel';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmonothreatfairy: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Monothreat Fairy',\r\n\t\tdesc: \"Forces all Pok&eacute;mon to be Fairy-type.\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Monothreat: only Fairy-type Pokemon are allowed');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst teamType = 'Fairy';\r\n\t\t\t// let typeTable: string[] = [];\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tlet species = this.dex.species.get(set.species);\r\n\t\t\t\tif (!species.types) return [`Invalid pokemon ${set.name || set.species}`];\r\n\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(item.megaStone);\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (item.id === \"ultranecroziumz\" && species.baseSpecies === \"Necrozma\") {\r\n\t\t\t\t\t\tspecies = this.dex.species.get(\"Necrozma-Ultra\");\r\n\t\t\t\t\t\tif (!species.types.includes(teamType)) {\r\n\t\t\t\t\t\t\tproblems.push(species + \" is not \" + teamType + \" type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmegasonlymod: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Megas Only Mod',\r\n\t\tdesc: \"Forces all Pok&eacute;mon on a team to hold a valid Mega Stone. But you still only get to Mega Evolve one!\",\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Megas Only Mod: Forces all Pok&eacute;mon on a team to hold a valid Mega Stone, but you still can only Mega Evolve one!');\r\n\t\t},\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const [i, set] of team.entries()) {\r\n\t\t\t\tconst species = this.dex.species.get(set.species);\r\n\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\t\t\t\tif (item.megaStone && species.baseSpecies === item.megaEvolves) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tproblems.push(species + \" is not holding a Mega Stone it can use to Mega Evolve.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn problems;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
