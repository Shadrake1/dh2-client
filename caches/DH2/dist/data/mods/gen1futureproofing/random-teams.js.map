{
  "version": 3,
  "sources": ["../../../../data/mods/gen1futureproofing/random-teams.ts"],
  "sourcesContent": ["import RandomGen2Teams from '../gen2/random-teams';\r\n\r\nexport class RandomGen1Teams extends RandomGen2Teams {\r\n\t// Challenge Cup or CC teams are basically fully random teams.\r\n\trandomCCTeam() {\r\n\t\tconst team = [];\r\n\r\n\t\tconst hasDexNumber: {[k: string]: number} = {};\r\n\t\tconst formes: string[][] = [[], [], [], [], [], []];\r\n\r\n\t\t// Pick six random Pok\u00E9mon, no repeats.\r\n\t\tlet num: number;\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tdo {\r\n\t\t\t\tnum = this.random(151) + 1;\r\n\t\t\t} while (num in hasDexNumber);\r\n\t\t\thasDexNumber[num] = i;\r\n\t\t}\r\n\r\n\t\tlet formeCounter = 0;\r\n\t\tfor (const id in this.dex.data.Pokedex) {\r\n\t\t\tif (!(this.dex.data.Pokedex[id].num in hasDexNumber)) continue;\r\n\t\t\tconst species = this.dex.species.get(id);\r\n\t\t\tconst lsetData = this.dex.getLearnsetData(id as ID);\r\n\t\t\tif (!lsetData.learnset || species.forme) continue;\r\n\t\t\tformes[hasDexNumber[species.num]].push(species.name);\r\n\t\t\tif (++formeCounter >= 6) {\r\n\t\t\t\t// Gen 1 had no alternate formes, so we can break out of the loop already.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\t// Choose forme.\r\n\t\t\tconst poke = this.sample(formes[i]);\r\n\t\t\tconst species = this.dex.species.get(poke);\r\n\t\t\tconst lsetData = this.dex.getLearnsetData(species.id);\r\n\r\n\t\t\t// Level balance: calculate directly from stats rather than using some silly lookup table.\r\n\t\t\tconst mbstmin = 1307;\r\n\t\t\tconst stats = species.baseStats;\r\n\r\n\t\t\t// Modified base stat total assumes 15 DVs, 255 EVs in every stat\r\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 30 + 63 + 100) + 10;\r\n\t\t\tmbst += (stats[\"atk\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"def\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spa\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spd\"] * 2 + 30 + 63 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spe\"] * 2 + 30 + 63 + 100) + 5;\r\n\r\n\t\t\tlet level = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\r\n\r\n\t\t\twhile (level < 100) {\r\n\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 30 + 63 + 100) * level / 100 + 10);\r\n\t\t\t\t// Since damage is roughly proportional to lvl\r\n\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n\r\n\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\tlevel++;\r\n\t\t\t}\r\n\r\n\t\t\t// Random DVs.\r\n\t\t\tconst ivs = {\r\n\t\t\t\thp: 0,\r\n\t\t\t\tatk: this.random(16),\r\n\t\t\t\tdef: this.random(16),\r\n\t\t\t\tspa: this.random(16),\r\n\t\t\t\tspd: 0,\r\n\t\t\t\tspe: this.random(16),\r\n\t\t\t};\r\n\t\t\tivs[\"hp\"] = (ivs[\"atk\"] % 2) * 16 + (ivs[\"def\"] % 2) * 8 + (ivs[\"spe\"] % 2) * 4 + (ivs[\"spa\"] % 2) * 2;\r\n\t\t\tivs[\"atk\"] = ivs[\"atk\"] * 2;\r\n\t\t\tivs[\"def\"] = ivs[\"def\"] * 2;\r\n\t\t\tivs[\"spa\"] = ivs[\"spa\"] * 2;\r\n\t\t\tivs[\"spd\"] = ivs[\"spa\"];\r\n\t\t\tivs[\"spe\"] = ivs[\"spe\"] * 2;\r\n\r\n\t\t\t// Maxed EVs.\r\n\t\t\tconst evs = {hp: 255, atk: 255, def: 255, spa: 255, spd: 255,\tspe: 255};\r\n\r\n\t\t\t// Four random unique moves from movepool. don't worry about \"attacking\" or \"viable\".\r\n\t\t\t// Since Gens 1 and 2 learnsets are shared, we need to weed out Gen 2 moves.\r\n\t\t\tlet moves;\r\n\t\t\tconst pool: string[] = [];\r\n\t\t\tif (lsetData.learnset) {\r\n\t\t\t\tfor (const move in lsetData.learnset) {\r\n\t\t\t\t\tif (this.dex.moves.get(move).gen !== 1) continue;\r\n\t\t\t\t\tif (lsetData.learnset[move].some(learned => learned[0] === '1')) {\r\n\t\t\t\t\t\tpool.push(move);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (pool.length <= 4) {\r\n\t\t\t\tmoves = pool;\r\n\t\t\t} else {\r\n\t\t\t\tmoves = [\r\n\t\t\t\t\tthis.sampleNoReplace(pool), this.sampleNoReplace(pool),\r\n\t\t\t\t\tthis.sampleNoReplace(pool), this.sampleNoReplace(pool),\r\n\t\t\t\t];\r\n\t\t\t}\r\n\r\n\t\t\tteam.push({\r\n\t\t\t\tname: poke,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tmoves: moves,\r\n\t\t\t\tgender: false,\r\n\t\t\t\tability: 'None',\r\n\t\t\t\tevs: evs,\r\n\t\t\t\tivs: ivs,\r\n\t\t\t\titem: '',\r\n\t\t\t\tlevel: level,\r\n\t\t\t\thappiness: 0,\r\n\t\t\t\tshiny: false,\r\n\t\t\t\tnature: 'Serious',\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\t// Random team generation for Gen 1 Random Battles.\r\n\trandomTeam() {\r\n\t\t// Get what we need ready.\r\n\t\tlet pokemonLeft = 0;\r\n\t\tconst pokemon = [];\r\n\r\n\t\tconst handicapMons = ['magikarp', 'weedle', 'kakuna', 'caterpie', 'metapod', 'ralts'];\r\n\t\tconst nuTiers = ['UU', 'UUBL', 'NFE', 'LC', 'NU', 'PU'];\r\n\t\tconst uuTiers = ['NFE', 'UU', 'UUBL', 'NU', 'PU'];\r\n\r\n\t\tconst pokemonPool = [];\r\n\t\tfor (const id in this.dex.data.FormatsData) {\r\n\t\t\tconst species = this.dex.species.get(id);\r\n\t\t\tif (!species.isNonstandard && species.randomBattleMoves) {\r\n\t\t\t\tpokemonPool.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now let's store what we are getting.\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst weaknessCount: {[k: string]: number} = {Electric: 0, Psychic: 0, Water: 0, Ice: 0, Ground: 0};\r\n\t\tlet uberCount = 0;\r\n\t\tlet nuCount = 0;\r\n\t\tlet hasShitmon = false;\r\n\r\n\t\twhile (pokemonPool.length && pokemonLeft < 6) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Bias the tiers so you get less shitmons and only one of the two Ubers.\r\n\t\t\t// If you have a shitmon, don't get another\r\n\t\t\tif (handicapMons.includes(species.id) && hasShitmon) continue;\r\n\r\n\t\t\tconst tier = species.tier;\r\n\t\t\tswitch (tier) {\r\n\t\t\tcase 'LC':\r\n\t\t\tcase 'NFE':\r\n\t\t\t\t// Don't add pre-evo mon if already 4 or more non-OUs, or if already 3 or more non-OUs with one being a shitmon\r\n\t\t\t\t// Regardless, pre-evo mons are slightly less common.\r\n\t\t\t\tif (nuCount > 3 || (hasShitmon && nuCount > 2) || this.randomChance(1, 3)) continue;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Uber':\r\n\t\t\t\t// If you have one of the worst mons we allow luck to give you all Ubers.\r\n\t\t\t\tif (uberCount >= 1 && !hasShitmon) continue;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t// OUs are fine. Otherwise 50% chance to skip mon if already 4 or more non-OUs.\r\n\t\t\t\tif (uuTiers.includes(tier) && pokemonPool.length > 1 && (nuCount > 3 && this.randomChance(1, 2))) continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet skip = false;\r\n\r\n\t\t\t// Limit 2 of any type as well. Diversity and minor weakness count.\r\n\t\t\t// The second of a same type has halved chance of being added.\r\n\t\t\tfor (const type of species.types) {\r\n\t\t\t\tif (typeCount[type] > 1 || (typeCount[type] === 1 && this.randomChance(1, 2) && pokemonPool.length > 1)) {\r\n\t\t\t\t\tskip = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (skip) continue;\r\n\r\n\t\t\t// We need a weakness count of spammable attacks to avoid being swept by those.\r\n\t\t\t// Spammable attacks are: Thunderbolt, Psychic, Surf, Blizzard, Earthquake.\r\n\t\t\tconst pokemonWeaknesses = [];\r\n\t\t\tfor (const type in weaknessCount) {\r\n\t\t\t\tconst increaseCount = this.dex.getImmunity(type, species) && this.dex.getEffectiveness(type, species) > 0;\r\n\t\t\t\tif (!increaseCount) continue;\r\n\t\t\t\tif (weaknessCount[type] >= 2) {\r\n\t\t\t\t\tskip = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tpokemonWeaknesses.push(type);\r\n\t\t\t}\r\n\r\n\t\t\tif (skip) continue;\r\n\r\n\t\t\t// The set passes the limitations.\r\n\t\t\tconst set = this.randomSet(species);\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Now let's increase the counters. First, the Pok\u00E9mon left.\r\n\t\t\tpokemonLeft++;\r\n\r\n\t\t\t// Type counter.\r\n\t\t\tfor (const type of species.types) {\r\n\t\t\t\tif (typeCount[type]) {\r\n\t\t\t\t\ttypeCount[type]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[type] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Weakness counter.\r\n\t\t\tfor (const weakness of pokemonWeaknesses) {\r\n\t\t\t\tweaknessCount[weakness]++;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment tier bias counters.\r\n\t\t\tif (tier === 'Uber') {\r\n\t\t\t\tuberCount++;\r\n\t\t\t} else if (nuTiers.includes(tier)) {\r\n\t\t\t\tnuCount++;\r\n\t\t\t}\r\n\r\n\t\t\t// Is it Magikarp or one of the useless bugs?\r\n\t\t\tif (handicapMons.includes(species.id)) hasShitmon = true;\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\t/**\r\n\t * Random set generation for Gen 1 Random Battles.\r\n\t */\r\n\trandomSet(species: string | Species): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tif (!species.exists) species = this.dex.species.get('pikachu'); // Because Gen 1.\r\n\r\n\t\tconst movePool = species.randomBattleMoves ? species.randomBattleMoves.slice() : [];\r\n\t\tlet moves: string[] = [];\r\n\t\tconst hasType: {[k: string]: true} = {};\r\n\t\thasType[species.types[0]] = true;\r\n\t\tif (species.types[1]) hasType[species.types[1]] = true;\r\n\t\tlet hasMove: {[k: string]: true} = {};\r\n\t\tlet counter: {[k: string]: number} = {};\r\n\t\t// const setupType = '';\r\n\r\n\t\t// Moves that boost Attack:\r\n\t\tconst PhysicalSetup = ['swordsdance', 'sharpen'];\r\n\t\t// Moves which boost Special Attack:\r\n\t\tconst SpecialSetup = ['amnesia', 'growth'];\r\n\r\n\t\t// Either add all moves or add none\r\n\t\tif (species.comboMoves) {\r\n\t\t\tif (this.randomChance(1, 2)) {\r\n\t\t\t\tmoves = moves.concat(species.comboMoves);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add one of the semi-mandatory moves\r\n\t\t// Often, these are used so that the Pokemon only gets one of the less useful moves\r\n\t\tif (moves.length < 4 && species.exclusiveMoves) {\r\n\t\t\tmoves.push(this.sample(species.exclusiveMoves));\r\n\t\t}\r\n\r\n\t\t// Add the mandatory move. SD Mew and Amnesia Snorlax are exceptions.\r\n\t\tif (moves.length < 4 && species.essentialMove) {\r\n\t\t\tmoves.push(species.essentialMove);\r\n\t\t}\r\n\r\n\t\twhile (moves.length < 4 && movePool.length) {\r\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\r\n\t\t\twhile (moves.length < 4 && movePool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\r\n\t\t\t\tmoves.push(moveid);\r\n\t\t\t}\r\n\r\n\t\t\t// Only do move choosing if we have backup moves in the pool...\r\n\t\t\tif (movePool.length) {\r\n\t\t\t\thasMove = {};\r\n\t\t\t\tcounter = {Physical: 0, Special: 0, Status: 0, physicalsetup: 0, specialsetup: 0};\r\n\t\t\t\tfor (const setMoveid of moves) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(setMoveid);\r\n\t\t\t\t\tconst moveid = move.id;\r\n\t\t\t\t\thasMove[moveid] = true;\r\n\t\t\t\t\tif (!move.damage && !move.damageCallback) {\r\n\t\t\t\t\t\tcounter[move.category]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (PhysicalSetup.includes(moveid)) {\r\n\t\t\t\t\t\tcounter['physicalsetup']++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (SpecialSetup.includes(moveid)) {\r\n\t\t\t\t\t\tcounter['specialsetup']++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if (counter['specialsetup']) {\r\n\t\t\t\t// \tsetupType = 'Special';\r\n\t\t\t\t// } else if (counter['physicalsetup']) {\r\n\t\t\t\t// \tsetupType = 'Physical';\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tfor (const [i, moveid] of moves.entries()) {\r\n\t\t\t\t\tif (moveid === species.essentialMove) continue;\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tlet rejected = false;\r\n\t\t\t\t\tif (!species.essentialMove || moveid !== species.essentialMove) {\r\n\t\t\t\t\t\tswitch (moveid) {\r\n\t\t\t\t\t\t// bit redundant to have both, but neither particularly better than the other\r\n\t\t\t\t\t\tcase 'hydropump':\r\n\t\t\t\t\t\t\tif (hasMove['surf']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'surf':\r\n\t\t\t\t\t\t\tif (hasMove['hydropump']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// other redundancies that aren't handled within the movesets themselves\r\n\t\t\t\t\t\tcase 'selfdestruct':\r\n\t\t\t\t\t\t\tif (hasMove['rest']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'rest':\r\n\t\t\t\t\t\t\tif (hasMove['selfdestruct']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'sharpen':\r\n\t\t\t\t\t\tcase 'swordsdance':\r\n\t\t\t\t\t\t\tif (counter['Special'] > counter['Physical'] || !counter['Physical'] || hasMove['growth']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'growth':\r\n\t\t\t\t\t\t\tif (counter['Special'] < counter['Physical'] || !counter['Special'] || hasMove['swordsdance']) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'poisonpowder':\r\n\t\t\t\t\t\tcase 'stunspore':\r\n\t\t\t\t\t\tcase 'sleeppowder':\r\n\t\t\t\t\t\tcase 'toxic':\r\n\t\t\t\t\t\t\tif (counter['Status'] > 1) rejected = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} // End of switch for moveid\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rejected) {\r\n\t\t\t\t\t\tmoves.splice(i, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcounter[move.category]++;\r\n\t\t\t\t} // End of for\r\n\t\t\t} // End of the check for more than 4 moves on moveset.\r\n\t\t}\r\n\r\n\t\tconst levelScale: {[k: string]: number} = {\r\n\t\t\tLC: 88,\r\n\t\t\tNFE: 80,\r\n   \t\tPU: 78,\r\n\t\t\tNU: 77,\r\n\t\t\tNUBL: 76,\r\n\t\t\tUU: 74,\r\n\t\t\tOU: 68,\r\n\t\t\tUber: 65,\r\n\t\t};\r\n\r\n\t\tconst customScale: {[k: string]: number} = {\r\n\t\t\tMewtwo: 62,\r\n      \tYveltal: 64,\r\n\t\t\tCaterpie: 99, Metapod: 99, Weedle: 99, Kakuna: 99, Magikarp: 99, Ralts: 99, Milcery: 90, Kirlia: 84,\r\n\t\t\tDitto: 88,\r\n\t\t};\r\n\t\tlet level = levelScale[species.tier] || 80;\r\n\t\tif (customScale[species.name]) level = customScale[species.name];\r\n\r\n\t\treturn {\r\n\t\t\tname: species.name,\r\n\t\t\tspecies: species.name,\r\n\t\t\tmoves: moves,\r\n\t\t\tability: 'None',\r\n\t\t\tevs: {hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255},\r\n\t\t\tivs: {hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30},\r\n\t\t\titem: '',\r\n\t\t\tlevel: level,\r\n\t\t\tshiny: false,\r\n\t\t\tgender: false,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default RandomGen1Teams;\r\n\r\n"],
  "mappings": "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",
  "names": ["RandomGen2Teams"]
}
