{
  "version": 3,
  "sources": ["../../../../data/mods/maadowr/moves.ts"],
  "sourcesContent": ["export const Moves: { [moveid: string]: ModdedMoveData } = {\r\n\taloevera: {\r\n\t\tnum: -1,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 100,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"All grounded Grass Pok\u00E9mon on the field have their Atk and SpA raised by 1 stage.\",\r\n\t\tname: \"Aloe Vera\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tonAfterHit(target, source, move) {\r\n\t\t\tconst targets = [];\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tfor (const pokemon of side.active) {\r\n\t\t\t\t\tif (pokemon && !pokemon.fainted && pokemon.hasType('Grass') && pokemon.isGrounded()) {\r\n\t\t\t\t\t\ttargets.push(pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!targets.length) return false;\r\n\t\r\n\t\t\tfor (const pokemon of targets) {\r\n\t\t\t\tthis.boost({atk: 1, spa: 1}, pokemon, source, move);\r\n\t\t\t\tthis.add('-message', `${pokemon.name}'s Attack and Special Attack were boosted by Aloe Vera!`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Grass\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\t\r\n  // end\r\n\r\n  // start\r\n  clivejump: {\r\n\t\tnum: -2,\r\n\t\taccuracy: 95,\r\n\t\tbasePower: 85,\r\n\t\tcategory: \"Physical\",\r\n\t   shortDesc: \"Lowers target's Def by 1 stage, 2 in Tailwind.\",\r\n\t\tname: \"Clive Jump\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1},\r\n\t\tsecondary: {\r\n\t\t\tchance: 100,\r\n\t\t\tonHit(target, source) {\r\n\t\t\t  // Check if Tailwind is active on the user's side\r\n\t\t\t  if (source.side.sideConditions['tailwind']) {\r\n\t\t\t\tthis.boost({def: -2}, target);\r\n\t\t\t  } else {\r\n\t\t\t\tthis.boost({def: -1}, target);\r\n\t\t\t  }\r\n\t\t\t},\r\n\t\t  },\r\n\t target: \"normal\",\r\n\t type: \"Rock\",\r\n    contestType: \"Cool\",\r\n\t},\r\n  // end\r\n\r\n  // start\r\n  coldrush: {\r\n\tnum: -3,\r\n\taccuracy: 100,\r\n\tbasePower: 120,\r\n\tcategory: \"Physical\",\r\n\tshortDesc: \"This move hits in two turns and sets Snow.\",\r\n\tname: \"Cold Rush\",\r\n\tpp: 10,\r\n\tpriority: 0,\r\n\tflags: {allyanim: 1, metronome: 1, futuremove: 1},\r\n\tignoreImmunity: true,\r\n\tonTryMove() {\r\n\t\tthis.attrLastMove('[still]');\r\n\t\treturn true;\r\n\t},\r\n\tonTry(source, target) {\r\n\t\tthis.add('-anim', source, 'Future Sight', target);\r\n\t\tif (!target.side.addSlotCondition(target, 'futuremove')) return false;\r\n\t\tObject.assign(target.side.slotConditions[target.position]['futuremove'], {\r\n\t\t\tduration: 3,\r\n\t\t\tmove: 'coldrush',\r\n\t\t\tsource: source,\r\n\t\t\tmoveData: {\r\n\t\t\t\tid: 'coldrush',\r\n\t\t\t\tname: \"Cold Rush\",\r\n\t\t\t\taccuracy: 100,\r\n\t\t\t\tbasePower: 120,\r\n\t\t\t\tcategory: \"Physical\",\r\n\t\t\t\tpriority: 0,\r\n\t\t\t\tflags: {allyanim: 1, metronome: 1, futuremove: 1},\r\n\t\t\t\tignoreImmunity: false,\r\n\t\t\t\tonAfterMoveSecondary(this: Battle) {\r\n\t\t\t\t\tthis.field.setWeather('snow');\r\n\t\t\t\t},\r\n\t\t\t\tonPrepareHit(this: Battle, target: Pokemon, source: Pokemon) {\r\n\t\t\t\t\tthis.add('-anim', source, 'Doom Desire', target);\r\n\t\t\t\t},\r\n\t\t\t\teffectType: 'Move',\r\n\t\t\t\ttype: 'Ice',\r\n\t\t\t},\r\n\t\t});\r\n\t\tthis.add('-start', source, 'move: Cold Rush');\r\n\t\treturn this.NOT_FAIL;\r\n\t},\r\n\tsecondary: null,\r\n\ttarget: \"normal\",\r\n\ttype: \"Ice\",\r\n\tcontestType: \"Cool\",\r\n},\r\n  // end\r\n\r\n  // start\r\n  colourmegone: {\r\n    num: -4,\r\n    accuracy: 100,\r\n    basePower: 60,\r\n    category: \"Physical\",\r\n    shortDesc: \"User's primary type changes to an ally's primary type before attacking.\",\r\n    name: \"Colour Me Gone\",\r\n    pp: 10,\r\n    priority: 1,\r\n    flags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n    \r\n    onModifyType(move, pokemon, target) {\r\n        let newType = null;\r\n        \r\n        // Find an ally with a different primary type\r\n        for (const ally of pokemon.side.active) {\r\n            if (ally && !ally.fainted && ally !== pokemon) {\r\n                if (ally.types[0] !== pokemon.types[0] && ally.types[0] !== pokemon.types[1]) {\r\n                    newType = ally.types[0];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If a new type is found, change the user's primary type and the move's type\r\n        if (newType) {\r\n            pokemon.setType(newType);\r\n            this.add('-start', pokemon, 'typechange', newType);\r\n            move.type = newType;\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// Set the move's type to match the user's current primary type\r\n        move.type = pokemon.types[0];\r\n    },\r\n    \r\n    onTryMove(pokemon, target, move) {\r\n        this.attrLastMove('[still]');\r\n    },\r\n    \r\n    onHit(target, source, move) {\r\n        // The actual damage-dealing part of the move\r\n        // This will run after the type change\r\n    },\r\n\r\n    target: \"normal\",\r\n    type: \"Normal\",\r\n    contestType: \"Cool\",\r\n},\r\n\t  \r\n  // end\r\n\r\n  // start\r\n  cuttingedge: {\r\n\t\tnum: -5,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 85,\r\n\t\tcategory: \"Physical\",\r\n\t   shortDesc: \"This move does 50% more damage in Grassy Terrain.\",\r\n\t\tname: \"Cutting Edge\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1, slicing: 1},\r\n\t\tsecondary: null,\r\n\t\tonBasePower(basePower, source) {\r\n\t\t\tif (this.field.isTerrain('grassyterrain')) {\r\n\t\t\t\tthis.debug('cuttingedge grassy terrain boost');\r\n\t\t\t\treturn this.chainModify(1.5);\r\n\t\t\t}\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ground\",\r\n\t   contestType: \"Cool\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n   dispersion: {\r\n\t\tnum: -6,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Type based on user's primary type. Hits foes.\",\r\n\t\tname: \"Dispersion\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, dance: 1},\r\n\t\tonPrepareHit(target, source, move) {\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t\tthis.add('-anim', source, \"Silver Wind\", target);\r\n\t\t},\r\n\t\tonModifyType(move, pokemon) {\r\n\t\t\tlet type = pokemon.types[0];\r\n\t\t\tif (type === \"Bird\") type = \"???\";\r\n\t\t\tmove.type = type;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allAdjacentFoes\",\r\n\t\ttype: \"Normal\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tenragedassault: {\r\n\t\tnum: -7,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tbasePowerCallback(pokemon) {\r\n\t\t\treturn Math.min(350, 50 + 50 * pokemon.timesAttacked);\r\n\t\t},\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Like Rage Fist but no punch move.\",\r\n\t\tname: \"Enraged Assault\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Cool\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tentanglement: {\r\n\t\tnum: -8,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Sets Sticky Web in Electric Terrain.\",\r\n\t\tname: \"Entanglement\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tonAfterHit(target, source, move) {\r\n\t\t\tif (!move.hasSheerForce && source.hp && (this.field.isTerrain('electricterrain'))) {\r\n\t\t\t\tfor (const side of source.side.foeSidesWithConditions()) {\r\n\t\t\t\t\tside.addSideCondition('stickyweb');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterSubDamage(damage, target, source, move) {\r\n\t\t\tif (!move.hasSheerForce && source.hp && (this.field.isTerrain('electricterrain'))) {\r\n\t\t\t\tfor (const side of source.side.foeSidesWithConditions()) {\r\n\t\t\t\t\tside.addSideCondition('stickyweb');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: {}, // Sheer Force-boosted\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Cool\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tenzymaticbite: {\r\n\t\tnum: -9,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 85,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Recovers half of the damage done to the target, 3/4 in Psychic Terrain.\",\r\n\t\tname: \"Enzymatic Bite\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, heal: 1, metronome: 1, bite: 1},\r\n\t\tdrain: [1, 2],\r\n\t\tonModifyMove(move, source, target) {\r\n\t\t\tif (this.field.isTerrain('psychicterrain')) move.drain = [3, 4];\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Poison\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tfrostbite: {\r\n\t\tnum: -10,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Causes 1/8 residual damage to the target every turn.\",\r\n\t\tname: \"Frost Bite\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, bite: 1},\r\n\t\tcondition: {\r\n\t\t\tnoCopy: true,\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-start', pokemon, 'Frost Bite');\r\n\t\t\t},\r\n\t\t\tonResidualOrder: 13,\r\n\t\t\tonResidual(pokemon) {\r\n\t\t\t\tthis.damage(pokemon.baseMaxhp / 8);\r\n\t\t\t},\r\n\t\t\tonEnd(pokemon) {\r\n\t\t\t\tthis.add('-end', pokemon, 'Frost Bite');\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tchance: 100,\r\n\t\t\tvolatileStatus: 'frostbite',\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ice\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start:\r\n\tgigavolt: {\r\n\t\tnum: -11,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 140,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Causes paralysis if user gets interrupted.\",\r\n\t\tname: \"Giga Volt\",\r\n\t\tpp: 5,\r\n\t\tpriority: -3,\r\n\t\tflags: {contact: 1, protect: 1, failmefirst: 1, nosleeptalk: 1, noassist: 1, failcopycat: 1, failinstruct: 1},\r\n\t\tpriorityChargeCallback(pokemon) {\r\n\t\t\tpokemon.addVolatile('gigavolt');\r\n\t\t},\r\n\t\tbeforeMoveCallback(pokemon) {\r\n\t\t\tif (pokemon.volatiles['gigavolt']?.lostFocus) {\r\n\t\t\t\tthis.add('cant', pokemon, 'Giga Volt', 'Giga Volt');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tcondition: {\r\n\t\t\tduration: 1,\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-singleturn', pokemon, 'move: Giga Volt');\r\n\t\t\t},\r\n\t\t\tonHit(pokemon, source, move) {\r\n\t\t\t\tif (move.category !== 'Status') {\r\n\t\t\t\t\t\tthis.effectState.lostFocus = true;\r\n\t\t\t\t\t\tif (!source.hasType('Ground')) {  \r\n\t\t\t\t\t\t\tsource.trySetStatus('par', pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonTryAddVolatile(status, pokemon) {\r\n\t\t\t\tif (status.id === 'flinch') return null;\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tgolddigger: {\r\n\t\tnum: -12,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Removes target's Steel-type.\",\r\n\t\tname: \"Golddigger\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n\t\tonHit(target, source, move) {\r\n\t\t\tif (target.hasType('Steel')) {\r\n\t\t\t\ttarget.setType(target.getTypes(true).map(type => type === \"Steel\" ? \"???\" : type));\r\n\t\t\t\t// Make the Steel-type removal visual\r\n\t\t\t\tthis.add('-start', target, 'typechange', target.types.join('/'), '[from] move: Golddigger');\r\n\t\t\t\t// Apply the Steel Denial volatile only if the target is Aegislash-Ma'adowr to ensure Steel-type is removed even if it changes its form\r\n\t\t\t\tif (target.species.name === 'Aegislash-Ma\\'adowr') {\r\n\t\t\t\t\ttarget.addVolatile('steeldenial');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Dragon\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\thoneydew: {\r\n\t\tnum: -13,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"User and ally recover 25% of their HP. If they're Bug-type and got healed, they also have their offensive stats increased.\",\r\n\t\tname: \"Honey Dew\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, bypasssub: 1, metronome: 1},\r\n\t\tonHit(pokemon) {\r\n\t\t\t// Attempt to heal the Pok\u00E9mon and store whether healing was successful\r\n\t\t\tconst healedAmount = this.heal(this.modify(pokemon.maxhp, 0.25));\r\n\t\t\tconst success = typeof healedAmount === 'number' && healedAmount > 0;\r\n\t\t\t// If the Pok\u00E9mon is Bug-type and was healed, boost its offensive stats\r\n\t\t\tif (pokemon.hasType('Bug') && success) {\r\n\t\t\t\tthis.boost({atk: 1, spa: 1}, pokemon, pokemon);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allies\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Cool\",\r\n\t},\r\n   // end\r\n\r\n\t// start\r\n\ticechain: {\r\n\t\tnum: -14,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Traps target for 4-5 turns and causes 1/8 residual damage.\",\r\n\t\tname: \"Ice Chain\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1},\r\n\t\tvolatileStatus: 'partiallytrapped',\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ice\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\thasamiwaza: {\r\n\t\tnum: -15,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 140,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"-1 Atk to attacker's side if interrupted.\",\r\n\t\tname: \"Hasami-waza\",\r\n\t\tpp: 5,\r\n\t\tpriority: -3,\r\n\t\tflags: {contact: 1, protect: 1, failmefirst: 1, nosleeptalk: 1, noassist: 1, failcopycat: 1, failinstruct: 1},\r\n\t\tpriorityChargeCallback(pokemon) {\r\n\t\t\tpokemon.addVolatile('hasamiwaza');\r\n\t\t},\r\n\t\tbeforeMoveCallback(pokemon) {\r\n\t\t\tif (pokemon.volatiles['hasamiwaza']?.lostFocus) {\r\n\t\t\t\tthis.add('cant', pokemon, 'Hasami-waza', 'Hasami-waza');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tcondition: {\r\n\t\t\tduration: 1,\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-singleturn', pokemon, 'move: Hasami-waza');\r\n\t\t\t},\r\n\t\t\tonHit(pokemon, source, move) {\r\n\t\t\t\tfor (const target of pokemon.adjacentFoes()) {\r\n\t\t\t\t\tif (move.category !== 'Status') {\r\n\t\t\t\t\t\tthis.effectState.lostFocus = true && this.boost({atk: -1}, target, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonTryAddVolatile(status, pokemon) {\r\n\t\t\t\tif (status.id === 'flinch') return null;\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tlightningswing: {\r\n\t\tnum: -16,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 60,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Recovers 1/2 of the damage dealt to the target(s).\",\r\n\t\tname: \"Lightning Swing\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, heal: 1, metronome: 1},\r\n\t\tdrain: [1, 2],\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allAdjacent\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tlunardust: {\r\n\t\tnum: -17,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 120,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Clears terrain and can't be used twice.\",\r\n\t\tname: \"Lunar Dust\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1, cantusetwice: 1},\r\n\t\tonAfterHit(target, source) {\r\n\t\t\tif (source.hp) {\r\n\t\t\t\tthis.field.clearTerrain();\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterSubDamage(damage, target, source) {\r\n\t\t\tif (source.hp) {\r\n\t\t\t\tthis.field.clearTerrain();\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Rock\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tlunarstorm: {\r\n\t\tnum: -18,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 120,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Heals and recharges afterwards.\",\r\n\t\tname: \"Lunar Storm\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {recharge: 1, protect: 1, mirror: 1, heal: 1, metronome: 1},\r\n\t\tdrain: [1, 2],\r\n\t\tself: {\r\n\t\t\tvolatileStatus: 'mustrecharge',\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Rock\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n   // start\r\n\tmotioncap: {\r\n\t\tnum: -19,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Spectral Thief clone.\",\r\n\t\tname: \"Motion Cap\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, bypasssub: 1},\r\n\t\tstealsBoosts: true,\r\n\t\t// Boost stealing implemented in scripts.js\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Fighting\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\trecalibration: {\r\n\t\tnum: -20,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Boost acc and another stat based on target's best stat.\",\r\n\t\tname: \"Recalibration\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {bypasssub: 1, allyanim: 1, metronome: 1},\r\n\t\tonHit(target, source) {\r\n\t\t\tif (!target) return;\r\n\t\t\tconst bestStat = target.getBestStat(false, true) as keyof BoostsTable;\r\n\t\t\tconst boosts: Partial<BoostsTable> = {accuracy: 1};\r\n\t\t\tboosts[bestStat] = 2;\r\n\t\t\tthis.boost(boosts, source);\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tsandpit: {\r\n\t\tnum: -21,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 85,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Traps target for 4-5 turns and lowers its Spe by 1 stage.\",\r\n\t\tname: \"Sand Pit\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tonTryImmunity(target) {\r\n\t\t\treturn this.dex.getImmunity('trapped', target);\r\n\t\t},\r\n\t\tvolatileStatus: 'sandpit',\r\n\t\tcondition: {\r\n\t\t\tonStart(pokemon, source) {\r\n\t\t\t\tthis.add('-start', pokemon, 'move: Sandpit', '[of] ' + source);\r\n\t\t\t},\r\n\t\t\tonResidualOrder: 14,\r\n\t\t\tonResidual(pokemon) {\r\n\t\t\t\tconst source = this.effectState.source;\r\n\t\t\t\tif (source && (!source.isActive || source.hp <= 0 || !source.activeTurns)) {\r\n\t\t\t\t\tdelete pokemon.volatiles['sandpit'];\r\n\t\t\t\t\tthis.add('-end', pokemon, 'Sandpit', '[partiallytrapped]', '[silent]');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.boost({spe: -1}, pokemon, source, this.dex.getActiveMove('sandpit'));\r\n\t\t\t},\r\n\t\t\tonTrapPokemon(pokemon) {\r\n\t\t\t\tif (this.effectState.source && this.effectState.source.isActive) pokemon.tryTrap();\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ground\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tsensorycues: {\r\n\t\tnum: -22,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tbasePowerCallback(pokemon, target) {\r\n\t\t\t// Calculate the number of negative stat boosts on the target\r\n\t\t\tlet negativeBoosts = 0;\r\n\t\t\tconst boostKeys: Array<keyof BoostsTable> = ['atk', 'def', 'spa', 'spd', 'spe', 'accuracy', 'evasion']; // Define the valid keys\r\n\t\r\n\t\t\tfor (const stat of boostKeys) {\r\n\t\t\t\tif (target.boosts[stat] < 0) {\r\n\t\t\t\t\tnegativeBoosts += Math.abs(target.boosts[stat]); // Count the absolute value of negative boosts\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Calculate power based on the number of negative boosts\r\n\t\t\tlet power = 50 + 50 * negativeBoosts;\r\n\t\t\tif (power > 2150) power = 2150; // Cap the power at 2150\r\n\t\t\tthis.debug('BP: ' + power);\r\n\t\t\treturn power;\r\n\t\t},\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Gets more powerful the more negative stat drops the target has.\",\r\n\t\tname: \"Sensory Cues\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tshortcircuit: {\r\n\t\tnum: -23,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Recovers half of the damage done to the target, burns in Acidic Terrain.\",\r\n\t\tname: \"Short Circuit\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, heal: 1, metronome: 1, bite: 1},\r\n\t\tdrain: [1, 2],\r\n\t\tsecondary: {chance: 100,\r\n\t\t\tonHit(target, source, move) {\r\n\t\t\t\tif (target.hasAbility('shielddust') || target.hasItem('covertcloak')) return;\r\n\t\t\t\tif (this.field.isTerrain('acidicterrain')) {\r\n\t\t\t\ttarget.trySetStatus('brn', source, move);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tsoothingsong: {\r\n\t\tnum: -24,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Inflicts targets with a Torment effect.\",\r\n\t\tname: \"Soothing Song\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1, metronome: 1},\r\n\t\tonHit(target, source) {\r\n\t\t\t// Check if the target has the Soundproof ability\r\n\t\t\tif (target.hasAbility('soundproof')) {\r\n\t\t\t\tthis.add('-immune', target, '[from] ability: Soundproof');\r\n\t\t\t\treturn null; // Prevent the Torment effect\r\n\t\t\t}\r\n\t\r\n\t\t\t// Apply the Torment effect if the target does not have Soundproof\r\n\t\t\ttarget.addVolatile('torment');\r\n\t\t},\r\n//\t\tvolatileStatus: 'torment',\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allAdjacentFoes\",\r\n\t\ttype: \"Grass\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tsubdued: {\r\n\t\tnum: -25,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Inflicts target with a torment effect.\",\r\n\t\tname: \"Subdued\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tvolatileStatus: 'torment',\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tsunbathing: {\r\n\t\tnum: -26,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"User and ally recover 25% of their HP and no longer have negative stat boosts.\",\r\n\t\tname: \"Sun Bathing\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, bypasssub: 1, metronome: 1},\r\n\t\t/*onHit(target) {\r\n\t\t\tlet boosts: BoostsTable = target.boosts;\r\n\t\t\r\n\t\t\t// Check if the target's HP is not full before healing\r\n\t\t\tif (target.hp < target.maxhp) {\r\n\t\t\t\t// Calculate the heal amount (25% of max HP)\r\n\t\t\t\tconst healAmount = target.maxhp / 4;\r\n\t\t\t\ttarget.heal(healAmount);\r\n\t\t\t\tthis.add('-heal', target, target.getHealth, healAmount);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// Clear negative stat boosts after healing\r\n\t\t\tfor (const stat in boosts) {\r\n\t\t\t\tif (boosts[stat as keyof BoostsTable] < 0) {\r\n\t\t\t\t\tboosts[stat as keyof BoostsTable] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\tif (Object.values(boosts).every(value => value === 0)) {\r\n\t\t\t\t\ttarget.clearBoosts();\r\n\t\t\t    \tthis.add('-clearboost', target);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t},*/\r\n\t\tonHit(pokemon) {\r\n\t\t\t// Healing for the user\r\n\t\t\tif (pokemon.hp < pokemon.maxhp) {\r\n\t\t\t\tconst healAmount = pokemon.maxhp / 4;\r\n\t\t\t\tpokemon.heal(healAmount);\r\n\t\t\t\tthis.add('-heal', pokemon, pokemon.getHealth, healAmount);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// Clear negative stat boosts for the user\r\n\t\t\tlet userBoosts: BoostsTable = pokemon.boosts;\r\n\t\t\tlet clearedUserBoosts = false; // Flag to track if any user boosts were cleared\r\n\t\t\tfor (const stat in userBoosts) {\r\n\t\t\t\tif (userBoosts[stat as keyof BoostsTable] < 0) {\r\n\t\t\t\t\tuserBoosts[stat as keyof BoostsTable] = 0;\r\n\t\t\t\t\tclearedUserBoosts = true; // Set flag if any boost was reset\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Notify about the clearing of user's negative boosts\r\n\t\t\tif (clearedUserBoosts) {\r\n\t\t\t\tpokemon.clearBoosts();\r\n\t\t\t\tthis.add('-clearboost', pokemon);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// Access the ally (assuming the ally is the other Pok\u00E9mon in the same team)\r\n\t\t\tconst ally = pokemon.side.active.find(p => p !== pokemon); // Adjust as needed based on your game's structure\r\n\t\t\r\n\t\t\t// Clear negative stat boosts for the ally\r\n\t\t\tif (ally) {\r\n\t\t\t\tlet allyBoosts: BoostsTable = ally.boosts;\r\n\t\t\t\tlet clearedAllyBoosts = false; // Flag to track if any ally boosts were cleared\r\n\t\t\t\tfor (const stat in allyBoosts) {\r\n\t\t\t\t\tif (allyBoosts[stat as keyof BoostsTable] < 0) {\r\n\t\t\t\t\t\tallyBoosts[stat as keyof BoostsTable] = 0;\r\n\t\t\t\t\t\tclearedAllyBoosts = true; // Set flag if any boost was reset\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Notify about the clearing of ally's negative boosts\r\n\t\t\t\tif (clearedAllyBoosts) {\r\n\t\t\t\t\tally.clearBoosts();\r\n\t\t\t\t\tthis.add('-clearboost', ally);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn true; \r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allies\",\r\n\t\ttype: \"Fire\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tterraform: {\r\n\t\tnum: -27,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 100,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"All grounded Ground Pok\u00E9mon on the field have their Def and SpD raised by 1 stage.\",\r\n\t\tname: \"Terraform\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tonAfterHit(target, source, move) {\r\n\t\t\tconst targets = [];\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tfor (const pokemon of side.active) {\r\n\t\t\t\t\tif (pokemon && !pokemon.fainted && pokemon.hasType('Ground') && pokemon.isGrounded()) {\r\n\t\t\t\t\t\ttargets.push(pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!targets.length) return false;\r\n\t\r\n\t\t\tfor (const pokemon of targets) {\r\n\t\t\t\tthis.boost({def: 1, spd: 1}, pokemon, source, move);\r\n\t\t\t\tthis.add('-message', `${pokemon.name}'s Defense and Special Defense were boosted by Terraform!`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ground\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t\r\n\t// end\r\n\r\n\t// start\r\n\tthunderousroar: {\r\n\t\tnum: -28,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Sets Electric Terrain and switches out.\",\r\n\t\tname: \"Thunderous Roar\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {sound: 1},\r\n\t\t// TODO show prepare message before the \"POKEMON used MOVE!\" message\r\n\t\t// This happens even before sleep shows its \"POKEMON is fast asleep.\" message\r\n\t\tterrain: 'electricterrain',\r\n\t\tselfSwitch: true,\r\n\t\tsecondary: null,\r\n\t\ttarget: \"all\",\r\n\t\ttype: \"Electric\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\ttimecompressor: {\r\n\t\tnum: -29,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Sets Trick Room two turns later.\",\r\n\t\tname: \"Time Compressor\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {metronome: 1},\r\n\t\tonTry(pokemon) {\r\n\t\t\tif (!pokemon.side.sideConditions['timecrystals']) {\r\n\t\t\t\tpokemon.side.addSideCondition('timecrystals');\r\n\t\t\t\tthis.add('-message', 'Time crystals started to glow.');\r\n\t\t\t\tthis.add('-anim', pokemon, 'Flash');\t\r\n\t\t\t} else {\r\n\t\t\t\treturn false; // If Time Crystals are already active, fail the move\r\n\t\t\t}\r\n\t\t},\t\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allySide\",\r\n\t\ttype: \"Rock\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tvoltomator: {\r\n\t\tnum: -30,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 20,\r\n\t\tbasePowerCallback(pokemon, target, move) {\r\n\t\t\tconst bp = move.basePower + 20 * pokemon.positiveBoosts();\r\n\t\t\tthis.debug('BP: ' + bp);\r\n\t\t\treturn bp;\r\n\t\t},\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Power Trip clone.\",\r\n\t\tname: \"Voltomator\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t//Start\r\n\twondermirror: {\r\n\t\tnum: -31,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Changes user's type to the type of the last move it was hit by.\",\r\n\t\tname: \"Wonder Mirror\",\r\n\t\tpp: 10,\r\n\t\tpriority: 4,\r\n\t\tstallingMove: true,\r\n\t\tvolatileStatus: 'wondermirror',\t\r\n\t\tflags: {noassist: 1, failcopycat: 1, failinstruct: 1},\r\n\t\tonPrepareHit(pokemon) {\r\n\t\t\treturn !!this.queue.willAct() && this.runEvent('StallMove', pokemon);\r\n\t\t},\r\n\t\tonHit(pokemon) {\r\n\t\t\tpokemon.addVolatile('stall');\r\n\t\t},\r\n\t\tcondition: {\r\n\t\t\tduration: 1,\r\n\t\t\tonStart(target) {\r\n\t\t\t\tthis.add('-singleturn', target, 'move: Wonder Mirror');\r\n\t\t\t},\r\n\t\t\tonTryHitPriority: 3,\r\n\t\t\tonTryHit(target, source, move) {\r\n\t\t\t\tthis.add('-activate', target, 'move: Wonder Mirror');\r\n\t\t\t\t// Change the user's type to the type of the incoming move\r\n\t\t\t\tconst newType = move.type;\r\n\t\t\t\ttarget.setType(newType);\r\n\t\t\t\tthis.add('-start', target, 'typechange', newType);\r\n\t\t\t\treturn this.NOT_FAIL;\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"self\",\r\n\t\ttype: \"Psychic\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n   // start\r\n   acidicterrain: {\r\n\t\tnum: -32,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Sets terrain that boosts Poison moves and makes grounded Steel Pkm susceptible to offensive Poison moves.\",\r\n\t\tname: \"Acidic Terrain\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {nonsky: 1, metronome: 1},\r\n\t\tterrain: 'acidicterrain',\r\n\t\tcondition: {\r\n\t\t\tduration: 5,\r\n\t\t\tdurationCallback(source, effect) {\r\n\t\t\t\tif (source?.hasItem('terrainextender')) {\r\n\t\t\t\t\treturn 8;\r\n\t\t\t\t}\r\n\t\t\t\treturn 5;\r\n\t\t\t},\r\n\t\t\tonBasePowerPriority: 6,\r\n\t\t\tonBasePower(basePower, attacker, defender, move) {\r\n\t\t\t\tif (move.type === 'Poison' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {\r\n\t\t\t\t\tthis.debug('acidic terrain boost');\r\n\t\t\t\t\treturn this.chainModify([5325, 4096]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonModifyMovePriority: -5,\r\n\t\t\tonModifyMove(move, source, target) {\r\n\t\t\t\tif (!move.ignoreImmunity) move.ignoreImmunity = {};\r\n\t\t\t\tif (move.ignoreImmunity !== true) {\r\n\t\t\t\t\tmove.ignoreImmunity['Poison'] = true;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonTryHit(target, source, move) {\r\n\t\t\t\tif (move.type === 'Poison') {\r\n\t\t\t\t\tif ((!target.isGrounded() || target.isSemiInvulnerable()) && !this.dex.getImmunity('Poison', target)) {\r\n\t\t\t\t\t\tthis.add('-immune', target);\r\n\t\t\t\t\t\tthis.hint(`Only targets that are affected by terrain lose their immunity to Poison.`);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonFieldStart(field, source, effect) {\r\n\t\t\t\tif (effect?.effectType === 'Ability') {\r\n\t\t\t\t\tthis.add('-fieldstart', 'move: Acidic Terrain', '[from] ability: ' + effect.name, '[of] ' + source);\r\n\t\t\t\t\tthis.add('-message', \"Poison-type moves used by grounded Pok\u00E9mon will have their power increased.\");\r\n\t\t\t\t\tthis.add('-message', \"Grounded Steel-type Pok\u00E9mon will also lose their immunity to Poison-type moves.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.add('-fieldstart', 'move: Acidic Terrain');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonFieldResidualOrder: 27,\r\n\t\t\tonFieldResidualSubOrder: 7,\r\n\t\t\tonFieldEnd() {\r\n\t\t\t\tthis.add('-fieldend', 'move: Acidic Terrain');\r\n\t\t\t},\r\n \t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"all\",\r\n\t\ttype: \"Poison\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n   // end\r\n\r\n\t// start\r\n\toilspill: {\r\n\t\tnum: -33,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Dual Poison & Water move that poisons in Acidic terrain.\",\r\n\t\tname: \"Oil Spill\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tonEffectiveness(typeMod, target, type, move) {\r\n\t\t\treturn typeMod + this.dex.getEffectiveness('Water', type);\r\n\t\t},\r\n\t\tsecondary: {chance: 100,\r\n\t\t\tonHit(target, source, move) {\r\n\t\t\t\tif (target.hasAbility('shielddust') || target.hasItem('covertcloak')) return;\r\n\t\t\t\tif (this.field.isTerrain('acidicterrain')) {\r\n\t\t\t\ttarget.trySetStatus('psn', source);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t\ttarget: \"allAdjacentFoes\",\r\n\t\ttype: \"Poison\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start:\r\n\tincandescentflame: {\r\n\t\tnum: -34,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 85,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Burns and suffers no power loss in Rain.\",\r\n\t\tname: \"Incandescent Flame\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, defrost: 1, metronome: 1},\r\n\t\t/*onBasePower(basePower, source) {\r\n\t\t\tif (['raindance', 'primordialsea'].includes(source.effectiveWeather()) && !source.hasItem('utilityumbrella')) {\r\n\t\t\t\tthis.debug('rain Incandescent Flame boost');\r\n\t\t\t\treturn this.chainModify(2);\r\n\t\t\t}\r\n\t\t},*/\r\n\t\tsecondary: {chance: 100,\r\n\t\t\tonHit(target, source, move) {\r\n\t\t\t\tif (target.hasAbility('shielddust') || target.hasItem('covertcloak')) return;\r\n\t\t\t\tif (['raindance', 'primordialsea'].includes(source.effectiveWeather())) {\r\n\t\t\t\ttarget.trySetStatus('brn', source, move);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Fire\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n\t// start: damage info in conditions.ts\r\n\teyeofthesun: {\r\n\t\tnum: -35,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 120,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Skips in Sun. -1 Spe to target.\",\r\n\t\tname: \"Eye of the Sun\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {charge: 1, protect: 1, metronome: 1, mirror: 1}, \r\n\t\tonTryMove(attacker, defender, move) {\r\n\t\t\tif (attacker.removeVolatile(move.id)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.add('-prepare', attacker, 'Tailwind'); // originally: move.name instead of 'Tailwind'\r\n\t\t\t/*if (!attacker.side.sideConditions['windblessing']) {\r\n\t\t\t\tattacker.side.addSideCondition('windblessing');\r\n\t\t\t}*/\r\n\t\t\tif (['sunnyday', 'desolateland'].includes(attacker.effectiveWeather())) {\r\n\t\t\t\tthis.attrLastMove('[still]');\r\n\t\t\t\tthis.add('-anim', attacker, 'Oblivion Wing', defender); // originally: this.addMove,  and instead of Oblivion Wing, it was move.name\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!this.runEvent('ChargeMove', attacker, defender, move)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tattacker.addVolatile('twoturnmove', defender);\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tchance: 100,\r\n\t\t\tboosts: {\r\n\t\t\t\tspe: -1,\r\n\t\t\t},\r\n\t\t},\r\n\t\thasSheerForce: true,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Flying\",\r\n\t\tcontestType: \"Cool\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\treboot: {\r\n\t\tnum: -38,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Reboot\",\r\n\t\tpp: 5,\r\n\t\tpriority: -8,\r\n\t\tflags: {heal: 1},\r\n\t\tshortDesc: \"Removes effects, heals, and recovers items.\",\r\n\t\tonHitField(target, source, move) {\r\n\t\t\t// Clear all terrain and weather\r\n\t\t\tthis.field.clearTerrain();\r\n\t\t\tthis.field.clearWeather();\r\n\t\t\t// Clear all pseudoweather effects\r\n\t\t\tfor (const pseudoweather in this.field.pseudoWeather) {\r\n\t\t\t//\tthis.add('-end', pseudoweather.charAt(0).toUpperCase() + pseudoweather.slice(1), '[from] move: Reboot');\r\n\t\t\t\tthis.add('-fieldend', this.dex.conditions.get(pseudoweather).name); // new\r\n\t\t\t\tdelete this.field.pseudoWeather[pseudoweather]; // Remove each pseudoweather effect\r\n\t\t\t}\r\n\r\n\t\t\t// Clear all side conditions\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tfor (const condition in side.sideConditions) {\r\n\t\t\t\t\tthis.add('-sideend', side, this.dex.conditions.get(condition).name); // new: add visual cue for removing side condition\r\n\t\t\t\t\tside.removeSideCondition(condition);\r\n\t\t\t//\t\tthis.add('-end', condition.charAt(0).toUpperCase() + condition.slice(1), '[from] move: Reboot');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Re-enter all Pok\u00E9mon\r\n\t\t\tfor (const pokemon of this.getAllActive()) {\r\n\t\t\t\tif (!pokemon.fainted) {\r\n\t\t\t\t\t// Cancel any pending moves or actions\r\n\t\t\t\t\tthis.queue.cancelMove(pokemon);\r\n\t\t\t\t\tthis.queue.cancelAction(pokemon);\r\n\t\t\t\t\t// Visual effect for re-entering\r\n\t\t\t\t\tthis.add('-anim', pokemon, 'Teleport', pokemon);\r\n\r\n\t\t\t\t\t// Clear all volatile effects in a general way\r\n\t\t\t\t\tfor (const volatile in pokemon.volatiles) {\r\n\t\t\t\t\t\tdelete pokemon.volatiles[volatile]; // Remove each volatile effect\r\n\t\t\t\t\t\tthis.add('-end', pokemon, volatile.charAt(0).toUpperCase() + volatile.slice(1), '[from] move: Reboot');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpokemon.clearBoosts();\r\n\t\t\t\t\tthis.add('-clearboost', pokemon);\r\n\t\r\n\t\t\t\t\t// Heal HP, cure status, restore PP\r\n\t\t\t\t\tpokemon.heal(pokemon.maxhp - pokemon.hp);\r\n\t\t\t\t\tpokemon.cureStatus();\r\n\t\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\t\t\t\tif (moveSlot.move !== 'Reboot') {\r\n\t\t\t\t\t\t\tmoveSlot.pp = moveSlot.maxpp;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Recover held item if it had one\r\n\t\t\t\t\tif (pokemon.lastItem) {\r\n\t\t\t\t\t\tpokemon.setItem(pokemon.lastItem);\r\n\t\t\t\t\t\tpokemon.lastItem = '';\r\n\t\t\t\t\t\tthis.add('-item', pokemon, pokemon.getItem(), '[from] move: Reboot');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Trigger ability as if Pok\u00E9mon just entered the field\r\n\t\t\t\t\tthis.runEvent('SwitchIn', pokemon);\r\n\r\n\t\t\t\t\t// New: Reset typing to original type(s)\r\n\t\t\t\t//\tif (pokemon.getTypes) {\r\n\t\t\t\t//\t\tconst originalTypes = pokemon.getTypes(); // Assuming this method returns the default types\r\n\t\t\t\t//\t\tpokemon.setType(originalTypes); // Reset to original typing\r\n\t\t\t\t//\t\tthis.add('-start', pokemon, 'typechange', originalTypes.join('/'), '[from] move: Reboot');\r\n\t\t\t\t//\t}\r\n\t\r\n\t\t\t\t\t// New: Reset form for Aegislash and Aegislash-Ma'adowr\r\n\t\t\t\t//\tif (pokemon.baseSpecies.baseSpecies === 'Aegislash-Blade-Ma\\'adowr') {\r\n\t\t\t\t//\t\tpokemon.species.id === 'aegislashshieldmaadowr'; // Revert Aegislash to Shield form\r\n\t\t\t\t//\t}\r\n\t\t\t\t//\tif (pokemon.baseSpecies.baseSpecies === 'Aegislash-Blade') {\r\n\t\t\t\t//\t\tpokemon.species.id === 'aegislashshield'; // Revert Aegislash to Shield form\r\n\t\t\t\t//\t}\r\n\r\n\t\t\r\n\t\t\t\t\t// Reduce Reboot's PP to 0 for non-Porygon-Z-Ma'adowr users\r\n\t\t\t\t\tif (source.baseSpecies.baseSpecies !== 'Porygon-Z-Ma\\'adowr') {\r\n\t\t\t\t\t\tconst moveSlot = source.moveSlots.find(move => move.move === 'Reboot');\r\n\t\t\t\t\t\tif (moveSlot) {\r\n\t\t\t\t\t\t\tmoveSlot.pp = 0;\r\n\t\t\t\t\t\t//\tthis.add('-message', `${source.name}'s Reboot PP has been reduced to 0!`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// Trigger switch-in effects\r\n\t\t\t\t\tthis.add('-heal', pokemon, pokemon.getHealth, '[silent]');\r\n\t\t\t\t//\tthis.runEvent('SwitchIn', pokemon); // it's somewhere up\r\n\t\t\t\t\tthis.runEvent('AfterSwitchIn', pokemon); // Trigger any after-switch-in effects\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t// Special effect for Porygon-Z-Ma'adowr\r\n\t\t\tif (source.baseSpecies.baseSpecies === 'Porygon-Z-Ma\\'adowr') {\r\n\t\t\t\t// Swap Attack and Special Attack\r\n\t\t\t\tconst newatk = source.storedStats.spa;\r\n\t\t\t\tconst newspa = source.storedStats.atk;\r\n\t\t\t\tsource.storedStats.atk = newatk;\r\n\t\t\t\tsource.storedStats.spa = newspa;\r\n\t\r\n\t\t\t\t// Swap Defense and Special Defense\r\n\t\t\t\tconst newdef = source.storedStats.spd;\r\n\t\t\t\tconst newspd = source.storedStats.def;\r\n\t\t\t\tsource.storedStats.def = newdef;\r\n\t\t\t\tsource.storedStats.spd = newspd;\t\t\t\r\n\t\r\n\t\t\t\tthis.add('-message', `${source.name}'s offensive and defensive base stats have been permanently swapped. Unexpectedly!`);\r\n\t\t\t\tthis.add('-anim', source, 'confuseray', source); // Example animation\r\n\t\t\t}\r\n\t\t\tthis.add('-message', 'All Pok\u00E9mon had their stat changes removed and are fully restored!');\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"all\",\r\n\t\ttype: \"Bug\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tascension: {\r\n\t\tnum: -36,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"Life Dew + Mental Herb effect.\",\r\n\t\tname: \"Ascension\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, bypasssub: 1, metronome: 1},\r\n\t\tonHit(pokemon) {\r\n\t\t\t// Healing for the user\r\n\t\t\tif (pokemon.hp < pokemon.maxhp) {\r\n\t\t\t\tconst healAmount = pokemon.maxhp / 4;\r\n\t\t\t\tpokemon.heal(healAmount);\r\n\t\t\t\tthis.add('-heal', pokemon, pokemon.getHealth, healAmount);\r\n\t\t\t}\r\n\r\n\t\t\tconst conditions = ['attract', 'taunt', 'encore', 'torment', 'disable', 'healblock'];\r\n\t\t\t\tfor (const firstCondition of conditions) {\r\n\t\t\t\t\tif (pokemon.volatiles[firstCondition]) {\r\n\t\t\t\t\t\tfor (const secondCondition of conditions) {\r\n\t\t\t\t\t\t\tpokemon.removeVolatile(secondCondition);\r\n\t\t\t\t\t\t\tif (firstCondition === 'attract' && secondCondition === 'attract') {\r\n\t\t\t\t\t\t\t\tthis.add('-end', pokemon, 'move: Attract', '[from] move: Ascension');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t// Access the ally (assuming the ally is the other Pok\u00E9mon in the same team)\r\n\t\t\tconst ally = pokemon.side.active.find(p => p !== pokemon);\r\n\t\t\r\n\t\t\t// Clear mental effects for the ally\r\n\t\t\tif (ally) {\r\n\t\t\t\tconst conditions = ['attract', 'taunt', 'encore', 'torment', 'disable', 'healblock'];\r\n\t\t\t\tfor (const firstCondition of conditions) {\r\n\t\t\t\t\tif (ally.volatiles[firstCondition]) {\r\n\t\t\t\t\t\tfor (const secondCondition of conditions) {\r\n\t\t\t\t\t\t\tally.removeVolatile(secondCondition);\r\n\t\t\t\t\t\t\tif (firstCondition === 'attract' && secondCondition === 'attract') {\r\n\t\t\t\t\t\t\t\tthis.add('-end', ally, 'move: Attract', '[from] move: Ascension');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allies\",\r\n\t\ttype: \"Grass\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\treactivepoison: {\r\n\t\tnum: -37,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tcategory: \"Special\",\r\n\t\tshortDesc: \"Priority against a poisoned target.\",\r\n\t\tname: \"Reactive Poison\", \r\n\t\tpp: 20,  \r\n\t\tpriority: 0, \r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n\t\tbeforeTurnCallback(pokemon) {\r\n\t\t\t//\tconsole.log(`Reactive Poison beforeTurnCallback - Checking targets for ${pokemon.name}`);\r\n\t\t\t\tfor (const target of pokemon.side.foe.active) {\r\n\t\t\t\t\tif (target && !target.fainted && (target.status === 'psn' || target.status === 'tox')) {\r\n\t\t\t\t\t\ttarget.addVolatile('reactivepoisontarget', pokemon);\r\n\t\t\t//\t\t\tconsole.log(`Reactive Poison - Added 'reactivepoisontarget' volatile to ${target.name}`);\r\n\t\t\t\t\t\tthis.add('-message', `${pokemon.name} is eyeing ${target.name} for a swift strike!`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\r\n\t\t\tonModifyPriority(priority, source, target) {\r\n\t\t\t//\tconsole.log(`Reactive Poison onModifyPriority - Checking priority for ${source.name} against ${target?.name}`);\r\n\t\t\t\t// Check if any opponent has the 'reactivepoisontarget' volatile\r\n\t\t\t\tfor (const foe of source.side.foe.active) {\r\n\t\t\t\t\tif (foe && foe.volatiles['reactivepoisontarget']) {\r\n\t\t\t//\t\t\tconsole.log(`Reactive Poison - Priority increased to ${priority + 1} against ${foe.name}`);\r\n\t\t\t\t\t\treturn priority + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t//\tconsole.log(`Reactive Poison - Priority unchanged: ${priority}`);\r\n\t\t\t\treturn priority;\r\n\t\t\t},\r\n\t\t\r\n\t\t\tonPrepareHit(target, source, move) {\r\n\t\t\t//\tconsole.log(`Reactive Poison onPrepareHit - Preparing hit from ${source.name} to ${target.name}`);\r\n\t\t\t\tthis.attrLastMove('[still]');\r\n\t\t\t\tif (target.volatiles['reactivepoisontarget']) {\r\n\t\t\t//\t\tconsole.log(`Reactive Poison - Target has 'reactivepoisontarget' volatile, showing Focus Energy animation`);\r\n\t\t\t\t\tthis.add('-anim', source, \"Focus Energy\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.add('-anim', source, \"Venoshock\", target);\r\n\t\t\t},\r\n\t\t\r\n\t\t\tcondition: {\r\n\t\t\t\tduration: 1,\r\n\t\t\t\tonStart(pokemon, source) {\r\n\t\t\t//\t\tconsole.log(`Reactive Poison - Volatile 'reactivepoisontarget' started on ${pokemon.name}`);\r\n\t\t\t\t\tthis.debug(`Reactive Poison - Volatile 'reactivepoisontarget' started on ${pokemon.name}`);\r\n\t\t\t\t},\r\n\t\t\t//\tonEnd(pokemon) {\r\n\t\t\t//\t\tconsole.log(`Reactive Poison - Volatile 'reactivepoisontarget' ended on ${pokemon.name}`);\r\n\t\t\t//\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Poison\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\tenhancement: {\r\n\t\tnum: -41,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"User and ally recover 25% of their HP. If they're Rock-type, they also have their defensive stats increased.\",\r\n\t\tname: \"Enhancement\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, bypasssub: 1, metronome: 1},\r\n\t\tonHit(pokemon) {\r\n\t\t\t// Attempt to heal the Pok\u00E9mon and store whether healing was successful\r\n\t\t\tconst healedAmount = this.heal(this.modify(pokemon.maxhp, 0.25));\r\n\t\t\tconst success = typeof healedAmount === 'number' && healedAmount > 0;\r\n\t\t\t// If the Pok\u00E9mon is Rock-type and was healed, boost its defensive stats\r\n\t\t\tif (pokemon.hasType('Rock') && success) {\r\n\t\t\t\tthis.boost({def: 1, spd: 1}, pokemon, pokemon);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allies\",\r\n\t\ttype: \"Rock\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n   // end\r\n   // start\r\n   saute: {\r\n    num: -42,\r\n    accuracy: true,\r\n    basePower: 0,\r\n    category: \"Status\",\r\n\t shortDesc: \"User's side eats berries; effect doubled.\",\r\n    name: \"Saute\",\r\n    pp: 5,\r\n    priority: 0,\r\n    flags: {bypasssub: 1, metronome: 1},\r\n    onHitField(target, source, move) {\r\n        const targets: Pokemon[] = [];\r\n        for (const pokemon of this.getAllActive()) {\r\n            // Check if the Pok\u00E9mon is on the user's side\r\n            if (pokemon.side === source.side) {\r\n                if (this.runEvent('Invulnerability', pokemon, source, move) === false) {\r\n                    this.add('-miss', source, pokemon);\r\n                } else if (this.runEvent('TryHit', pokemon, source, move) && pokemon.getItem().isBerry) {\r\n                    targets.push(pokemon);\r\n                }\r\n            }\r\n        }\r\n        this.add('-fieldactivate', 'move: Saute');\r\n        if (!targets.length) {\r\n            this.add('-fail', source, 'move: Saute');\r\n            this.attrLastMove('[still]');\r\n            return this.NOT_FAIL;\r\n        }\r\n        for (const pokemon of targets) {\r\n            const item = pokemon.getItem();\r\n            if (item.isBerry) {\r\n                // Add volatile if a Pok\u00E9mon on user's side has one of these berries\r\n                if (['figyberry', 'wikiberry', 'magoberry', 'aguavberry', 'iapapaberry', 'sitrusberry','oranberry', 'leppaberry', 'liechiberry', 'ganlonberry', 'salacberry', 'petayaberry', 'apicotberry', 'starfberry'].includes(item.id)) {\r\n\t\t\t\t\tpokemon.addVolatile('sauteing'); // Add the 'sauteing' volatile status\r\n                    }                \r\n                pokemon.eatItem(true);\r\n            }\r\n        }\r\n    },\r\n    secondary: null,\r\n    target: \"all\",\r\n    type: \"Fire\",\r\n},\r\n// end\r\n// start\r\n\tblockage: {\r\n\t\tnum: -43,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tshortDesc: \"King's Shield with Disable instead.\",\r\n\t\tname: \"Blockage\",\r\n\t\tpp: 10,\r\n\t\tpriority: 4,\r\n\t\tflags: {noassist: 1, failcopycat: 1, failinstruct: 1},\r\n\t\tstallingMove: true,\r\n\t\tvolatileStatus: 'blockage',\r\n\t\tonPrepareHit(pokemon) {\r\n\t\t\treturn !!this.queue.willAct() && this.runEvent('StallMove', pokemon);\r\n\t\t},\r\n\t\tonHit(pokemon) {\r\n\t\t\tpokemon.addVolatile('stall');\r\n\t\t},\r\n\t\tcondition: {\r\n\t\t\tduration: 1,\r\n\t\t\tonStart(target) {\r\n\t\t\t\tthis.add('-singleturn', target, 'move: Blockage');\r\n\t\t\t},\r\n\t\t\tonTryHitPriority: 3,\r\n\t\t\tonTryHit(target, source, move) {\r\n\t\t\t\tif (move.category !== 'Status') {\r\n\t\t\t\t\tthis.add('-activate', target, 'move: Blockage');\r\n\t\t\t\t\t// Disable the damaging move\r\n\t\t\t\t\tsource.addVolatile('disable');\r\n\t\t\t\t\treturn this.NOT_FAIL;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"self\",\r\n\t\ttype: \"Rock\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tpincerattack: {\r\n\t\tnum: -44, \r\n\t\taccuracy: 100,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Physical\",\r\n\t\tshortDesc: \"Combo attack: Double damage for second attacker.\",\r\n\t\tname: \"Pincer Attack\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1},\r\n\t\tonModifyType(move, pokemon) {\r\n\t\t\t// Change the move type based on the user\r\n\t\t\tif (pokemon.species.name === 'Escavalier') {\r\n\t\t\t\tmove.type = 'Bug'; // Change to Bug type if Escavalier is the user\r\n\t\t\t} else if (pokemon.species.name === 'Grapplin') {\r\n\t\t\t\tmove.type = 'Fighting'; // Change to Fighting type if Grapplin is the user\r\n\t\t\t}\r\n\t\t},\r\n\t\tonBasePower(basePower, pokemon) {\r\n\t\t\t// Check if Grapplin used this move first this turn\r\n\t\t\tif (this.lastSuccessfulMoveThisTurn === 'pincerattack' && pokemon.species.name === 'Escavalier') {\r\n\t\t\t\tthis.debug('double power');\r\n\t\t\t\treturn this.chainModify(2);\r\n\t\t\t} else if (this.lastSuccessfulMoveThisTurn === 'pincerattack' && pokemon.species.name === 'Grapplin') {\r\n\t\t\t\tthis.debug('double power');\r\n\t\t\t\treturn this.chainModify(2);\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Normal\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\t// end\r\n\r\n\t// start: Exhume from Dark Volatile, this is now a more simplified coding version\r\n\texhume: {\r\n\t\tnum: -45,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: 'Status',\r\n\t\tshortDesc: \"Executes first move of last fainted Dark ally. Best stat boost.\",\r\n\t\tname: 'Exhume',\r\n\t\tpp: 8, // this should be fine since this move can only be called through an Engraving effect, which doesn't max pp\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, failencore: 1, failmefirst: 1, noassist: 1, failcopycat: 1, failmimic: 1, nosketch: 1},\r\n\t\tonTryHit(target, source, move) {\r\n\t\t\t// Find the last fainted Dark-type Pok\u00E9mon on the user's team\r\n\t\t\tconst faintedDarkTypes = source.side.pokemon.filter(p => p.fainted && p.hasType('Dark'));\r\n\t\t\tconst lastFaintedDark = faintedDarkTypes[faintedDarkTypes.length - 1];\r\n\t  \r\n\t\t\tif (!lastFaintedDark) {\r\n\t\t\t  this.add('-fail', source, 'move: Exhume');\r\n\t\t\t  return null;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the best stat to boost\r\n\t\t\tconst stats: Array<StatIDExceptHP> = ['atk', 'def', 'spa', 'spd', 'spe']; // List of stats to consider\r\n\t\t\tlet bestStat: StatIDExceptHP = stats[0]; // Initialize with the first stat\r\n\t\t\tlet highestValue = lastFaintedDark.getStat(bestStat); // Get the initial highest value\r\n\t\r\n\t\t\tfor (const stat of stats) {\r\n\t\t\t\tconst currentValue = lastFaintedDark.getStat(stat);\r\n\t\t\t\tif (currentValue > highestValue) {\r\n\t\t\t\t\thighestValue = currentValue;\r\n\t\t\t\t\tbestStat = stat; // Update bestStat to the current highest stat\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.add('-anim', source, 'Moonlight');\r\n\t\t\t// Apply +1 to the best stat\r\n\t\t\tthis.boost({[bestStat]: 1}, source);\r\n\r\n\t\t\t// Use the first move of the last fainted Dark-type Pok\u00E9mon\r\n\t\t\tconst firstMove = lastFaintedDark.moveSlots[0]; // Get the first move slot\r\n\t  \r\n\t\t\tif (!firstMove) {\r\n\t\t\t  this.add('-fail', source, 'move: Exhume');\r\n\t\t\t  return null;\r\n\t\t\t}\r\n\r\n\t\t\t// Use the move as if it were the user's move\r\n\t\t\tconst moveData = this.dex.moves.get(firstMove.id);\r\n\t\t\tthis.add('-message', `${source.name} exhumes ${lastFaintedDark.name}'s ${moveData.name}!`);\t\r\n\t\t\t\r\n\t\t\t// Distinguish how to execute the move based on its target type\r\n\t\t\tswitch (moveData.target) {\r\n    \t\t\tcase 'self':\r\n        \t\t\tthis.actions.useMove(moveData.id, source, source); // Affects only the user\r\n       \t\t\tbreak;\r\n    \t\t\tcase 'allySide':\r\n        \t\t\tthis.actions.useMove(moveData.id, source, source.side.pokemon[0]); // Affects an ally\r\n        \t\tbreak;\r\n\t\t\t\tcase 'allyTeam':\r\n      \t\t\t\t// Affects the entire team, e.g., for moves like Aromatherapy\r\n        \t\t\tthis.actions.useMove(moveData.id, source, null); // Null can be used for moves that affect the entire team\r\n        \t\tbreak;\r\n    \t\t\tcase 'normal':\r\n        \t\t\t// List available foes\r\n        \t\t\tconst targets = source.side.foe.active.filter(target => target && !target.fainted);\r\n        \t\t\tif (targets.length > 0) {\r\n            \t\t// Randomly select a foe\r\n            \t\tconst randomTarget = targets[Math.floor(Math.random() * targets.length)];\r\n            \t\tthis.actions.useMove(moveData.id, source, randomTarget);\r\n        \t\t\t} else {\r\n           \t\t\t\tthis.add('-fail', source, 'move: Exhume'); // No available foes\r\n        \t\t\t}\r\n        \t\tbreak;\r\n\t\t\t\t// case any is important because without it, user will use distance moves against itself, such as Brave Bird...\r\n\t\t\t\tcase 'any':\r\n\t\t\t\t\tconst anyTarget = source.side.foe.active.filter(target => target && !target.fainted);\r\n\t\t\t\t\tif (anyTarget.length > 0) {\r\n\t\t\t\t\t\tconst randomTarget = anyTarget[Math.floor(Math.random() * anyTarget.length)];\r\n\t\t\t\t\t\tthis.actions.useMove(moveData.id, source, randomTarget);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.add('-fail', source, 'move: Exhume');\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t\t/*case 'allAdjacent':\r\n        \t\t\t// Affects all adjacent Pok\u00E9mon (both allies and foes)\r\n        \t\t\tconst adjacentTargets = source.side.active.filter(target => target && !target.fainted);\r\n        \t\t\tfor (const target of adjacentTargets) {\r\n            \t\t\tthis.actions.useMove(moveData.id, source, target);\r\n        \t\t\t}\r\n        \t\tbreak;\r\n    \t\t\tcase 'allAdjacentFoes':\r\n        \t\t\t// Affects all adjacent foes\r\n        \t\t\tconst adjacentFoes = source.side.foe.active.filter(target => target && !target.fainted);\r\n        \t\t\tfor (const target of adjacentFoes) {\r\n            \t\t\tthis.actions.useMove(moveData.id, source, target);\r\n        \t\t\t}\r\n        \t\tbreak;\r\n    \t\t\tcase 'all':\r\n        \t\t\tthis.actions.useMove(moveData.id, source, null); // Affects everyone; null can be used for moves that don't require a target\r\n        \t\tbreak;*/\r\n\t\t\t\tdefault:\r\n       \t\t\t \t// Default case; use the original target if no specific case matches\r\n        \t\t\tthis.actions.useMove(moveData.id, source, target);\r\n        \t\tbreak;\r\n\t\t\t}\r\n\t\t//\tthis.actions.useMove(moveData.id, source, target);\t// Use the move on the target\r\n\t\t\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: 'self',\r\n\t\ttype: 'Dark',\r\n\t\tcontestType: \"Cool\",\r\n\t  },\r\n\t// end\r\n\r\n\t// start:\r\n\tsuperkinesis: {\r\n\t\tnum: -46,\r\n\t\taccuracy: 90,\r\n\t\tbasePower: 130,\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Superkinesis\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1},\r\n\t\tshortDesc: \"Lowers user's best stat by 2.\",\r\n\t\tonHit(target, source) {\r\n\t\t\tif (!target) return;\r\n\t\t\tconst bestStat = source.getBestStat(false, true) as keyof BoostsTable;\r\n\t\t\tconst boosts: Partial<BoostsTable> = {};\r\n\t\t\tboosts[bestStat] = -2;\r\n\t\t\tthis.boost(boosts, source);\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Psychic\",\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\treverberation: {\r\n\t\tnum: -47,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 80,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Reverberation\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1, metronome: 1},\r\n\t\tshortDesc: \"Mini Earthquake follow-up at 60 BP.\",\r\n\t\tonAfterMove(source) {\r\n\t\t\tsource.addVolatile('quakingboom');\r\n\t\t\tthis.actions.useMove('earthquake', source);\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Electric\",\r\n\t\tcontestType: \"Cool\",\r\n\t},\r\n\tearthquake: {\r\n\t\tinherit: true,\r\n\t\tonModifyMove(move, source, target) {\r\n\t\t\tif (source && source.volatiles['quakingboom']) {\r\n\t\t\t\tmove.basePower = 60;\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterMove(target, source) {\r\n\t\t\t// This function is called for each target hit by Earthquake\r\n\t\t\t// Check if the target is still alive\r\n\t\t\tif (target && target.hp > 0) {\r\n\t\t\t\t// Check how many active Pok\u00E9mon are still alive\r\n\t\t\t\tconst allTargets = this.getAllActive().filter(p => p && p.hp > 0);\r\n\t\t\t\t// If this is the last target being hit, remove the volatile\r\n\t\t\t\tif (allTargets.length === 1) {\r\n\t\t\t\t\tdelete source.volatiles['quakingboom'];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\t// start: This move is only for testing purposes due to Wood Stove\r\n//\tfrostblast: {\r\n//\t\tnum: -38,\r\n//\t\taccuracy: 100, // Accuracy of the move\r\n//\t\tbasePower: 50, // Base power of the move\r\n//\t\tcategory: 'Special', // Category of the move (Physical, Special, or Status)\r\n//\t\tname: \"Frost Blast\", // Name of the move\r\n//\t\tpriority: 0, // Priority of the move\r\n//\t\tpp: 10, // Power Points\r\n//\t\tflags: {protect: 1, mirror: 1, metronome: 1},\r\n//\t\tsecondary: {\r\n//\t\t\tchance: 100,\r\n//\t\t\tstatus: 'frz',\r\n//\t\t},\r\n//\t\ttarget: 'allAdjacent', // This move targets all adjacent opponents\r\n//\t\ttype: 'Ice', // Type of the move\r\n//\t\t// Additional properties can be added here\r\n//\t\tshortDesc: \"Freezes all adjacent opponents.\", // Short description\r\n//\t\tdesc: \"A chilling blast that may freeze all adjacent opponents.\", // Detailed description\r\n//\t},\r\n\t// end\r\n\r\n\t// start: Reserve Idea For New Project\r\n\tparanoia: {\r\n\t\tnum: -100,  \r\n\t\taccuracy: 95,  \r\n\t\tbasePower: 0,  \r\n\t\tdamageCallback(pokemon, target) {\r\n\t\t\treturn this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 4), 1);\r\n\t\t},\r\n\t\tonHit(target, source) {\r\n\t\t\tif (!target) return;\t\t\r\n\t\t\t// Determine the best stat of the target\r\n\t\t\tconst bestStat = target.getBestStat(false, true) as keyof BoostsTable;\r\n\t\r\n\t\t\t// Create boosts object to lower the best stat\r\n\t\t\tconst boosts: Partial<BoostsTable> = {};\r\n\t\t\tboosts[bestStat] = -1;\r\n\t\t\tthis.boost(boosts, target);\r\n\t\t},\r\n\t\tshortDesc: \"Quarters targets' HP + lowers best stat.\",\r\n\t\tname: \"Paranoia\",  \r\n\t\tcategory: \"Special\",\r\n\t\tpp: 10,  \r\n\t\tpriority: 0,  \r\n\t\tflags: {protect: 1, mirror: 1, nosketch: 1}, // for tournament purpose only, nosketch\r\n\t\tsecondary: {},  \r\n\t\ttarget: \"allAdjacentFoes\",  \r\n\t\ttype: \"Bug\",  \r\n\t\tcontestType: \"Clever\", \r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\tcamouflage: {\r\n\t\tinherit: true,\r\n\t\tonHit(target) {\r\n\t\t\tlet newType = 'Normal';\r\n\t\t\tif (this.field.isTerrain('electricterrain')) {\r\n\t\t\t\tnewType = 'Electric';\r\n\t\t\t} else if (this.field.isTerrain('grassyterrain')) {\r\n\t\t\t\tnewType = 'Grass';\r\n\t\t\t} else if (this.field.isTerrain('mistyterrain')) {\r\n\t\t\t\tnewType = 'Fairy';\r\n\t\t\t} else if (this.field.isTerrain('psychicterrain')) {\r\n\t\t\t\tnewType = 'Psychic';\r\n\t\t\t} else if (this.field.isTerrain('acidicterrain')) {\r\n\t\t\t\tnewType = 'Poison';\r\n\t\t\t}\r\n\r\n\t\t\tif (target.getTypes().join() === newType || !target.setType(newType)) return false;\r\n\t\t\tthis.add('-start', target, 'typechange', newType);\r\n\t\t},\r\n\t},\r\n\tnaturepower: {\r\n\t\tinherit: true,\r\n\t\tonTryHit(target, pokemon) {\r\n\t\t\tlet move = 'triattack';\r\n\t\t\tif (this.field.isTerrain('electricterrain')) {\r\n\t\t\t\tmove = 'thunderbolt';\r\n\t\t\t} else if (this.field.isTerrain('grassyterrain')) {\r\n\t\t\t\tmove = 'energyball';\r\n\t\t\t} else if (this.field.isTerrain('mistyterrain')) {\r\n\t\t\t\tmove = 'moonblast';\r\n\t\t\t} else if (this.field.isTerrain('psychicterrain')) {\r\n\t\t\t\tmove = 'psychic';\r\n\t\t\t} else if (this.field.isTerrain('acidicterrain')) {\r\n\t\t\t\tmove = 'sludgebomb';\r\n\t\t\t}\r\n\t\t\tthis.actions.useMove(move, pokemon, target);\r\n\t\t\treturn null;\r\n\t\t},\r\n\t},\r\n\tsecretpower: {\r\n\t\tinherit: true,\r\n\t\tonModifyMove(move, pokemon) {\r\n\t\t\tif (this.field.isTerrain('')) return;\r\n\t\t\tmove.secondaries = [];\r\n\t\t\tif (this.field.isTerrain('electricterrain')) {\r\n\t\t\t\tmove.secondaries.push({\r\n\t\t\t\t\tchance: 30,\r\n\t\t\t\t\tstatus: 'par',\r\n\t\t\t\t});\r\n\t\t\t} else if (this.field.isTerrain('grassyterrain')) {\r\n\t\t\t\tmove.secondaries.push({\r\n\t\t\t\t\tchance: 30,\r\n\t\t\t\t\tstatus: 'slp',\r\n\t\t\t\t});\r\n\t\t\t} else if (this.field.isTerrain('mistyterrain')) {\r\n\t\t\t\tmove.secondaries.push({\r\n\t\t\t\t\tchance: 30,\r\n\t\t\t\t\tboosts: {\r\n\t\t\t\t\t\tspa: -1,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t} else if (this.field.isTerrain('psychicterrain')) {\r\n\t\t\t\tmove.secondaries.push({\r\n\t\t\t\t\tchance: 30,\r\n\t\t\t\t\tboosts: {\r\n\t\t\t\t\t\tspe: -1,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t} else if (this.field.isTerrain('acidicterrain')) {\r\n\t\t\t\tmove.secondaries.push({\r\n\t\t\t\t\tchance: 30,\r\n\t\t\t\t\tstatus: 'psn',\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tterrainpulse: {\r\n\t\tnum: 805,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Terrain Pulse\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, pulse: 1},\r\n\t\tonModifyType(move, pokemon) {\r\n\t\t\tif (!pokemon.isGrounded() || this.field.isTerrain('')) return;\r\n\t\t\tswitch (this.field.terrain) {\r\n\t\t\tcase 'electricterrain':\r\n\t\t\t\tmove.type = 'Electric';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grassyterrain':\r\n\t\t\t\tmove.type = 'Grass';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'mistyterrain':\r\n\t\t\t\tmove.type = 'Fairy';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'psychicterrain':\r\n\t\t\t\tmove.type = 'Psychic';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'acidicterrain':\r\n\t\t\t\tmove.type = 'Poison';\r\n\t\t\t\tbreak;\t\r\n\t\t\t}\r\n\t\t},\r\n\t\tonModifyMove(move, pokemon) {\r\n\t\t\tif (this.field.isTerrain('')) return; // Down-to-Earth\r\n\t\t\tif (this.field.terrain && pokemon.isGrounded()) {\r\n\t\t\t\tmove.basePower *= 2;\r\n\t\t\t\tthis.debug('BP doubled in Terrain');\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Normal\",\r\n\t},\r\n\t// end\r\n\r\n\t// start\r\n\twaterpulse: {\r\n\t\tinherit: true,\r\n\t\tbasePower: 75,\r\n\t},\r\n\t// end\r\n   // start:\r\n\telectroball: {\r\n\t\tinherit: true,\r\n\t\tbasePowerCallback(pokemon, target) {\r\n\t\t\tlet ratio = Math.floor(pokemon.getStat('spe') / target.getStat('spe') * 10) / 10;\r\n\t\t\tif (!isFinite(ratio)) ratio = 0;\r\n\t\t\tlet bp = 40;\r\n\t\t\tif (ratio >= 1) bp = 60;\r\n\t\t\tif (ratio >= 1.5) bp = 80;\r\n\t\t\tif (ratio >= 2) bp = 100;\r\n\t\t\tif (ratio >= 3) bp = 120;\r\n\t\t\tif (ratio >= 4) bp = 150;\r\n\t\t\treturn bp;\r\n\t\t},\r\n\t},\t\t\r\n\t// end\r\n\t// start\r\n\thypnosis: {\r\n\t\tnum: 95,\r\n\t\taccuracy: 55,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Hypnosis\",\r\n\t\tpp: 20,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, reflectable: 1, mirror: 1, metronome: 1},\r\n\t\tonTryHit(target, source, move) {\r\n\t\t\tif (target.hasType('Psychic')) {\r\n\t\t\t\tthis.add('-immune', target, '[from] type: Psychic');\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\t\tstatus: 'slp',\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Psychic\",\r\n\t\tzMove: {boost: {spe: 1}},\r\n\t\tcontestType: \"Clever\",\r\n\t},\r\n\t// end\r\n\r\n\t// start: modifying Soak for Aegislash-Ma'adowr to account for form change, letting it stay mono Water\r\n\tsoak: {\r\n\t\tnum: 487,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Soak\",\r\n\t\tpp: 20,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1, metronome: 1},\r\n\t\tonHit(target) {\r\n\t\t\tif (target.getTypes().join() === 'Water' || !target.setType('Water')) {\r\n\t\t\t\t// Soak should animate even when it fails.\r\n\t\t\t\t// Returning false would suppress the animation.\r\n\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tthis.add('-start', target, 'typechange', 'Water');\r\n\t\t\t\r\n\t\t\t// Apply soaksteeldenial volatile if the target is Aegislash-Ma'adowr\r\n\t\t\tif (target.species.name === 'Aegislash-Ma\\'adowr' || target.species.name === 'Aegislash-Blade-Ma\\'adowr') {\r\n\t\t\t\ttarget.addVolatile('soaksteeldenial');\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Water\",\r\n\t\tzMove: {boost: {spa: 1}},\r\n\t\tcontestType: \"Cute\",\r\n\t},\r\n\t// end\r\n\r\n\t// start: list of unattainable moves\r\n\tfrustration: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thail: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\tpursuit: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\treturn: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpower: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerfighting: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerfire: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowergrass: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerwater: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerelectric: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerice: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerpoison: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerground: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerpsychic: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerdark: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerbug: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerghost: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerdragon: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowersteel: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerflying: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\thiddenpowerrock: {\r\n\t\tinherit: true,\r\n\t\tisNonstandard: \"Unobtainable\",\r\n\t},\r\n\t// end\r\n};\r\n"],
  "mappings": "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",
  "names": ["target", "source", "move", "conditions"]
}
