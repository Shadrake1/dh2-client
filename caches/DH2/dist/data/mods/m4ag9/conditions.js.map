{
  "version": 3,
  "sources": ["../../../../data/mods/m4ag9/conditions.ts"],
  "sourcesContent": ["export const Conditions: {[k: string]: ConditionData} = {\r\n\tcongestionstatus: {\r\n\t\t\t// When the slot condition is applied\r\n\t\t\tonStart(target) {\r\n\t\t\t\tthis.effectState.congestionQueue = [] as {\r\n\t\t\t\t\tmove: Move,\r\n\t\t\t\t\tsourceSlot: number,\r\n\t\t\t\t\tside: Side,\r\n\t\t\t\t}[];\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// Intercept and delay all status moves\r\n\t\t\tonBeforeMove(pokemon, target, move) {\r\n\t\t\t\tif (move.category !== 'Status') return;\r\n\t\t\r\n\t\t\t\tconst slot = pokemon.position;\r\n\t\t\t\tconst side = pokemon.side;\r\n\t\t\t\tconst slotCon = side.slotConditions[slot];\r\n\t\t\r\n\t\t\t\tif (!slotCon.congestionQueue) {\r\n\t\t\t\t\tslotCon.congestionQueue = [];\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tslotCon.congestionQueue.push({\r\n\t\t\t\t\tmove: this.dex.moves.get(move.id),\r\n\t\t\t\t\tsourceSlot: slot,\r\n\t\t\t\t\tside,\r\n\t\t\t\t});\r\n\t\t\r\n\t\t\t\t// Reduce PP immediately\r\n\t\t\t\tconst moveSlot = pokemon.moveSlots.find(m => m.id === move.id);\r\n\t\t\t\tif (moveSlot) moveSlot.pp = Math.max(0, moveSlot.pp - 1);\r\n\t\t\r\n\t\t\t\tthis.add('-message', `${pokemon.name}'s ${move.name} was delayed due to Congestion!`);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// Check whether to resolve delayed moves\r\n\t\t\tonUpdate(pokemon) {\r\n\t\t\t\t// If any Congestion user remains on the field, wait\r\n\t\t\t\tconst congestionStillActive = this.getAllActive().some(p =>\r\n\t\t\t\t\tp.getAbility().id === 'congestion' && !p.fainted\r\n\t\t\t\t);\r\n\t\t\t\tif (congestionStillActive) return;\r\n\t\t\r\n\t\t\t\tconst slot = pokemon.position;\r\n\t\t\t\tconst side = pokemon.side;\r\n\t\t\t\tconst slotCon = side.slotConditions[slot];\r\n\t\t\r\n\t\t\t\tif (!slotCon?.congestionQueue?.length) return;\r\n\t\t\r\n\t\t\t\tthis.add('-message', `${pokemon.name}'s slot resolves delayed status moves!`);\r\n\t\t\r\n\t\t\t\tfor (const { move, sourceSlot, side: moveSide } of slotCon.congestionQueue as {\r\n\t\t\t\t\tmove: Move,\r\n\t\t\t\t\tsourceSlot: number,\r\n\t\t\t\t\tside: Side,\r\n\t\t\t\t}[]) {\r\n\t\t\t\t\tconst source = moveSide.active[sourceSlot];\r\n\t\t\t\t\tif (!source || source.fainted) continue;\r\n\t\t\r\n\t\t\t\t\tconst activeMove = this.dex.getActiveMove(move.id);\r\n\t\t\t\t\tconst moveTargetType = activeMove.target ?? 'normal';\r\n\t\t\r\n\t\t\t\t\tconst targets = this.getAllActive().filter(t => {\r\n\t\t\t\t\t\tif (!t || t.fainted) return false;\r\n\t\t\r\n\t\t\t\t\t\tswitch (moveTargetType) {\r\n\t\t\t\t\t\t\tcase 'self': return t === source;\r\n\t\t\t\t\t\t\tcase 'adjacentAlly': return t !== source && t.side === source.side && source.isAdjacent(t);\r\n\t\t\t\t\t\t\tcase 'adjacentAllyOrSelf': return t.side === source.side && source.isAdjacent(t);\r\n\t\t\t\t\t\t\tcase 'allySide': return t === source;\r\n\t\t\t\t\t\t\tcase 'foeSide': return t.side !== source.side;\r\n\t\t\t\t\t\t\tcase 'allAdjacentFoes': return t.side !== source.side && source.isAdjacent(t);\r\n\t\t\t\t\t\t\tcase 'allAdjacent': return source.isAdjacent(t);\r\n\t\t\t\t\t\t\tcase 'allyTeam': return t.side === source.side;\r\n\t\t\t\t\t\t\tcase 'all': return true;\r\n\t\t\t\t\t\t\tcase 'normal': return t !== source && t.side !== source.side;\r\n\t\t\t\t\t\t\tdefault: return false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t\tfor (const target of targets) {\r\n\t\t\t\t\t\tif (activeMove.status) target.trySetStatus(activeMove.status, source, activeMove);\r\n\t\t\t\t\t\tif (activeMove.volatileStatus) target.addVolatile(activeMove.volatileStatus, source, activeMove);\r\n\t\t\t\t\t\tif (activeMove.boosts) this.boost(activeMove.boosts, target, source, activeMove);\r\n\t\t\t\t\t\tif (activeMove.heal) {\r\n\t\t\t\t\t\t// Extract numerator and denominator for healing fraction (e.g., Recover heals 50% of max HP)\r\n\t\t\t\t\t\t\tconst [numerator, denominator] = activeMove.heal;\r\n\t\t\t\t\t\t\t// Calculate the healing amount based on target's max HP\r\n\t\t\t\t\t\t\tconst healAmount = Math.floor(target.maxhp * (numerator / denominator));\r\n\t\t\t\t\t\t\t// Apply the healing effect to the target\r\n\t\t\t\t\t\t\tthis.heal(healAmount, target, source, activeMove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (typeof activeMove.onHit === 'function') {\r\n\t\t\t\t\t\t\tactiveMove.onHit.call(this, target, source, activeMove);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t// Apply any side/field conditions\r\n\t\t\t\t\tif (activeMove.sideCondition) {\r\n\t\t\t\t\t\tsource.side.addSideCondition(activeMove.sideCondition, source, activeMove);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (activeMove.pseudoWeather) {\r\n\t\t\t\t\t\tthis.field.addPseudoWeather(activeMove.pseudoWeather, source, activeMove);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t// Clean up after applying moves\r\n\t\t\t\tslotCon.congestionQueue = [];\r\n\t\t\t\tside.removeSlotCondition(pokemon, 'congestionstatus');\r\n\t\t\t},\r\n\t\t},\r\n\tendlessdream: { \r\n\t\tname: \"Endless Dream\",\r\n\t\teffectType: 'PseudoWeather',\r\n\t\tduration: 0,\r\n\t\tonFieldStart(field, source, effect) {\r\n\t\t\tthis.add('-pseudoweather', 'EndlessDream', '[of] ' + source);\r\n\t\t},\r\n\t\tonSetStatus(status, target, source, effect) {\r\n\t\t\tif (target.hasAbility('vitalspirit') || target.hasAbility('insomnia')) return;\r\n\t\t\tif ((effect as Move)?.status || effect?.id === 'yawn') {\r\n\t\t\t\tthis.add('-fail', target, '[from] Endless Dream');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tonResidualOrder: 23,\r\n\t\tonEnd() {\r\n\t\t\tthis.add('-fieldend', 'none');\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
