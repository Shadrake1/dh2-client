{
  "version": 3,
  "sources": ["../../../../data/mods/clubmonsrequiem/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n\t\texcludeStandardTiers: true,\r\n\t\tcustomTiers: [\"CM\", \"CM Ubers\", \"CM (NFE)\"],\r\n\t},\r\n\tinit() {\t\t\r\n\t\tfor (const id in this.dataCache.Pokedex) {\r\n\t\t\tconst newMon = this.dataCache.Pokedex[id];\r\n\t\t\tif (!newMon || !newMon.copyData) continue; // weeding out Pok\u00E9mon that aren't new\r\n\t\t\tconst copyData = this.dataCache.Pokedex[this.toID(newMon.copyData)];\r\n\r\n\t\t\tif (!newMon.types && copyData.types) newMon.types = copyData.types;\r\n\t\t\tif (!newMon.baseStats && copyData.baseStats) newMon.baseStats = copyData.baseStats;\r\n\t\t\tif (!newMon.abilities && copyData.abilities) newMon.abilities = copyData.abilities;\r\n\t\t\tif (!newMon.num && copyData.num) newMon.num = copyData.num * -1; // inverting the original's dex number\r\n\t\t\tif (!newMon.genderRatio && copyData.genderRatio) newMon.genderRatio = copyData.genderRatio;\r\n\t\t\tif (!newMon.heightm && copyData.heightm) newMon.heightm = copyData.heightm;\r\n\t\t\tif (!newMon.weightkg && copyData.weightkg) newMon.weightkg = copyData.weightkg;\r\n\t\t\tif (!newMon.color && copyData.color) newMon.color = copyData.color;\r\n\t\t\tif (!newMon.eggGroups && copyData.eggGroups) newMon.eggGroups = copyData.eggGroups;\r\n\r\n\t\t\tlet copyMoves = newMon.copyData;\r\n\t\t\tif (newMon.copyMoves) copyMoves = newMon.copyMoves;\r\n\t\t\tif (copyMoves) {\r\n\t\t\t\tif (!this.dataCache.Learnsets[id]) this.dataCache.Learnsets[id] = {learnset: {}}; // create a blank learnset entry so we don't need a learnsets file (thank you ink)\r\n\t\t\t\tconst learnset = this.dataCache.Learnsets[this.toID(copyMoves)].learnset;\r\n\t\t\t\tfor (const moveid in learnset) {\r\n\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = learnset[moveid].filter(\r\n\t\t\t\t\t\t(method) => !method.includes('S')\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tif (newMon.movepoolAdditions) {\r\n\t\t\t\t\tfor (const move of newMon.movepoolAdditions) {\r\n\t\t\t\t\t\tthis.modData('Learnsets', this.toID(id)).learnset[this.toID(move)] = [\"8M\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (newMon.movepoolDeletions) {\r\n\t\t\t\t\tfor (const move of newMon.movepoolDeletions) {\r\n\t\t\t\t\t\tdelete this.modData('Learnsets', this.toID(id)).learnset[this.toID(move)];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// hard-coding a bit for Eclipseroid specifically (may rework if we get more fusions later but kinda doubt)\r\n\t\t\t\tif (newMon.name === 'Eclipseroid') {\r\n\t\t\t\t\tfor (const moveid in this.dataCache.Learnsets[this.toID(\"Lunatone\")].learnset) {\r\n\t\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = this.dataCache.Learnsets[this.toID(\"Lunatone\")].learnset[moveid].filter(\r\n\t\t\t\t\t\t\t(method) => !method.includes('S')\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t  switchIn(pokemon: Pokemon, pos: number, sourceEffect: Effect | null = null, isDrag?: boolean) {\r\n\t\tif (!pokemon || pokemon.isActive) {\r\n\t\t\tthis.battle.hint(\"A switch failed because the Pok\u00E9mon trying to switch in is already in.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst side = pokemon.side;\r\n\t\tif (pos >= side.active.length) {\r\n\t\t\tthrow new Error(`Invalid switch position ${pos} / ${side.active.length}`);\r\n\t\t}\r\n\t\tconst oldActive = side.active[pos];\r\n\t\tconst unfaintedActive = oldActive?.hp ? oldActive : null;\r\n\t\tif (unfaintedActive) {\r\n\t\t\toldActive.beingCalledBack = true;\r\n\t\t\tlet switchCopyFlag: 'copyvolatile' | 'shedtail' | boolean = false;\r\n\t\t\tif (sourceEffect && typeof (sourceEffect as Move).selfSwitch === 'string') {\r\n\t\t\t\tswitchCopyFlag = (sourceEffect as Move).selfSwitch!;\r\n\t\t\t}\r\n\t\t\tif (!oldActive.skipBeforeSwitchOutEventFlag && !isDrag) {\r\n\t\t\t\tthis.battle.runEvent('BeforeSwitchOut', oldActive);\r\n\t\t\t\tif (this.battle.gen >= 5) {\r\n\t\t\t\t\tthis.battle.eachEvent('Update');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\toldActive.skipBeforeSwitchOutEventFlag = false;\r\n\t\t\tif (!this.battle.runEvent('SwitchOut', oldActive)) {\r\n\t\t\t\t// Warning: DO NOT interrupt a switch-out if you just want to trap a pokemon.\r\n\t\t\t\t// To trap a pokemon and prevent it from switching out, (e.g. Mean Look, Magnet Pull)\r\n\t\t\t\t// use the 'trapped' flag instead.\r\n\r\n\t\t\t\t// Note: Nothing in the real games can interrupt a switch-out (except Pursuit KOing,\r\n\t\t\t\t// which is handled elsewhere); this is just for custom formats.\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!oldActive.hp) {\r\n\t\t\t\t// a pokemon fainted from Pursuit before it could switch\r\n\t\t\t\treturn 'pursuitfaint';\r\n\t\t\t}\r\n\r\n\t\t\t// will definitely switch out at this point\r\n\r\n\t\t\toldActive.illusion = null;\r\n\t\t\tthis.battle.singleEvent('End', oldActive.getAbility(), oldActive.abilityState, oldActive);\r\n\r\n\t\t\t// if a pokemon is forced out by Whirlwind/etc or Eject Button/Pack, it can't use its chosen move\r\n\t\t\tthis.battle.queue.cancelAction(oldActive);\r\n\r\n\t\t\tlet newMove = null;\r\n\t\t\tif (this.battle.gen === 4 && sourceEffect) {\r\n\t\t\t\tnewMove = oldActive.lastMove;\r\n\t\t\t}\r\n\t\t\tif (switchCopyFlag) {\r\n\t\t\t\tpokemon.copyVolatileFrom(oldActive, switchCopyFlag);\r\n\t\t\t}\r\n\t\t\tif (newMove) pokemon.lastMove = newMove;\r\n\t\t\toldActive.clearVolatile();\r\n\t\t}\r\n\t\tif (oldActive) {\r\n\t\t\toldActive.isActive = false;\r\n\t\t\toldActive.isStarted = false;\r\n\t\t\toldActive.usedItemThisTurn = false;\r\n\t\t\toldActive.statsRaisedThisTurn = false;\r\n\t\t\toldActive.statsLoweredThisTurn = false;\r\n\t\t\toldActive.position = pokemon.position;\r\n\t\t\tpokemon.position = pos;\r\n\t\t\tside.pokemon[pokemon.position] = pokemon;\r\n\t\t\tside.pokemon[oldActive.position] = oldActive;\r\n\t\t}\r\n\t\tpokemon.isActive = true;\r\n\t\tside.active[pos] = pokemon;\r\n\t\tpokemon.activeTurns = 0;\r\n\t\tpokemon.activeMoveActions = 0;\r\n\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\tmoveSlot.used = false;\r\n\t\t}\r\n\t\tthis.battle.runEvent('BeforeSwitchIn', pokemon);\r\n\t\tif (sourceEffect) {\r\n\t\t\tthis.battle.add(isDrag ? 'drag' : 'switch', pokemon, pokemon.getDetails, '[from] ' + sourceEffect);\r\n\t\t} else {\r\n\t\t\tthis.battle.add(isDrag ? 'drag' : 'switch', pokemon, pokemon.getDetails);\r\n\t\t}\r\n\t\tpokemon.abilityOrder = this.battle.abilityOrder++;\r\n\t\tif (isDrag && this.battle.gen === 2) pokemon.draggedIn = this.battle.turn;\r\n\t\tpokemon.previouslySwitchedIn++;\r\n\t\t\r\n\t\tpokemon.m.previousPartner = oldActive;\r\n\t\tif (isDrag && this.battle.gen >= 5) {\r\n\t\t\t// runSwitch happens immediately so that Mold Breaker can make hazards bypass Clear Body and Levitate\r\n\t\t\tthis.battle.singleEvent('PreStart', pokemon.getAbility(), pokemon.abilityState, pokemon);\r\n\t\t\tthis.runSwitch(pokemon);\r\n\t\t} else {\r\n\t\t\tthis.battle.queue.insertChoice({choice: 'runUnnerve', pokemon});\r\n\t\t\tthis.battle.queue.insertChoice({choice: 'runSwitch', pokemon});\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t\t},\r\n\t},\r\n\tpokemon: {\r\n\t\ttakeItem(source?: Pokemon) {\r\n\t\t\tif (!this.item || this.itemState.knockedOff) return false;\r\n\t\t\tif (!source) source = this;\r\n\t\t\tif (this.battle.gen === 4) {\r\n\t\t\t\tif (toID(this.ability) === 'multitype') return false;\r\n\t\t\t\tif (toID(source.ability) === 'multitype') return false;\r\n\t\t\t}\r\n\t\t\tconst item = this.getItem();\r\n\t\t\tif (this.battle.runEvent('TakeItem', this, source, null, item)) {\r\n\t\t\t\tthis.item = '';\r\n\t\t\t\tconst oldItemState = this.itemState;\r\n\t\t\t\tthis.itemState = {id: '', target: this};\r\n\t\t\t\tthis.pendingStaleness = undefined;\r\n\t\t\t\tthis.battle.singleEvent('End', item, oldItemState, this);\r\n\t\t\t\tthis.battle.runEvent('AfterTakeItem', this, null, null, item);\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
