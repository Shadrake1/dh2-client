{
  "version": 3,
  "sources": ["../../../../data/mods/gen1johtomons/scripts.ts"],
  "sourcesContent": ["/**\r\n * Gen 1 mechanics are fairly different to those we know on current gen.\r\n * Therefor we need to make a lot of changes to the battle engine for this game simulation.\r\n * This generation inherits all the changes from older generations, that must be taken into account when editing code.\r\n */\r\n\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tinherit: 'gen1',\r\n\tgen: 1,\r\n\tinit() {\r\n\t\tfor (const i in this.data.Pokedex) {\r\n\t\t\t(this.data.Pokedex[i] as any).gender = 'N';\r\n\t\t\t(this.data.Pokedex[i] as any).eggGroups = null;\r\n\t\t}\r\n\t\tthis.modData('Learnsets', 'dratini').learnset.outrage = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'dragonair').learnset.outrage = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'dragonite').learnset.outrage = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'machop').learnset.vitalthrow = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'machoke').learnset.vitalthrow = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'machamp').learnset.vitalthrow = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'hitmonchan').learnset.machpunch = ['1L1'];\r\n\t\tthis.modData('Learnsets', 'arcanine').learnset.extremespeed = ['1L1'];\r\n\t},\r\n\t// Gen 1 stores the last damage dealt by a move in the battle.\r\n\t// This is used for the move Counter.\r\n\tlastDamage: 0,\r\n\t// BattleSide scripts.\r\n\t// In gen 1, last move information is stored on the side rather than on the active Pok\u00E9mon.\r\n\t// This is because there was actually no side, just Battle and active Pok\u00E9mon effects.\r\n\t// Side's lastMove is used for Counter and Mirror Move.\r\n\tside: {\r\n\t\tlastMove: null,\r\n\t},\r\n\t// BattlePokemon scripts.\r\n\tpokemon: {\r\n\t\tgetStat(statName, unmodified) {\r\n\t\t\t// @ts-ignore - type checking prevents 'hp' from being passed, but we're paranoid\r\n\t\t\tif (statName === 'hp') throw new Error(\"Please read `maxhp` directly\");\r\n\t\t\tif (unmodified) return this.storedStats[statName];\r\n\t\t\treturn this.modifiedStats![statName];\r\n\t\t},\r\n\t\t// Gen 1 function to apply a stat modification that is only active until the stat is recalculated or mon switched.\r\n\t\tmodifyStat(statName, modifier) {\r\n\t\t\tif (!(statName in this.storedStats)) throw new Error(\"Invalid `statName` passed to `modifyStat`\");\r\n\t\t\tconst modifiedStats = this.battle.clampIntRange(Math.floor(this.modifiedStats![statName] * modifier), 1, 999);\r\n\t\t\tthis.modifiedStats![statName] = modifiedStats;\r\n\t\t},\r\n\t\t// In generation 1, boosting function increases the stored modified stat and checks for opponent's status.\r\n\t\tboostBy(boost) {\r\n\t\t\tlet changed = false;\r\n\t\t\tlet i: BoostName;\r\n\t\t\tfor (i in boost) {\r\n\t\t\t\tconst delta = boost[i];\r\n\t\t\t\tif (delta === undefined) continue;\r\n\t\t\t\tif (delta > 0 && this.boosts[i] >= 6) continue;\r\n\t\t\t\tif (delta < 0 && this.boosts[i] <= -6) continue;\r\n\t\t\t\tthis.boosts[i] += delta;\r\n\t\t\t\tif (this.boosts[i] > 6) {\r\n\t\t\t\t\tthis.boosts[i] = 6;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.boosts[i] < -6) {\r\n\t\t\t\t\tthis.boosts[i] = -6;\r\n\t\t\t\t}\r\n\t\t\t\tchanged = true;\r\n\t\t\t\t// Recalculate the modified stat\r\n\t\t\t\tif (i === 'evasion' || i === 'accuracy') continue;\r\n\t\t\t\tlet stat = this.species.baseStats[i];\r\n\t\t\t\tstat = Math.floor(Math.floor(2 * stat + this.set.ivs[i] + Math.floor(this.set.evs[i] / 4)) * this.level / 100 + 5);\r\n\t\t\t\tthis.modifiedStats![i] = this.storedStats[i] = Math.floor(stat);\r\n\t\t\t\tif (this.boosts[i] >= 0) {\r\n\t\t\t\t\tthis.modifyStat!(i, [1, 1.5, 2, 2.5, 3, 3.5, 4][this.boosts[i]]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.modifyStat!(i, [100, 66, 50, 40, 33, 28, 25][-this.boosts[i]] / 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn changed;\r\n\t\t},\r\n\t},\r\n\t// Battle scripts.\r\n\t// runMove can be found in scripts.js. This function is the main one when running a move.\r\n\t// It deals with the beforeMove and AfterMoveSelf events.\r\n\t// This leads with partial trapping moves shennanigans after the move has been used.\r\n\t// It also deals with how PP reduction works on gen 1.\r\n\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect) {\r\n\t\tconst target = this.getTarget(pokemon, moveOrMoveName, targetLoc);\r\n\t\tconst move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tif (target?.subFainted) target.subFainted = null;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\tif (pokemon.moveThisTurn || !this.runEvent('BeforeMove', pokemon, target, move)) {\r\n\t\t\t// Prevent invulnerability from persisting until the turn ends.\r\n\t\t\tpokemon.removeVolatile('twoturnmove');\r\n\t\t\t// Rampage moves end without causing confusion\r\n\t\t\tdelete pokemon.volatiles['lockedmove'];\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\t// This is only run for sleep.\r\n\t\t\tthis.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (move.beforeMoveCallback) {\r\n\t\t\tif (move.beforeMoveCallback.call(this, pokemon, target, move)) {\r\n\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet lockedMove = this.runEvent('LockMove', pokemon);\r\n\t\tif (lockedMove === true) lockedMove = false;\r\n\t\tif (\r\n\t\t\t!lockedMove &&\r\n\t\t\t(!pokemon.volatiles['partialtrappinglock'] || pokemon.volatiles['partialtrappinglock'].locked !== target)\r\n\t\t) {\r\n\t\t\tpokemon.deductPP(move, null, target);\r\n\t\t\t// On gen 1 moves are stored when they are chosen and a PP is deducted.\r\n\t\t\tpokemon.side.lastMove = move;\r\n\t\t\tpokemon.lastMove = move;\r\n\t\t} else {\r\n\t\t\tsourceEffect = move;\r\n\t\t}\r\n\t\tif (pokemon.volatiles['partialtrappinglock'] && target !== pokemon.volatiles['partialtrappinglock'].locked) {\r\n\t\t\tconst moveSlot = pokemon.moveSlots.find(ms => ms.id === move.id);\r\n\t\t\tif (moveSlot && moveSlot.pp < 0) {\r\n\t\t\t\tmoveSlot.pp = 0;\r\n\t\t\t\tthis.hint(\"You normally would have underflowed their PP to 63, but I removed that!\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.useMove(move, pokemon, target, sourceEffect);\r\n\t\tthis.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\r\n\t\t// If target fainted\r\n\t\tif (target && target.hp <= 0) {\r\n\t\t\t// We remove recharge\r\n\t\t\tif (pokemon.volatiles['mustrecharge']) pokemon.removeVolatile('mustrecharge');\r\n\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t// We remove screens\r\n\t\t\ttarget.side.removeSideCondition('reflect');\r\n\t\t\ttarget.side.removeSideCondition('lightscreen');\r\n\t\t\tpokemon.removeVolatile('twoturnmove');\r\n\t\t} else if (pokemon.hp) {\r\n\t\t\tthis.runEvent('AfterMoveSelf', pokemon, target, move);\r\n\t\t}\r\n\t\tif (pokemon.volatiles['mustrecharge']) this.add('-mustrecharge', pokemon);\r\n\r\n\t\t// For partial trapping moves, we are saving the target\r\n\t\tif (move.volatileStatus === 'partiallytrapped' && target && target.hp > 0) {\r\n\t\t\t// Let's check if the lock exists\r\n\t\t\tif (pokemon.volatiles['partialtrappinglock'] && target.volatiles['partiallytrapped']) {\r\n\t\t\t\t// Here the partialtrappinglock volatile has been already applied\r\n\t\t\t\tconst sourceVolatile = pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\tconst targetVolatile = target.volatiles['partiallytrapped'];\r\n\t\t\t\tif (!sourceVolatile.locked) {\r\n\t\t\t\t\t// If it's the first hit, we save the target\r\n\t\t\t\t\tsourceVolatile.locked = target;\r\n\t\t\t\t} else if (target !== pokemon && target !== sourceVolatile.locked) {\r\n\t\t\t\t\t// Our target switched out! Re-roll the duration, damage, and accuracy.\r\n\t\t\t\t\tconst duration = this.sample([2, 2, 2, 2, 3, 3, 3, 3]);\r\n\t\t\t\t\tsourceVolatile.duration = duration;\r\n\t\t\t\t\tsourceVolatile.locked = target;\r\n\t\t\t\t\t// Duration reset thus partially trapped at 2 always.\r\n\t\t\t\t\ttargetVolatile.duration = 2;\r\n\t\t\t\t}\r\n\t\t\t} // If we move to here, the move failed and there's no partial trapping lock.\r\n\t\t}\r\n\t},\r\n\t// useMove can be found on scripts.js\r\n\t// It is the function that actually uses the move, running ModifyMove events.\r\n\t// It uses the move and then deals with the effects after the move.\r\n\tuseMove(moveOrMoveName, pokemon, target, sourceEffect) {\r\n\t\tif (!sourceEffect && this.effect.id) sourceEffect = this.effect;\r\n\t\tconst baseMove = this.dex.moves.get(moveOrMoveName);\r\n\t\tlet move = this.dex.getActiveMove(baseMove);\r\n\t\tif (target === undefined) target = this.getRandomTarget(pokemon, move);\r\n\t\tif (move.target === 'self') {\r\n\t\t\ttarget = pokemon;\r\n\t\t}\r\n\t\tif (sourceEffect) move.sourceEffect = sourceEffect.id;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\tthis.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\tif (baseMove.target !== move.target) {\r\n\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\ttarget = this.getRandomTarget(pokemon, move);\r\n\t\t}\r\n\t\tmove = this.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\tif (baseMove.target !== move.target) {\r\n\t\t\t// Check again, this shouldn't ever happen on Gen 1.\r\n\t\t\ttarget = this.getRandomTarget(pokemon, move);\r\n\t\t\tthis.debug('not a gen 1 mechanic');\r\n\t\t}\r\n\t\tif (!move) return false;\r\n\r\n\t\tlet attrs = '';\r\n\t\tif (pokemon.fainted) {\r\n\t\t\t// Removing screens upon faint.\r\n\t\t\tpokemon.side.removeSideCondition('reflect');\r\n\t\t\tpokemon.side.removeSideCondition('lightscreen');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (sourceEffect) attrs += '|[from]' + this.dex.conditions.get(sourceEffect);\r\n\t\tthis.addMove('move', pokemon, move.name, target + attrs);\r\n\r\n\t\tif (!this.singleEvent('Try', move, null, pokemon, target, move)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (!this.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t!this.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\tlet damage: number | undefined | false | '' = false;\r\n\t\tif (!target || target.fainted) {\r\n\t\t\tthis.attrLastMove('[notarget]');\r\n\t\t\tthis.add('-notarget');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tdamage = this.tryMoveHit(target, pokemon, move);\r\n\r\n\t\t// Store 0 damage for last damage if move failed or dealt 0 damage.\r\n\t\t// This only happens on moves that don't deal damage but call GetDamageVarsForPlayerAttack (disassembly).\r\n\t\tconst neverDamageMoves = [\r\n\t\t\t'conversion', 'haze', 'mist', 'focusenergy', 'confuseray', 'supersonic', 'transform', 'lightscreen', 'reflect', 'substitute', 'mimic', 'leechseed', 'splash', 'softboiled', 'recover', 'rest',\r\n\t\t];\r\n\t\tif (\r\n\t\t\t!damage &&\r\n\t\t\t(move.category !== 'Status' || (move.status && !['psn', 'tox', 'par'].includes(move.status))) &&\r\n\t\t\t!neverDamageMoves.includes(move.id)\r\n\t\t) {\r\n\t\t\tthis.lastDamage = 0;\r\n\t\t}\r\n\r\n\t\t// Go ahead with results of the used move.\r\n\t\tif (damage === false) {\r\n\t\t\tthis.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (!move.negateSecondary) {\r\n\t\t\tthis.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\tthis.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\t// tryMoveHit can be found on scripts.js\r\n\t// This function attempts a move hit and returns the attempt result before the actual hit happens.\r\n\t// It deals with partial trapping weirdness and accuracy bugs as well.\r\n\ttryMoveHit(target, pokemon, move) {\r\n\t\tlet damage: number | false | undefined = 0;\r\n\r\n\t\t// First, check if the target is semi-invulnerable\r\n\t\tlet hitResult = this.runEvent('Invulnerability', target, pokemon, move);\r\n\t\tif (hitResult === false) {\r\n\t\t\tif (!move.spreadHit) this.attrLastMove('[miss]');\r\n\t\t\tthis.add('-miss', pokemon);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Then, check if the Pok\u00E9mon is immune to this move.\r\n\t\tif (\r\n\t\t\t(!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) &&\r\n\t\t\t!target.runImmunity(move.type, true)\r\n\t\t) {\r\n\t\t\tif (move.selfdestruct) {\r\n\t\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\thitResult = this.singleEvent('TryImmunity', move, null, target, pokemon, move);\r\n\t\tif (hitResult === false) {\r\n\t\t\tthis.add('-immune', target);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Now, let's calculate the accuracy.\r\n\t\tlet accuracy = move.accuracy;\r\n\r\n\t\t// Partial trapping moves: true accuracy while it lasts\r\n\t\tif (move.volatileStatus === 'partiallytrapped' && target === pokemon.volatiles['partialtrappinglock']?.locked) {\r\n\t\t\taccuracy = true;\r\n\t\t}\r\n\r\n\t\t// If a sleep inducing move is used while the user is recharging, the accuracy is true.\r\n\t\tif (move.status === 'slp' && target && target.volatiles['mustrecharge']) {\r\n\t\t\taccuracy = true;\r\n\t\t}\r\n\r\n\t\t// OHKO moves only have a chance to hit if the user is at least as fast as the target\r\n\t\tif (move.ohko) {\r\n\t\t\tif (target.speed > pokemon.speed) {\r\n\t\t\t\tthis.add('-immune', target, '[ohko]');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate true accuracy for gen 1, which uses 0-255.\r\n\t\t// Gen 1 uses the same boost table for accuracy and evasiveness as every other stat\r\n\t\tconst boostTable = [25, 28, 33, 40, 50, 66, 100, 150, 200, 250, 300, 350, 400];\r\n\t\tif (accuracy !== true) {\r\n\t\t\taccuracy = Math.floor(accuracy * 255 / 100);\r\n\t\t\t// Check also for accuracy modifiers.\r\n\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\taccuracy = Math.floor(accuracy * (boostTable[pokemon.boosts.accuracy + 6] / 100));\r\n\t\t\t}\r\n\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\taccuracy = Math.floor(accuracy * (boostTable[-target.boosts.evasion + 6] / 100));\r\n\t\t\t}\r\n\t\t\taccuracy = Math.min(accuracy, 255);\r\n\t\t}\r\n\t\taccuracy = this.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t// Moves that target the user do not suffer from the 1/256 miss chance.\r\n\t\tif (move.target === 'self' && accuracy !== true) accuracy++;\r\n\t\tif (move.target === 'self' && accuracy !== true) accuracy++; // this extra one removes the self-heal glitch\r\n\r\n\t\t// 1/256 chance of missing always, no matter what. Besides the aforementioned exceptions.\r\n\t\tif (accuracy !== true && !this.randomChance(accuracy, 256)) {\r\n\t\t\tthis.attrLastMove('[miss]');\r\n\t\t\tthis.add('-miss', pokemon);\r\n\t\t\tif (accuracy === 255) this.hint(\"This move missed because of the 1/256 glitch.\");\r\n\t\t\tdamage = false;\r\n\t\t}\r\n\r\n\t\t// If damage is 0 and not false it means it didn't miss, let's calc.\r\n\t\tif (damage !== false) {\r\n\t\t\tpokemon.lastDamage = 0;\r\n\t\t\tif (move.multihit) {\r\n\t\t\t\tlet hits = move.multihit;\r\n\t\t\t\tif (Array.isArray(hits)) {\r\n\t\t\t\t\t// Yes, it's hardcoded... meh\r\n\t\t\t\t\tif (hits[0] === 2 && hits[1] === 5) {\r\n\t\t\t\t\t\thits = this.sample([2, 2, 3, 3, 4, 5]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thits = this.random(hits[0], hits[1] + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\thits = Math.floor(hits);\r\n\t\t\t\t// In gen 1, all the hits have the same damage for multihits move\r\n\t\t\t\tlet moveDamage: number | undefined | false = 0;\r\n\t\t\t\tlet i: number;\r\n\t\t\t\tfor (i = 0; i < hits && target.hp && pokemon.hp; i++) {\r\n\t\t\t\t\tmove.hit = i + 1;\r\n\t\t\t\t\tmoveDamage = this.moveHit(target, pokemon, move);\r\n\t\t\t\t\tif (moveDamage === false) break;\r\n\t\t\t\t\tdamage = (moveDamage || 0);\r\n\t\t\t\t\t// Move damage is fixed to be the first move's damage\r\n\t\t\t\t\tif (i === 0) move.damage = damage;\r\n\t\t\t\t\tif (target.subFainted) {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmove.damage = null;\r\n\t\t\t\tif (i === 0) return 1;\r\n\t\t\t\tthis.add('-hitcount', target, i);\r\n\t\t\t} else {\r\n\t\t\t\tdamage = this.moveHit(target, pokemon, move);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.category !== 'Status') {\r\n\t\t\ttarget.gotAttacked(move, damage, pokemon);\r\n\t\t}\r\n\r\n\t\tif (move.selfdestruct) {\r\n\t\t\tif (!target.subFainted) {\r\n\t\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t\t} else {\r\n\t\t\t\tthis.hint(`In Gen 1, the user of ${move.name} will not take damage if it breaks a Substitute.`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The move missed.\r\n\t\tif (!damage && damage !== 0) {\r\n\t\t\t// Delete the partial trap lock if necessary.\r\n\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (move.ohko) this.add('-ohko');\r\n\r\n\t\tif (!move.negateSecondary) {\r\n\t\t\tthis.singleEvent('AfterMoveSecondary', move, null, target, pokemon, move);\r\n\t\t\tthis.runEvent('AfterMoveSecondary', target, pokemon, move);\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t},\r\n\t// move Hit can be found on scripts.js\r\n\t// It deals with the actual move hit, as the name indicates, dealing damage and/or effects.\r\n\t// This function also deals with the Gen 1 Substitute behaviour on the hitting process.\r\n\tmoveHit(target, pokemon, move, moveData, isSecondary, isSelf) {\r\n\t\tlet damage: number | false | null | undefined = 0;\r\n\r\n\t\tif (!isSecondary && !isSelf) this.setActiveMove(move, pokemon, target);\r\n\t\tlet hitResult: number | boolean = true;\r\n\t\tif (!moveData) moveData = move;\r\n\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\t// We get the sub to the target to see if it existed\r\n\t\tconst targetSub = (target) ? target.volatiles['substitute'] : false;\r\n\t\tconst targetHadSub = (targetSub !== null && targetSub !== false && (typeof targetSub !== 'undefined'));\r\n\r\n\t\tif (target) {\r\n\t\t\thitResult = this.singleEvent('TryHit', moveData, {}, target, pokemon, move);\r\n\r\n\t\t\t// Handle here the applying of partial trapping moves to Pok\u00E9mon with Substitute\r\n\t\t\tif (targetSub && moveData.volatileStatus && moveData.volatileStatus === 'partiallytrapped') {\r\n\t\t\t\ttarget.addVolatile(moveData.volatileStatus, pokemon, move);\r\n\t\t\t}\r\n\r\n\t\t\tif (!hitResult) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Only run the hit events for the hit itself, not the secondary or self hits\r\n\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\thitResult = this.runEvent('TryHit', target, pokemon, move);\r\n\t\t\t\tif (!hitResult) {\r\n\t\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\t\t// Special Substitute hit flag\r\n\t\t\t\t\tif (hitResult !== 0) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.runEvent('TryFieldHit', target, pokemon, move)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else if (isSecondary && !moveData.self) {\r\n\t\t\t\thitResult = this.runEvent('TrySecondaryHit', target, pokemon, moveData);\r\n\t\t\t}\r\n\r\n\t\t\tif (hitResult === 0) {\r\n\t\t\t\ttarget = null;\r\n\t\t\t} else if (!hitResult) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (target) {\r\n\t\t\tlet didSomething = false;\r\n\r\n\t\t\tdamage = this.getDamage(pokemon, target, moveData);\r\n\r\n\t\t\t// getDamage has several possible return values:\r\n\t\t\t//\r\n\t\t\t//   a number:\r\n\t\t\t//     means that much damage is dealt (0 damage still counts as dealing\r\n\t\t\t//     damage for the purposes of things like Static)\r\n\t\t\t//   false:\r\n\t\t\t//     gives error message: \"But it failed!\" and move ends\r\n\t\t\t//   null:\r\n\t\t\t//     the move ends, with no message (usually, a custom fail message\r\n\t\t\t//     was already output by an event handler)\r\n\t\t\t//   undefined:\r\n\t\t\t//     means no damage is dealt and the move continues\r\n\t\t\t//\r\n\t\t\t// basically, these values have the same meanings as they do for event\r\n\t\t\t// handlers.\r\n\r\n\t\t\tif ((damage || damage === 0) && !target.fainted) {\r\n\t\t\t\tif (move.noFaint && damage >= target.hp) {\r\n\t\t\t\t\tdamage = target.hp - 1;\r\n\t\t\t\t}\r\n\t\t\t\tdamage = this.damage(damage, target, pokemon, move);\r\n\t\t\t\tif (!(damage || damage === 0)) return false;\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t} else if (damage === false && typeof hitResult === 'undefined') {\r\n\t\t\t\tthis.add('-fail', target);\r\n\t\t\t}\r\n\t\t\tif (damage === false || damage === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (moveData.boosts && target.hp) {\r\n\t\t\t\tif (!this.boost(moveData.boosts, target, pokemon, move)) {\r\n\t\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t\t// Check the status of the Pok\u00E9mon whose turn is not.\r\n\t\t\t\t// When a move that affects stat levels is used, if the Pok\u00E9mon whose turn it is not right now is paralyzed or\r\n\t\t\t\t// burned, the correspoding stat penalties will be applied again to that Pok\u00E9mon.\r\n\t\t\t\tif (pokemon.side.foe.active[0] && pokemon.side.foe.active[0].status) {\r\n\t\t\t\t\t// If it's paralysed, quarter its speed.\r\n\t\t\t\t\tif (pokemon.side.foe.active[0].status === 'par') {\r\n\t\t\t\t\t\tpokemon.side.foe.active[0].modifyStat!('spe', 0.25);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If it's burned, halve its attack.\r\n\t\t\t\t\tif (pokemon.side.foe.active[0].status === 'brn') {\r\n\t\t\t\t\t\tpokemon.side.foe.active[0].modifyStat!('atk', 0.5);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.heal && !target.fainted) {\r\n\t\t\t\tconst d = target.heal(Math.floor(target.maxhp * moveData.heal[0] / moveData.heal[1]));\r\n\t\t\t\tif (!d) {\r\n\t\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.add('-heal', target, target.getHealth);\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t}\r\n\t\t\tif (moveData.status) {\r\n\t\t\t\t// Gen 1 bug: If the target has just used hyperbeam and must recharge, its status will be ignored and put to sleep.\r\n\t\t\t\t// This does NOT revert the paralyse speed drop or the burn attack drop.\r\n\t\t\t\t// Also, being put to sleep clears the recharge condition.\r\n\t\t\t\tif (moveData.status === 'slp' && target.volatiles['mustrecharge']) {\r\n\t\t\t\t\t// The sleep move is guaranteed to hit in this situation, unless Sleep Clause activates.\r\n\t\t\t\t\t// Do not clear recharge in that case.\r\n\t\t\t\t\tif (target.setStatus(moveData.status, pokemon, move)) {\r\n\t\t\t\t\t\ttarget.removeVolatile('mustrecharge');\r\n\t\t\t\t\t\tthis.hint(\r\n\t\t\t\t\t\t\t\"In Gen 1, if a Pok\u00E9mon that has just used Hyper Beam and has yet to recharge is targeted with a sleep inducing move, \" +\r\n\t\t\t\t\t\t\t\"any other status it may already have will be ignored and sleep will be induced regardless.\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!target.status) {\r\n\t\t\t\t\tif (target.setStatus(moveData.status, pokemon, move)) {\r\n\t\t\t\t\t\t// Gen 1 mechanics: The burn attack drop and the paralyse speed drop are applied here directly on stat modifiers.\r\n\t\t\t\t\t\tif (moveData.status === 'brn') target.modifyStat!('atk', 0.5);\r\n\t\t\t\t\t\tif (moveData.status === 'par') target.modifyStat!('spe', 0.25);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!isSecondary) {\r\n\t\t\t\t\tif (target.status === moveData.status) {\r\n\t\t\t\t\t\tthis.add('-fail', target, target.status);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.add('-fail', target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdidSomething = true;\r\n\t\t\t}\r\n\t\t\tif (moveData.forceStatus) {\r\n\t\t\t\tif (target.setStatus(moveData.forceStatus, pokemon, move)) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tif (moveData.forceStatus === 'brn') target.modifyStat('atk', 0.5);\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tif (moveData.forceStatus === 'par') target.modifyStat('spe', 0.25);\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.volatileStatus) {\r\n\t\t\t\tif (target.addVolatile(moveData.volatileStatus, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.sideCondition) {\r\n\t\t\t\tif (target.side.addSideCondition(moveData.sideCondition, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveData.pseudoWeather) {\r\n\t\t\t\tif (this.field.addPseudoWeather(moveData.pseudoWeather, pokemon, move)) {\r\n\t\t\t\t\tdidSomething = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Hit events\r\n\t\t\thitResult = this.singleEvent('Hit', moveData, {}, target, pokemon, move);\r\n\t\t\tif (!isSelf && !isSecondary) {\r\n\t\t\t\tthis.runEvent('Hit', target, pokemon, move);\r\n\t\t\t}\r\n\t\t\tif (!hitResult && !didSomething) {\r\n\t\t\t\tif (hitResult === false) this.add('-fail', target);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst targetHasSub = !!(target?.volatiles['substitute']);\r\n\r\n\t\t// Here's where self effects are applied.\r\n\t\tconst doSelf = (targetHadSub && targetHasSub) || !targetHadSub;\r\n\t\tif (moveData.self && (doSelf || (moveData.self !== true && moveData.self.volatileStatus === 'partialtrappinglock'))) {\r\n\t\t\tthis.moveHit(pokemon, pokemon, move, moveData.self, isSecondary, true);\r\n\t\t}\r\n\r\n\t\t// Now we can save the partial trapping damage.\r\n\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\tpokemon.volatiles['partialtrappinglock'].damage = pokemon.lastDamage;\r\n\t\t}\r\n\r\n\t\t// Apply move secondaries.\r\n\t\tif (moveData.secondaries) {\r\n\t\t\tfor (const secondary of moveData.secondaries) {\r\n\t\t\t\t// We check here whether to negate the probable secondary status if it's para, burn, or freeze.\r\n\t\t\t\t// In the game, this is checked and if true, the random number generator is not called.\r\n\t\t\t\t// That means that a move that does not share the type of the target can status it.\r\n\t\t\t\t// If a move that was not fire-type would exist on Gen 1, it could burn a Pok\u00E9mon.\r\n\t\t\t\tif (!(secondary.status && ['par', 'brn', 'frz'].includes(secondary.status) && target && target.hasType(move.type))) {\r\n\t\t\t\t\tif (secondary.chance === undefined || this.randomChance(Math.ceil(secondary.chance * 256 / 100), 256)) {\r\n\t\t\t\t\t\tthis.moveHit(target, pokemon, move, secondary, true, isSelf);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.selfSwitch && pokemon.hp) {\r\n\t\t\tpokemon.switchFlag = move.selfSwitch;\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t},\r\n\t// boost can be found on sim/battle.js on Battle object.\r\n\t// It deals with Pok\u00E9mon stat boosting, including Gen 1 buggy behaviour with burn and paralyse.\r\n\tboost(boost, target, source = null, effect = null) {\r\n\t\tif (this.event) {\r\n\t\t\tif (!target) target = this.event.target;\r\n\t\t\tif (!source) source = this.event.source;\r\n\t\t\tif (!effect) effect = this.effect;\r\n\t\t}\r\n\t\tif (typeof effect === 'string') effect = this.dex.conditions.get(effect);\r\n\t\tif (!target || !target.hp) return 0;\r\n\t\tlet success = null;\r\n\t\tboost = this.runEvent('Boost', target, source, effect, {...boost});\r\n\t\tlet i: BoostName;\r\n\t\tfor (i in boost) {\r\n\t\t\tconst currentBoost: SparseBoostsTable = {};\r\n\t\t\tcurrentBoost[i] = boost[i];\r\n\t\t\tif (boost[i] !== 0 && target.boostBy(currentBoost)) {\r\n\t\t\t\tsuccess = true;\r\n\t\t\t\tlet msg = '-boost';\r\n\t\t\t\tif (boost[i]! < 0) {\r\n\t\t\t\t\tmsg = '-unboost';\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tboost[i] = -boost[i];\r\n\t\t\t\t\t// Re-add attack and speed drops if not present\r\n\t\t\t\t\tif (i === 'atk' && target.status === 'brn' && !target.volatiles['brnattackdrop']) {\r\n\t\t\t\t\t\ttarget.addVolatile('brnattackdrop');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i === 'spe' && target.status === 'par' && !target.volatiles['parspeeddrop']) {\r\n\t\t\t\t\t\ttarget.addVolatile('parspeeddrop');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Check for boost increases deleting attack or speed drops\r\n\t\t\t\t\tif (i === 'atk' && target.status === 'brn' && target.volatiles['brnattackdrop']) {\r\n\t\t\t\t\t\ttarget.removeVolatile('brnattackdrop');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i === 'spe' && target.status === 'par' && target.volatiles['parspeeddrop']) {\r\n\t\t\t\t\t\ttarget.removeVolatile('parspeeddrop');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!effect || effect.effectType === 'Move') {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tthis.add(msg, target, i, boost[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tthis.add(msg, target, i, boost[i], '[from] ' + effect.fullname);\r\n\t\t\t\t}\r\n\t\t\t\tthis.runEvent('AfterEachBoost', target, source, effect, currentBoost);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.runEvent('AfterBoost', target, source, effect, boost);\r\n\t\treturn success;\r\n\t},\r\n\t// getDamage can be found on sim/battle.js on the Battle object.\r\n\t// It calculates the damage pokemon does to target with move.\r\n\tgetDamage(pokemon, target, move, suppressMessages) {\r\n\t\t// First of all, we get the move.\r\n\t\tif (typeof move === 'string') {\r\n\t\t\tmove = this.dex.getActiveMove(move);\r\n\t\t} else if (typeof move === 'number') {\r\n\t\t\tmove = {\r\n\t\t\t\tbasePower: move,\r\n\t\t\t\ttype: '???',\r\n\t\t\t\tcategory: 'Physical',\r\n\t\t\t\twillCrit: false,\r\n\t\t\t\tflags: {},\r\n\t\t\t} as ActiveMove;\r\n\t\t}\r\n\r\n\t\t// Let's see if the target is immune to the move.\r\n\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\r\n\t\t\tif (!target.runImmunity(move.type, true)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Is it an OHKO move?\r\n\t\tif (move.ohko) {\r\n\t\t\treturn target.maxhp;\r\n\t\t}\r\n\r\n\t\t// We edit the damage through move's damage callback if necessary.\r\n\t\tif (move.damageCallback) {\r\n\t\t\treturn move.damageCallback.call(this, pokemon, target);\r\n\t\t}\r\n\r\n\t\t// We take damage from damage=level moves (seismic toss).\r\n\t\tif (move.damage === 'level') {\r\n\t\t\treturn pokemon.level;\r\n\t\t}\r\n\r\n\t\t// If there's a fix move damage, we return that.\r\n\t\tif (move.damage) {\r\n\t\t\treturn move.damage;\r\n\t\t}\r\n\r\n\t\t// If it's the first hit on a Normal-type partially trap move, it hits Ghosts anyways but damage is 0.\r\n\t\tif (move.volatileStatus === 'partiallytrapped' && move.type === 'Normal' && target.hasType('Ghost')) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Let's check if we are in middle of a partial trap sequence to return the previous damage.\r\n\t\tif (pokemon.volatiles['partialtrappinglock'] && (target === pokemon.volatiles['partialtrappinglock'].locked)) {\r\n\t\t\treturn pokemon.volatiles['partialtrappinglock'].damage;\r\n\t\t}\r\n\r\n\t\t// We check the category and typing to calculate later on the damage.\r\n\t\tif (!move.category) move.category = 'Physical';\r\n\t\tif (!move.defensiveCategory) move.defensiveCategory = move.category;\r\n\t\t// '???' is typeless damage: used for Struggle and Confusion etc\r\n\t\tif (!move.type) move.type = '???';\r\n\t\tconst type = move.type;\r\n\r\n\t\t// We get the base power and apply basePowerCallback if necessary.\r\n\t\tlet basePower: number | false | null = move.basePower;\r\n\t\tif (move.basePowerCallback) {\r\n\t\t\tbasePower = move.basePowerCallback.call(this, pokemon, target, move);\r\n\t\t}\r\n\t\tif (!basePower) {\r\n\t\t\treturn basePower === 0 ? undefined : basePower;\r\n\t\t}\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\t// Checking for the move's Critical Hit possibility. We check if it's a 100% crit move, otherwise we calculate the chance.\r\n\t\tlet isCrit = move.willCrit || false;\r\n\t\tif (!isCrit) {\r\n\t\t\t// In gen 1, the critical chance is based on speed.\r\n\t\t\t// First, we get the base speed, divide it by 2 and floor it. This is our current crit chance.\r\n\t\t\tlet critChance = Math.floor(pokemon.species.baseStats['spe'] / 2);\r\n\r\n\t\t\t// Now we check for focus energy volatile.\r\n\t\t\tif (pokemon.volatiles['focusenergy']) {\r\n\t\t\t\t// If it exists, crit chance is divided by 2 again and floored.\r\n\t\t\t\tcritChance = Math.floor(critChance / 2);\r\n\t\t\t} else {\r\n\t\t\t\t// Normally, without focus energy, crit chance is multiplied by 2 and capped at 255 here.\r\n\t\t\t\tcritChance = this.clampIntRange(critChance * 2, 1, 255);\r\n\t\t\t}\r\n\r\n\t\t\t// Now we check for the move's critical hit ratio.\r\n\t\t\tif (move.critRatio === 1) {\r\n\t\t\t\t// Normal hit ratio, we divide the crit chance by 2 and floor the result again.\r\n\t\t\t\tcritChance = Math.floor(critChance / 2);\r\n\t\t\t} else if (move.critRatio === 2) {\r\n\t\t\t\t// High crit ratio, we multiply the result so far by 4 and cap it at 255.\r\n\t\t\t\tcritChance = this.clampIntRange(critChance * 4, 1, 255);\r\n\t\t\t}\r\n\r\n\t\t\t// Last, we check deppending on ratio if the move critical hits or not.\r\n\t\t\t// We compare our critical hit chance against a random number between 0 and 255.\r\n\t\t\t// If the random number is lower, we get a critical hit. This means there is always a 1/255 chance of not hitting critically.\r\n\t\t\tif (critChance > 0) {\r\n\t\t\t\tisCrit = this.randomChance(critChance, 256);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isCrit) target.getMoveHitData(move).crit = true;\r\n\r\n\t\t// Happens after crit calculation.\r\n\t\tif (basePower) {\r\n\t\t\tbasePower = this.runEvent('BasePower', pokemon, target, move, basePower);\r\n\t\t\tif (basePower && move.basePowerModifier) {\r\n\t\t\t\tbasePower *= move.basePowerModifier;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!basePower) return 0;\r\n\t\tbasePower = this.clampIntRange(basePower, 1);\r\n\r\n\t\t// We now check attacker's and defender's stats.\r\n\t\tlet level = pokemon.level;\r\n\t\tlet attacker = pokemon;\r\n\t\tconst defender = target;\r\n\t\tif (move.useTargetOffensive) attacker = target;\r\n\t\tconst atkType: StatNameExceptHP = (move.category === 'Physical') ? 'atk' : 'spa';\r\n\t\tconst defType: StatNameExceptHP = (move.defensiveCategory === 'Physical') ? 'def' : 'spd';\r\n\t\tlet attack = attacker.getStat(move.useSourceDefensiveAsOffensive ? defType : atkType);\r\n\t\tlet defense = defender.getStat(defType);\r\n\t\t// In gen 1, screen effect is applied here.\r\n\t\tif ((defType === 'def' && defender.volatiles['reflect']) || (defType === 'spd' && defender.volatiles['lightscreen'])) {\r\n\t\t\tthis.debug('Screen doubling (Sp)Def');\r\n\t\t\tdefense *= 2;\r\n\t\t\tdefense = this.clampIntRange(defense, 1, 1998);\r\n\t\t}\r\n\r\n\t\t// In the event of a critical hit, the offense and defense changes are ignored.\r\n\t\t// This includes both boosts and screens.\r\n\t\t// Also, level is doubled in damage calculation.\r\n\t\tif (isCrit) {\r\n\t\t\tmove.ignoreOffensive = true;\r\n\t\t\tmove.ignoreDefensive = true;\r\n\t\t\tlevel *= 2;\r\n\t\t\tif (!suppressMessages) this.add('-crit', target);\r\n\t\t}\r\n\t\tif (move.ignoreOffensive) {\r\n\t\t\tthis.debug('Negating (sp)atk boost/penalty.');\r\n\t\t\tattack = attacker.getStat(atkType, true);\r\n\t\t}\r\n\t\tif (move.ignoreDefensive) {\r\n\t\t\tthis.debug('Negating (sp)def boost/penalty.');\r\n\t\t\t// No screens\r\n\t\t\tdefense = target.getStat(defType, true);\r\n\t\t}\r\n\r\n\t\t// When either attack or defense are higher than 256, they are both divided by 4 and moded by 256.\r\n\t\t// This is what cuases the roll over bugs.\r\n\t\tif (attack >= 256 || defense >= 256) {\r\n\t\t\tattack = this.clampIntRange(Math.floor(attack / 4) % 256, 1);\r\n\t\t\t// Defense isn't checked on the cartridge, but we don't want those / 0 bugs on the sim.\r\n\t\t\tdefense = this.clampIntRange(Math.floor(defense / 4) % 256, 1);\r\n\t\t}\r\n\r\n\t\t// Self destruct moves halve defense at this point.\r\n\t\tif (move.selfdestruct && defType === 'def') {\r\n\t\t\tdefense = this.clampIntRange(Math.floor(defense / 2), 1);\r\n\t\t}\r\n\r\n\t\t// Let's go with the calculation now that we have what we need.\r\n\t\t// We do it step by step just like the game does.\r\n\t\tlet damage = level * 2;\r\n\t\tdamage = Math.floor(damage / 5);\r\n\t\tdamage += 2;\r\n\t\tdamage *= basePower;\r\n\t\tdamage *= attack;\r\n\t\tdamage = Math.floor(damage / defense);\r\n\t\tdamage = this.clampIntRange(Math.floor(damage / 50), 1, 997);\r\n\t\tdamage += 2;\r\n\r\n\t\t// STAB damage bonus, the \"???\" type never gets STAB\r\n\t\tif (type !== '???' && pokemon.hasType(type)) {\r\n\t\t\tdamage += Math.floor(damage / 2);\r\n\t\t}\r\n\r\n\t\t// Type effectiveness.\r\n\t\t// The order here is not correct, must change to check the move versus each type.\r\n\t\tconst totalTypeMod = target.runEffectiveness(move);\r\n\t\t// Super effective attack\r\n\t\tif (totalTypeMod > 0) {\r\n\t\t\tif (!suppressMessages) this.add('-supereffective', target);\r\n\t\t\tdamage *= 20;\r\n\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\tif (totalTypeMod >= 2) {\r\n\t\t\t\tdamage *= 20;\r\n\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (totalTypeMod < 0) {\r\n\t\t\tif (!suppressMessages) this.add('-resisted', target);\r\n\t\t\tdamage *= 5;\r\n\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\tif (totalTypeMod <= -2) {\r\n\t\t\t\tdamage *= 5;\r\n\t\t\t\tdamage = Math.floor(damage / 10);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If damage becomes 0, the move is made to miss.\r\n\t\t// This occurs when damage was either 2 or 3 prior to applying STAB/Type matchup, and target is 4x resistant to the move.\r\n\t\tif (damage === 0) return damage;\r\n\r\n\t\t// Apply random factor is damage is greater than 1\r\n\t\tif (damage > 1) {\r\n\t\t\tdamage *= this.random(217, 256);\r\n\t\t\tdamage = Math.floor(damage / 255);\r\n\t\t\tif (damage > target.hp && !target.volatiles['substitute']) damage = target.hp;\r\n\t\t}\r\n\r\n\t\t// And we are done.\r\n\t\treturn Math.floor(damage);\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
