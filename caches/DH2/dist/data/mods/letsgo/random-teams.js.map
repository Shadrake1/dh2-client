{
  "version": 3,
  "sources": ["../../../../data/mods/letsgo/random-teams.ts"],
  "sourcesContent": ["/* eslint max-len: [\"error\", 240] */\r\n\r\nimport RandomTeams from '../../random-teams';\r\n\r\nexport class RandomLetsGoTeams extends RandomTeams {\r\n\trandomSet(species: string | Species, teamDetails: RandomTeamsTypes.TeamDetails = {}): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tlet forme = species.name;\r\n\r\n\t\tif (species.battleOnly && typeof species.battleOnly === 'string') {\r\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\r\n\t\t\tforme = species.battleOnly;\r\n\t\t}\r\n\r\n\t\tconst movePool = (species.randomBattleMoves || Object.keys(this.dex.data.Learnsets[species.id]!.learnset!)).slice();\r\n\t\tconst moves: string[] = [];\r\n\t\tconst hasType: {[k: string]: true} = {};\r\n\t\thasType[species.types[0]] = true;\r\n\t\tif (species.types[1]) {\r\n\t\t\thasType[species.types[1]] = true;\r\n\t\t}\r\n\r\n\t\tlet hasMove: {[k: string]: boolean} = {};\r\n\t\tlet counter;\r\n\r\n\t\tdo {\r\n\t\t\t// Keep track of all moves we have:\r\n\t\t\thasMove = {};\r\n\t\t\tfor (const setMoveid of moves) {\r\n\t\t\t\thasMove[setMoveid] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\r\n\t\t\twhile (moves.length < 4 && movePool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\r\n\t\t\t\thasMove[moveid] = true;\r\n\t\t\t\tmoves.push(moveid);\r\n\t\t\t}\r\n\r\n\t\t\tcounter = this.queryMoves(moves, hasType, {}, movePool);\r\n\r\n\t\t\t// Iterate through the moves again, this time to cull them:\r\n\t\t\tfor (const [i, setMoveid] of moves.entries()) {\r\n\t\t\t\tconst move = this.dex.moves.get(setMoveid);\r\n\t\t\t\tconst moveid = move.id;\r\n\t\t\t\tlet rejected = false;\r\n\t\t\t\tlet isSetup = false;\r\n\r\n\t\t\t\tswitch (moveid) {\r\n\t\t\t\t// Set up once and only if we have the moves for it\r\n\t\t\t\tcase 'bulkup': case 'swordsdance':\r\n\t\t\t\t\tif (counter.setupType !== 'Physical' || counter['physicalsetup'] > 1) rejected = true;\r\n\t\t\t\t\tif (counter.Physical + counter['physicalpool'] < 2) rejected = true;\r\n\t\t\t\t\tisSetup = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'calmmind': case 'nastyplot': case 'quiverdance':\r\n\t\t\t\t\tif (counter.setupType !== 'Special' || counter['specialsetup'] > 1) rejected = true;\r\n\t\t\t\t\tif (counter.Special + counter['specialpool'] < 2) rejected = true;\r\n\t\t\t\t\tisSetup = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'growth': case 'shellsmash':\r\n\t\t\t\t\tif (counter.setupType !== 'Mixed') rejected = true;\r\n\t\t\t\t\tif (counter.damagingMoves.length + counter['physicalpool'] + counter['specialpool'] < 2) rejected = true;\r\n\t\t\t\t\tisSetup = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'agility':\r\n\t\t\t\t\tif (counter.damagingMoves.length < 2 && !counter.setupType) rejected = true;\r\n\t\t\t\t\tif (!counter.setupType) isSetup = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// Bad after setup\r\n\t\t\t\tcase 'dragontail':\r\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || hasMove['encore'] || hasMove['roar'] || hasMove['whirlwind']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'fakeout': case 'uturn':\r\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || hasMove['substitute']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'haze': case 'leechseed': case 'roar': case 'whirlwind':\r\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || hasMove['dragontail']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'protect':\r\n\t\t\t\t\tif (counter.setupType || hasMove['rest'] || hasMove['lightscreen'] || hasMove['reflect']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'seismictoss':\r\n\t\t\t\t\tif (counter.damagingMoves.length > 1 || counter.setupType) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'stealthrock':\r\n\t\t\t\t\tif (counter.setupType || !!counter['speedsetup'] || teamDetails.stealthRock) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// Bit redundant to have both\r\n\t\t\t\tcase 'leechlife': case 'substitute':\r\n\t\t\t\t\tif (hasMove['uturn']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'dragonclaw': case 'dragonpulse':\r\n\t\t\t\t\tif (hasMove['dragontail'] || hasMove['outrage']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'thunderbolt':\r\n\t\t\t\t\tif (hasMove['thunder']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'flareblitz': case 'flamethrower': case 'lavaplume':\r\n\t\t\t\t\tif (hasMove['fireblast'] || hasMove['firepunch']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'megadrain':\r\n\t\t\t\t\tif (hasMove['petaldance'] || hasMove['powerwhip']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'bonemerang':\r\n\t\t\t\t\tif (hasMove['earthquake']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'icebeam':\r\n\t\t\t\t\tif (hasMove['blizzard']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'return':\r\n\t\t\t\t\tif (hasMove['bodyslam'] || hasMove['facade'] || hasMove['doubleedge']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'psychic':\r\n\t\t\t\t\tif (hasMove['psyshock']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'rockslide':\r\n\t\t\t\t\tif (hasMove['stoneedge']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'hydropump': case 'willowisp':\r\n\t\t\t\t\tif (hasMove['scald']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'surf':\r\n\t\t\t\t\tif (hasMove['hydropump'] || hasMove['scald']) rejected = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Increased/decreased priority moves are unneeded with moves that boost only speed\r\n\t\t\t\tif (move.priority !== 0 && !!counter['speedsetup']) {\r\n\t\t\t\t\trejected = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// This move doesn't satisfy our setup requirements:\r\n\t\t\t\tif ((move.category === 'Physical' && counter.setupType === 'Special') || (move.category === 'Special' && counter.setupType === 'Physical')) {\r\n\t\t\t\t\t// Reject STABs last in case the setup type changes later on\r\n\t\t\t\t\tif (!hasType[move.type] || counter.stab > 1 || counter[move.category] < 2) rejected = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (counter.setupType && !isSetup && counter.setupType !== 'Mixed' && move.category !== counter.setupType && counter[counter.setupType] < 2) {\r\n\t\t\t\t\t// Mono-attacking with setup and RestTalk is allowed\r\n\t\t\t\t\t// Reject Status moves only if there is nothing else to reject\r\n\t\t\t\t\tif (move.category !== 'Status' || counter[counter.setupType] + counter.Status > 3 && counter['physicalsetup'] + counter['specialsetup'] < 2) {\r\n\t\t\t\t\t\trejected = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pokemon should have moves that benefit their Type, as well as moves required by its forme\r\n\t\t\t\tif (!rejected && (counter['physicalsetup'] + counter['specialsetup'] < 2 && (\r\n\t\t\t\t\t!counter.setupType || counter.setupType === 'Mixed' ||\r\n\t\t\t\t\t(move.category !== counter.setupType && move.category !== 'Status') ||\r\n\t\t\t\t\tcounter[counter.setupType] + counter.Status > 3)\r\n\t\t\t\t) && (\r\n\t\t\t\t\t((counter.damagingMoves.length === 0 || !counter.stab) && (counter['physicalpool'] || counter['specialpool'])) ||\r\n\t\t\t\t\t(hasType['Dark'] && !counter['Dark']) ||\r\n\t\t\t\t\t(hasType['Dragon'] && !counter['Dragon']) ||\r\n\t\t\t\t\t(hasType['Electric'] && !counter['Electric']) ||\r\n\t\t\t\t\t(hasType['Fighting'] && !counter['Fighting'] && (counter.setupType || !counter['Status'])) ||\r\n\t\t\t\t\t(hasType['Fire'] && !counter['Fire']) ||\r\n\t\t\t\t\t(hasType['Ghost'] && !hasType['Dark'] && !counter['Ghost']) ||\r\n\t\t\t\t\t(hasType['Ground'] && !counter['Ground']) ||\r\n\t\t\t\t\t(hasType['Ice'] && !counter['Ice']) ||\r\n\t\t\t\t\t(hasType['Water'] && (!counter['Water'] || !counter.stab))\r\n\t\t\t\t)) {\r\n\t\t\t\t\t// Reject Status or non-STAB\r\n\t\t\t\t\tif (!isSetup && !move.damage && (move.category !== 'Status' || !move.flags.heal)) {\r\n\t\t\t\t\t\tif (move.category === 'Status' || !hasType[move.type] || move.selfSwitch || move.basePower && move.basePower < 40 && !move.multihit) rejected = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Remove rejected moves from the move list\r\n\t\t\t\tif (rejected && movePool.length) {\r\n\t\t\t\t\tmoves.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} while (moves.length < 4 && movePool.length);\r\n\r\n\t\tconst ivs = {\r\n\t\t\thp: 31,\r\n\t\t\tatk: 31,\r\n\t\t\tdef: 31,\r\n\t\t\tspa: 31,\r\n\t\t\tspd: 31,\r\n\t\t\tspe: 31,\r\n\t\t};\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tif (!counter['Physical'] && !hasMove['transform']) {\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tlevel: 100,\r\n\t\t\tgender: species.gender,\r\n\t\t\thappiness: 70,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\titem: (species.requiredItem || ''),\r\n\t\t\tability: 'No Ability',\r\n\t\t\tmoves: moves,\r\n\t\t\tevs: {hp: 20, atk: 20, def: 20, spa: 20, spd: 20, spe: 20},\r\n\t\t\tivs: ivs,\r\n\t\t};\r\n\t}\r\n\r\n\trandomTeam() {\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\tconst pokemonPool: string[] = [];\r\n\t\tfor (const id in this.dex.data.FormatsData) {\r\n\t\t\tconst species = this.dex.species.get(id);\r\n\t\t\tif (\r\n\t\t\t\tspecies.num < 1 || (species.num > 151 && ![808, 809].includes(species.num)) || species.gen > 7 ||\r\n\t\t\t\tspecies.nfe || !species.randomBattleMoves || !species.randomBattleMoves.length\r\n\t\t\t) continue;\r\n\t\t\tpokemonPool.push(id);\r\n\t\t}\r\n\r\n\t\tconst typeCount: {[k: string]: number} = {};\r\n\t\tconst typeComboCount: {[k: string]: number} = {};\r\n\t\tconst baseFormes: {[k: string]: number} = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\r\n\t\twhile (pokemonPool.length && pokemon.length < 6) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\tconst types = species.types;\r\n\r\n\t\t\t// Limit 2 of any type\r\n\t\t\tlet skip = false;\r\n\t\t\tfor (const type of species.types) {\r\n\t\t\t\tif (typeCount[type] > 1 && this.randomChance(4, 5)) {\r\n\t\t\t\t\tskip = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (skip) continue;\r\n\r\n\t\t\tconst set = this.randomSet(species, teamDetails);\r\n\r\n\t\t\t// Limit 1 of any type combination\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\tif (typeComboCount[typeCombo] >= 1) continue;\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const type of types) {\r\n\t\t\t\tif (type in typeCount) {\r\n\t\t\t\t\ttypeCount[type]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[type] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Team details\r\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\r\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\r\n\t\t}\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["RandomTeams"]
}
