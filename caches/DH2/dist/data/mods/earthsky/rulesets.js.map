{
  "version": 3,
  "sources": ["../../../../data/mods/earthsky/rulesets.ts"],
  "sourcesContent": ["export const Rulesets: {[k: string]: ModdedFormatData} = {\r\n\tearthsky: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Earth & Sky',\r\n\t\tdesc: 'The standard ruleset for all Earth & Sky tiers',\r\n\t\truleset: [ 'Hidden Move Limit', 'Obtainable', 'Sketch Post-Gen 7 Moves', 'Species Clause', 'Sleep Clause Mod', 'Endless Battle Clause', 'Baton Pass Clause', 'OHKO Clause', 'Z-Move Clause', 'Dynamax Clause',\r\n\t\t\t'Team Preview', 'Cancel Mod', 'Data Mod', 'Mega Data Mod',],\r\n\t\tonValidateSet(set, format) { //Forme-exclusive moves, re-calculate Hidden Power\r\n\t\t\tif(!set.hpType){\r\n\t\t\t\tconst hpTypes = [\r\n\t\t\t\t\t'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel',\r\n\t\t\t\t\t'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark',\r\n\t\t\t\t];\r\n\t\t\t\tconst stats = {hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31};\r\n\t\t\t\tlet hpTypeX = 0;\r\n\t\t\t\tlet i = 1;\r\n\t\t\t\tfor (const s in stats) {\r\n\t\t\t\t\thpTypeX += i * (set.ivs[s] % 2);\r\n\t\t\t\t\ti *= 2;\r\n\t\t\t\t}\r\n\t\t\t\tset.hpType = hpTypes[Math.min(15,this.dex.trunc(hpTypeX * 16 / 63))];\r\n\t\t\t}\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tconst species = this.dex.species.get(set.species || set.name);\r\n\t\t\tif (species.changesFrom) {\r\n\t\t\t\tconst baseSpecies = this.dex.species.get(species.baseSpecies);\r\n\t\t\t\tif (set.moves && baseSpecies.exclusiveMoves) {\r\n\t\t\t\t\tfor (const move of set.moves) {\r\n\t\t\t\t\t\tif (baseSpecies.exclusiveMoves.includes(move)) {\r\n\t\t\t\t\t\t\tproblems.push(`${species.name} can't know ${move} while in its ${species.forme} form.`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (species.baseSpecies === \"Zygarde\" && set.moves) {\r\n\t\t\t\tfor (const move of set.moves) {\r\n\t\t\t\t\tif (move === \"Core Enforcer\" && set.ability && set.ability !== \"Power Construct\") {\r\n\t\t\t\t\t\tproblems.push(\"Zygarde without Power Construct can't know Core Enforcer.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn problems;\r\n\t\t},\r\n\t},\r\n\tegelaspokedex: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Egelas Pokedex',\r\n\t\tdesc: \"Only allows Pok&eacute;mon native to the Egelas Region (Earth/Sky)\",\r\n\t\tonValidateSet(set, format) {\r\n\t\t\tconst egelasDex = [\r\n\t\t\t\t\"Caeleaf\",\"Sprop\",\"Graecust\",\"Iguava\",\"Chucklava\",\"Helmuana\",\"Newtiny\",\"Ruggeft\",\"Claymander\",\"Palrat\",\"Spectrat\",\"Shinx\",\"Luxio\",\"Luxray\",\"Stunky\",\"Skuntank\",\"Fanfowl\",\"Plumifowl\",\"Pealated\",\"Hoothoot-Egelas\",\"Noctowl-Egelas\",\"Toybot\",\"Aibot\",\"Utilitron\",\"Utilitron-Boat\",\"Utilitron-Copter\",\"Trubbish\",\"Garbodor\",\"Faerunee\",\"Caterpie\",\"Metapod\",\"Butterfree\",\"Budew\",\"Roselia\",\"Roserade\",\"Sothodil\",\"Sosphodel\",\"Gulpin\",\"Swalot\",\"Montura\",\"Twintura\",\"Silvurah\",\"Burrorm\",\"Burryrm\",\"Scarabouch\",\"Deerling\",\"Sawsbuck\",\"Azurill\",\"Marill\",\"Azumarill\",\"Ballooffalo\",\"Slowpoke\",\"Slowbro\",\"Slowking\",\"Magikarp\",\"Gyarados\",\"Tigrissle\",\"Beedive\",\"Basculin\",\"Basculin-Blue-Striped\",\"Pikeral\",\"Pikeral-Blue-Striped\",\"Feebas\",\"Milotic\",\"Slakoth\",\"Vigoroth\",\"Slaking\",\"Bounsweet\",\"Steenee\",\"Tsareena\",\"Lithoshroom\",\"Litholich\",\"Geodude\",\"Graveler\",\"Golem\",\"Sableye\",\"Mawile\",\"Rugblin\",\"Runogre\",\"Growlithe\",\"Arcanine\",\"Houndour\",\"Houndoom\",\"Joroo\",\"Jaquol\",\"Thylone\",\"Axew\",\"Fraxure\",\"Haxorus\",\"Fletchling\",\"Fletchinder\",\"Talonflame\",\"Blitzle\",\"Zebstrika\",\"Falinks\",\"Cufant\",\"Copperajah\",\"Phanpy\",\"Donphan\",\"Teddiursa\",\"Ursaring\",\"Trigenee\",\"Hexyon\",\"Hektillion\",\"Termill\",\"Terrazor\",\"Heracross\",\"Pinsir\",\"Rockruff\",\"Lycanroc\",\"Lycanroc-Midnight\",\"Lycanroc-Twilight\",\"Elpine\",\"Freezelk\",\"Moorfrost\",\"Snover\",\"Abomasnow\",\"Swinub\",\"Piloswine\",\"Mamoswine\",\"Vanillite\",\"Vanillish\",\"Vanilluxe\",\"Smoochum\",\"Jynx\",\"Zubat\",\"Golbat\",\"Crobat\",\"Noibat\",\"Noivern\",\"Dunsparce\",\"Drampa\",\"Minior\",\"Prominoid\",\"Cryogonal\",\"Riolu\",\"Lucario\",\"Zorua\",\"Zoroark\",\"Igglybuff\",\"Jigglypuff\",\"Wigglytuff\",\"Delibird-Egelas\",\"Tynamo\",\"Eelektrik-Egelas\",\"Eelektross-Egelas\",\"Elekid\",\"Electabuzz\",\"Electivire\",\"Milcery\",\"Alcremie\",\"Inkay\",\"Malamar\",\"Croagunk\",\"Toxicroak\",\"Farfetch\\u2019d\",\"Kendo\\u2019no\",\"Deino\",\"Zweilous\",\"Hydreigon\",\"Joltik\",\"Galvantula\",\"Lemurod\",\"Sandygast\",\"Palossand\",\"Crabrawler\",\"Crabominable\",\"Exeggcute\",\"Exeggutor-Alola\",\"Tropius\",\"Wingull\",\"Pelipper\",\"Antarctross\",\"Shellder\",\"Cloyster\",\"Finneon\",\"Lumineon\",\"Gobellos\",\"Dragobellos\",\"Plecuum\",\"Vorplec\",\"Pyukumuku\",\"Pincurchin\",\"Lioxin\",\"Frillish\",\"Jellicent\",\"Scrunge\",\"Dhelmise\",\"Cuttlelass\",\"Dreadnautilus\",\"Kravokalypse\",\"Cubone-Egelas\",\"Marowak-Alola\",\"Duskull\",\"Dusclops\",\"Dusknoir\",\"Ralts\",\"Kirlia\",\"Gardevoir\",\"Gallade\",\"Elgyem\",\"Beheeyem\",\"Unown\",\"Sigilyph\",\"Roggenrola\",\"Boldore\",\"Gigalith\",\"Carbink\",\"Stegrowth\",\"Stegrove\",\"Angkol\",\"Macedon\",\"Tauros-Egelas\",\"Miltank-Egelas\",\"Durant-Egelas\",\"Heatmor-Egelas\",\"Ponyta-Egelas\",\"Rapidash-Egelas\",\"Mienfoo\",\"Mienshao\",\"Ascelyte\",\"Paraiagon\",\"Absol\",\"Helioptile\",\"Heliolisk\",\"Silicobra\",\"Sandaconda\",\"Obelith\",\"Pyramyth\",\"Magby\",\"Magmar\",\"Magmortar\",\"Torkoal\",\"Turtonator\",\"Moroth\",\"Keelmora\",\"Yamask\",\"Cofagrigus\",\"Bronzor\",\"Bronzong\",\"Honedge\",\"Doublade\",\"Aegislash\",\"Druddigon\",\"Deceuceus\",\"Fervintill\",\"Selervis\",\"Helyrion\",\"Daedestus\",\"Apherove\",\"Poleboar\",\"Pallatinel\",\"Jurotera\",\"Oceides\",\"Hatar\",\"Zuros\",\"Norphaval\"\r\n\t\t\t];\r\n\t\t\tconst species = this.dex.species.get(set.species || set.name);\r\n\t\t\tif (!egelasDex.includes(species.name)) {\r\n\t\t\t\treturn [`${species.name} is not in the Egelan Pokedex.`];\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\t'horizonsdlc1pokedex': {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Horizons DLC 1 Pokedex',\r\n\t\tdesc: \"Only allows Pok&eacute;mon obtainable in the Egelas region (Earth/Sky) and Sartori Island (Horizons Expansion)\",\r\n\t\tonValidateSet(set, format) {\r\n\t\t\tconst egelasDex = [\r\n\t\t\t\t\"Caeleaf\",\"Sprop\",\"Graecust\",\"Iguava\",\"Chucklava\",\"Helmuana\",\"Newtiny\",\"Ruggeft\",\"Claymander\",\"Palrat\",\"Spectrat\",\"Shinx\",\"Luxio\",\"Luxray\",\"Stunky\",\"Skuntank\",\"Fanfowl\",\"Plumifowl\",\"Pealated\",\"Hoothoot\",\"Noctowl\",\"Montura\",\"Twintura\",\"Silvurah\",\"Caterpie\",\"Metapod\",\"Butterfree\",\"Budew\",\"Roselia\",\"Roserade\",\"Sothodil\",\"Sosphodel\",\"Toybot\",\"Aibot\",\"Utilitron\",\"Trubbish\",\"Garbodor\",\"Faerunee\",\"Slowpoke\",\"Slowbro\",\"Slowking\",\"Stunfisk\",\"Burrorm\",\"Burryrm\",\"Scarabouch\",\"Azurill\",\"Marill\",\"Azumarill\",\"Ballooffalo\",\"Magikarp\",\"Gyarados\",\"Tigrissle\",\"Beedive\",\"Basculin\",\"Pikeral\",\"Feebas\",\"Milotic\",\"Deerling\",\"Sawsbuck\",\"Smoliv\",\"Dolliv\",\"Arboliva\",\"Slakoth\",\"Vigoroth\",\"Slaking\",\"Roggenrola\",\"Boldore\",\"Gigalith\",\"Lithoshroom\",\"Litholich\",\"Sableye\",\"Mawile\",\"Klawf\",\"Salandit\",\"Salazzle\",\"Axew\",\"Fraxure\",\"Haxorus\",\"Rugblin\",\"Runogre\",\"Growlithe\",\"Arcanine\",\"Houndour\",\"Houndoom\",\"Joroo\",\"Jaquol\",\"Thylone\",\"Fletchling\",\"Fletchinder\",\"Talonflame\",\"Blitzle\",\"Zebstrika\",\"Falinks\",\"Cufant\",\"Copperajah\",\"Phanpy\",\"Donphan\",\"Teddiursa\",\"Ursaring\",\"Trigenee\",\"Hexyon\",\"Hektillion\",\"Termill\",\"Terrazor\",\"Heracross\",\"Pinsir\",\"Rockruff\",\"Lycanroc\",\"Elpine\",\"Freezelk\",\"Moorfrost\",\"Snover\",\"Abomasnow\",\"Swinub\",\"Piloswine\",\"Mamoswine\",\"Vanillite\",\"Vanillish\",\"Vanilluxe\",\"Smoochum\",\"Jynx\",\"Zubat\",\"Golbat\",\"Crobat\",\"Noibat\",\"Noivern\",\"Dunsparce\",\"Dudunsparce\",\"Drampa\",\"Minior\",\"Prominoid\",\"Cryogonal\",\"Riolu\",\"Lucario\",\"Zorua\",\"Zoroark\",\"Igglybuff\",\"Jigglypuff\",\"Wigglytuff\",\"Delibird\",\"Tynamo\",\"Eelektrik\",\"Eelektross\",\"Elekid\",\"Electabuzz\",\"Electivire\",\"Milcery\",\"Alcremie\",\"Inkay\",\"Malamar\",\"Croagunk\",\"Toxicroak\",\"Farfetch\\u2019d\",\"Kendo\\u2019no\",\"Deino\",\"Zweilous\",\"Hydreigon\",\"Joltik\",\"Galvantula\",\"Lemurod\",\"Sandygast\",\"Palossand\",\"Crabrawler\",\"Crabominable\",\"Exeggcute\",\"Exeggutor\",\"Tropius\",\"Wingull\",\"Pelipper\",\"Antarctross\",\"Shellder\",\"Cloyster\",\"Finneon\",\"Lumineon\",\"Gobellos\",\"Dragobellos\",\"Plecuum\",\"Vorplec\",\"Pyukumuku\",\"Pincurchin\",\"Lioxin\",\"Frillish\",\"Jellicent\",\"Scrunge\",\"Dhelmise\",\"Cuttlelass\",\"Dreadnautilus\",\"Kravokalypse\",\"Cubone\",\"Marowak\",\"Duskull\",\"Dusclops\",\"Dusknoir\",\"Ralts\",\"Kirlia\",\"Gardevoir\",\"Gallade\",\"Elgyem\",\"Beheeyem\",\"Unown\",\"Sigilyph\",\"Carbink\",\"Stegrowth\",\"Stegrove\",\"Angkol\",\"Macedon\",\"Tauros\",\"Miltank\",\"Durant\",\"Heatmor\",\"Ponyta\",\"Rapidash\",\"Mienfoo\",\"Mienshao\",\"Ascelyte\",\"Paraiagon\",\"Absol\",\"Helioptile\",\"Heliolisk\",\"Silicobra\",\"Sandaconda\",\"Obelith\",\"Pyramyth\",\"Magby\",\"Magmar\",\"Magmortar\",\"Torkoal\",\"Turtonator\",\"Moroth\",\"Keelmora\",\"Yamask\",\"Cofagrigus\",\"Bronzor\",\"Bronzong\",\"Honedge\",\"Doublade\",\"Aegislash\",\"Druddigon\",\"Deceuceus\",\"Fervintill\",\"Selervis\",\"Helyrion\",\"Daedestus\",\"Apherove\",\"Poleboar\",\"Pallatinel\",\"Jurotera\",\"Oceides\",\"Hatar\",\"Zuros\",\"Norphaval\",\r\n\t\t\t\t\"Glameow\",\"Purugly\",\"Eevee\",\"Vaporeon\",\"Jolteon\",\"Flareon\",\"Espeon\",\"Umbreon\",\"Leafeon\",\"Glaceon\",\"Sylveon\",\"Audino\",\"Stantler\",\"Wyrdeer\",\"Girafarig\",\"Farigiraf\",\"Hawlucha\",\"Weedle\",\"Kakuna\",\"Beedrill\",\"Petilil\",\"Lilligant\",\"Comfey\",\"Sirfetch\\u2019\",\"Bellsprout\",\"Weepinbell\",\"Victreebell\",\"Carnivine\",\"Ursaluna\",\"Cranidos\",\"Rampardos\",\"Shieldon\",\"Bastiodon\",\"Jangmo-o\",\"Hakamo-o\",\"Kommo-o\",\"Shuckle\",\"Onix\",\"Steelix\",\"Phantump\",\"Trevenant\",\"Charvenant\",\"Slugma\",\"Magcargo\",\"Skorupi\",\"Drapion\",\"Trapinch\",\"Vibrava\",\"Flygon\",\"Slurpin\",\"Suctlot\",\"Corsola\",\"Cursola\",\"Luvdisc\",\"Qwilfish\",\"Overqwil\",\"Basculegion\",\"Minccino\",\"Cinccino\",\"Munna\",\"Musharna\",\"Runerigus\",\"Spritzee\",\"Aromatisse\",\"Murkrow\",\"Honchkrow\",\"Aerodactyl\",\"Snorunt\",\"Glalie\",\"Froslass\",\"Darumaka\",\"Darmanitan\",\"Lillipup\",\"Herdier\",\"Stoutland\",\"Kricketot\",\"Kricketune\",\"Amplitune\",\"Toxel\",\"Toxtricity\",\"Rotom\",\"Enamorus\",\"Shaymin\",\"Diancie\",\"Volcanion\",\"Phione\",\"Manaphy\",\"Cresselia\",\"Darkrai\",\"Regigigas\",\"Meloetta\",\"Meltan\",\"Melmetal\"\r\n\t\t\t];\r\n\t\t\tconst species = this.dex.species.get(set.species || set.name);\r\n\t\t\tif (!egelasDex.includes(species.baseSpecies)) {\r\n\t\t\t\treturn [`${species.name} is not in the Egelan or Sartorian Pokedexes.`];\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\thorizonspokedex: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Horizons Pokedex',\r\n\t\tdesc: \"Only allows Pok&eacute;mon obtainable in the Egelas region (Earth/Sky), Sartori (Horizons Wave 1), and Hassrim (Horizons Wave 2)\",\r\n\t\tonValidateSet(set, format) {\r\n\t\t\tconst egelasDex = [\r\n\t\t\t\t\"Caeleaf\",\"Sprop\",\"Graecust\",\"Iguava\",\"Chucklava\",\"Helmuana\",\"Newtiny\",\"Ruggeft\",\"Claymander\",\"Palrat\",\"Spectrat\",\"Shinx\",\"Luxio\",\"Luxray\",\"Stunky\",\"Skuntank\",\"Fanfowl\",\"Plumifowl\",\"Pealated\",\"Hoothoot\",\"Noctowl\",\"Montura\",\"Twintura\",\"Silvurah\",\"Caterpie\",\"Metapod\",\"Butterfree\",\"Budew\",\"Roselia\",\"Roserade\",\"Sothodil\",\"Sosphodel\",\"Toybot\",\"Aibot\",\"Utilitron\",\"Trubbish\",\"Garbodor\",\"Faerunee\",\"Slowpoke\",\"Slowbro\",\"Slowking\",\"Stunfisk\",\"Burrorm\",\"Burryrm\",\"Scarabouch\",\"Azurill\",\"Marill\",\"Azumarill\",\"Ballooffalo\",\"Magikarp\",\"Gyarados\",\"Tigrissle\",\"Beedive\",\"Basculin\",\"Pikeral\",\"Feebas\",\"Milotic\",\"Deerling\",\"Sawsbuck\",\"Smoliv\",\"Dolliv\",\"Arboliva\",\"Slakoth\",\"Vigoroth\",\"Slaking\",\"Roggenrola\",\"Boldore\",\"Gigalith\",\"Lithoshroom\",\"Litholich\",\"Sableye\",\"Mawile\",\"Klawf\",\"Salandit\",\"Salazzle\",\"Axew\",\"Fraxure\",\"Haxorus\",\"Rugblin\",\"Runogre\",\"Growlithe\",\"Arcanine\",\"Houndour\",\"Houndoom\",\"Joroo\",\"Jaquol\",\"Thylone\",\"Fletchling\",\"Fletchinder\",\"Talonflame\",\"Blitzle\",\"Zebstrika\",\"Falinks\",\"Cufant\",\"Copperajah\",\"Phanpy\",\"Donphan\",\"Teddiursa\",\"Ursaring\",\"Trigenee\",\"Hexyon\",\"Hektillion\",\"Termill\",\"Terrazor\",\"Heracross\",\"Pinsir\",\"Rockruff\",\"Lycanroc\",\"Elpine\",\"Freezelk\",\"Moorfrost\",\"Snover\",\"Abomasnow\",\"Swinub\",\"Piloswine\",\"Mamoswine\",\"Vanillite\",\"Vanillish\",\"Vanilluxe\",\"Smoochum\",\"Jynx\",\"Zubat\",\"Golbat\",\"Crobat\",\"Noibat\",\"Noivern\",\"Dunsparce\",\"Dudunsparce\",\"Drampa\",\"Minior\",\"Prominoid\",\"Cryogonal\",\"Riolu\",\"Lucario\",\"Zorua\",\"Zoroark\",\"Igglybuff\",\"Jigglypuff\",\"Wigglytuff\",\"Delibird\",\"Tynamo\",\"Eelektrik\",\"Eelektross\",\"Elekid\",\"Electabuzz\",\"Electivire\",\"Milcery\",\"Alcremie\",\"Inkay\",\"Malamar\",\"Croagunk\",\"Toxicroak\",\"Farfetch\\u2019d\",\"Kendo\\u2019no\",\"Deino\",\"Zweilous\",\"Hydreigon\",\"Joltik\",\"Galvantula\",\"Lemurod\",\"Sandygast\",\"Palossand\",\"Crabrawler\",\"Crabominable\",\"Exeggcute\",\"Exeggutor\",\"Tropius\",\"Wingull\",\"Pelipper\",\"Antarctross\",\"Shellder\",\"Cloyster\",\"Finneon\",\"Lumineon\",\"Gobellos\",\"Dragobellos\",\"Plecuum\",\"Vorplec\",\"Pyukumuku\",\"Pincurchin\",\"Lioxin\",\"Frillish\",\"Jellicent\",\"Scrunge\",\"Dhelmise\",\"Cuttlelass\",\"Dreadnautilus\",\"Kravokalypse\",\"Cubone\",\"Marowak\",\"Duskull\",\"Dusclops\",\"Dusknoir\",\"Ralts\",\"Kirlia\",\"Gardevoir\",\"Gallade\",\"Elgyem\",\"Beheeyem\",\"Unown\",\"Sigilyph\",\"Carbink\",\"Stegrowth\",\"Stegrove\",\"Angkol\",\"Macedon\",\"Tauros\",\"Miltank\",\"Durant\",\"Heatmor\",\"Ponyta\",\"Rapidash\",\"Mienfoo\",\"Mienshao\",\"Ascelyte\",\"Paraiagon\",\"Absol\",\"Helioptile\",\"Heliolisk\",\"Silicobra\",\"Sandaconda\",\"Obelith\",\"Pyramyth\",\"Magby\",\"Magmar\",\"Magmortar\",\"Torkoal\",\"Turtonator\",\"Moroth\",\"Keelmora\",\"Yamask\",\"Cofagrigus\",\"Bronzor\",\"Bronzong\",\"Honedge\",\"Doublade\",\"Aegislash\",\"Druddigon\",\"Deceuceus\",\"Fervintill\",\"Selervis\",\"Helyrion\",\"Daedestus\",\"Apherove\",\"Poleboar\",\"Pallatinel\",\"Jurotera\",\"Oceides\",\"Hatar\",\"Zuros\",\"Norphaval\",\r\n\t\t\t\t\"Glameow\",\"Purugly\",\"Eevee\",\"Vaporeon\",\"Jolteon\",\"Flareon\",\"Espeon\",\"Umbreon\",\"Leafeon\",\"Glaceon\",\"Sylveon\",\"Audino\",\"Stantler\",\"Wyrdeer\",\"Girafarig\",\"Farigiraf\",\"Hawlucha\",\"Weedle\",\"Kakuna\",\"Beedrill\",\"Petilil\",\"Lilligant\",\"Comfey\",\"Sirfetch\\u2019\",\"Bellsprout\",\"Weepinbell\",\"Victreebell\",\"Carnivine\",\"Ursaluna\",\"Cranidos\",\"Rampardos\",\"Shieldon\",\"Bastiodon\",\"Jangmo-o\",\"Hakamo-o\",\"Kommo-o\",\"Shuckle\",\"Onix\",\"Steelix\",\"Phantump\",\"Trevenant\",\"Charvenant\",\"Slugma\",\"Magcargo\",\"Skorupi\",\"Drapion\",\"Trapinch\",\"Vibrava\",\"Flygon\",\"Slurpin\",\"Suctlot\",\"Corsola\",\"Cursola\",\"Luvdisc\",\"Qwilfish\",\"Overqwil\",\"Basculegion\",\"Minccino\",\"Cinccino\",\"Munna\",\"Musharna\",\"Runerigus\",\"Spritzee\",\"Aromatisse\",\"Murkrow\",\"Honchkrow\",\"Aerodactyl\",\"Snorunt\",\"Glalie\",\"Froslass\",\"Darumaka\",\"Darmanitan\",\"Lillipup\",\"Herdier\",\"Stoutland\",\"Kricketot\",\"Kricketune\",\"Amplitune\",\"Toxel\",\"Toxtricity\",\"Rotom\",\"Enamorus\",\"Shaymin\",\"Diancie\",\"Volcanion\",\"Phione\",\"Manaphy\",\"Cresselia\",\"Darkrai\",\"Regigigas\",\"Meloetta\",\"Meltan\",\"Melmetal\",\r\n\t\t\t\t\"Shelmet\",\"Accelgor\",\"Karrablast\",\"Escavalier\",\"Wooper\",\"Quagsire\",\"Clodsire\",\"Tympole\",\"Palpitoad\",\"Seismitoad\",\"Surskit\",\"Masquerain\",\"Goomy\",\"Sliggoo\",\"Goodra\",\"Indeedee\",\"Meowth\",\"Persian\",\"Perrserker\",\"Nickit\",\"Thievul\",\"Tandemaus\",\"Maushold\",\"Espurr\",\"Meowstic\",\"Gothita\",\"Gothorita\",\"Gothitelle\",\"Burmy\",\"Wormadam-Plant\",\"Mothim\",\"Klefki\",\"Dedenne\",\"Grubbin\",\"Charjabug\",\"Vikavolt\",\"Squawkabilly\",\"Squawkapo\",\"Gastly\",\"Haunter\",\"Gengar\",\"Koffing\",\"Weezing\",\"Misdreavus\",\"Mismagius\",\"Finizen\",\"Palafin\",\"Horsea\",\"Seadra\",\"Kingdra\",\"Clobbopus\",\"Grapploct\",\"Remoraid\",\"Octillery\",\"Skrelp\",\"Dragalge\",\"Relicanth\",\"Chewtle\",\"Drednaw\",\"Wimpod\",\"Golisopod\",\"Krabby\",\"Kingler\",\"Hippopotas\",\"Hippowdon\",\"Varoom\",\"Revavroom\",\"Kangaskhan\",\"Geodude\",\"Graveler\",\"Golem\",\"Stonjourner\",\"Pawniard\",\"Bisharp\",\"Kingambit\",\"Zangoose\",\"Seviper\",\"Tyrogue\",\"Hitmonchan\",\"Hitmonlee\",\"Hitmontop\",\"Oricorio-Pom Pom\",\"Flabebe\",\"Floette\",\"Florges\",\"Skarmory\",\"Vulpix\",\"Ninetales\",\"Solrunt\",\"Ralie\",\"Pharoslass\",\"Bergmite\",\"Avalugg\",\"Charcadet\",\"Armarouge\",\"Ceruledge\",\"Pawmi\",\"Pawmo\",\"Pawmot\",\"Mankey\",\"Primeape\",\"Annihilape\",\"Sneasel\",\"Sneasler\",\"Weavile\",\"Oddish\",\"Gloom\",\"Vileplume\",\"Bellossom\",\"Pumpkaboo\",\"Gourgeist\",\"Tarountula\",\"Spidops\",\"Applin\",\"Flapple\",\"Appletun\",\"Dipplin\",\"Hydrapple\",\"Gimmighoul\",\"Gholdengo\",\"Khatrophys\",\"Articuno\",\"Zapdos\",\"Moltres\",\"Mew\",\"Raikou\",\"Entei\",\"Suicune\",\"Celebi\",\"Regirock\",\"Regice\",\"Registeel\",\"Latias\",\"Latios\",\"Groudon\",\"Kyogre\",\"Rayquaza\",\"Jirachi\",\"Deoxys\",\"Uxie\",\"Mesprit\",\"Azelf\",\"Heatran\",\"Victini\",\"Cobalion\",\"Terrakion\",\"Virizion\",\"Keldeo\",\"Genesect\",\"Zygarde\",\"Hoopa\",\"Cosmog\",\"Cosmoem\",\"Solgaleo\",\"Lunala\",\"Nihilego\",\"Buzzwole\",\"Pheromosa\",\"Xurkitree\",\"Celesteela\",\"Kartana\",\"Guzzlord\",\"Marshadow\",\"Poipole\",\"Naganadel\",\"Stakataka\",\"Blacephalon\",\"Zeraora\",\"Kubfu\",\"Urshifu\",\"Regieleki\",\"Regidrago\",\"Calyrex\",\"Glastrier\",\"Spectrier\",\"Great Tusk\",\"Scream Tail\",\"Brute Bonnet\",\"Flutter Mane\",\"Slither Wing\",\"Sandy Shocks\",\"Iron Treads\",\"Robo Bundle\",\"Press Hands\",\"Mecha Jugulis\",\"Astro Glider\",\"Armor Thorns\",\"Roaring Moon\",\"Valiant Droid\",\"Koraidon\",\"Miraidon\",\"Walking Wake\",\"Saber Leaves\",\"Okidogi\",\"Munkidori\",\"Fezandipiti\",\"Ogerpon\",\"Gouging Fire\",\"Raging Bolt\",\"Power Chassis\",\"Laser Crown\",\"Terapagos\"\r\n\t\t\t];\r\n\t\t\tconst species = this.dex.species.get(set.species || set.name);\r\n\t\t\tif (!egelasDex.includes(species.baseSpecies)) {\r\n\t\t\t\treturn [`${species.name} is not in the Egelan, Sartorian, or Hassriman Pokedexes.`];\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\trestrictedrules: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Restricted Rules',\r\n\t\tdesc: \"Limits teams to two members who are Legendaries/Mythicals/Ultra Beasts/Paradoxes and enforces Item Clause.\",\r\n\t\truleset: ['Item Clause'],\r\n\t\tonValidateTeam(team){\r\n\t\t\tlet restrictedCount = 0;\r\n\t\t\tfor (const set of team) {\r\n\t\t\t\tconst pokemon = this.dex.species.get(set.species || set.name);\r\n\t\t\t\tconst pokemonTags = pokemon.baseSpecies ? this.dex.species.get(pokemon.baseSpecies).tags : pokemon.tags;\r\n\t\t\t\tif(pokemonTags){\r\n\t\t\t\t\tfor(const tag of pokemonTags){\r\n\t\t\t\t\t\tif([\"Sub-Legendary\", \"Restricted Legendary\", \"Mythical\", \"Paradox\"].includes(tag)){\r\n\t\t\t\t\t\t\trestrictedCount++;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(restrictedCount > 2){\r\n\t\t\t\t\treturn[`You have more than two restricted Pokemon on your team.`];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\thiddenmovelimit: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Hidden Move Limit',\r\n\t\tdesc: \"Ensures that no more than one Hidden Move is known per Pok&eacute;mon family and that forme/evolution-exclusive Hidden Moves are respected.\",\r\n\t\tonValidateTeam(team) {\r\n\t\t\tconst learnedHiddenTable: Pokemon[] = []; //List of Pokemon on the team with Hidden Moves\r\n\t\t\tconst problems: string[] = [];\r\n\t\t\tfor (const set of team) {\r\n\t\t\t\tif (set.moves) {\r\n\t\t\t\t\tconst pokemon = this.dex.species.get(set.species || set.name);\r\n\t\t\t\t\tconst prevo = (pokemon.prevo) ? this.dex.species.get(pokemon.prevo) : undefined;\r\n\t\t\t\t\tlet isHidden = false;\r\n\t\t\t\t\tlet pokeLearnset = this.dex.species.getLearnsetData(pokemon.id);\r\n\t\t\t\t\tif(!pokeLearnset.learnset){\r\n\t\t\t\t\t\tpokeLearnset = this.dex.species.getLearnsetData(this.dex.species.get(pokemon.baseSpecies).id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (const move of set.moves) {\r\n\t\t\t\t\t\tconst moveID = this.dex.toID(move);\r\n\t\t\t\t\t\tconst pokeLearnsMove = pokeLearnset.learnset[moveID];\r\n\t\t\t\t\t\t//console.log(pokemon + \" knows \" + moveID + \" with means \" + pokeLearnsMove);\r\n\t\t\t\t\t\tif(pokeLearnsMove == \"9D\"){\r\n\t\t\t\t\t\t\tif(isHidden){ //Since it can't know the same move twice, it must have gotten it from a family member, and exclusive ones are taken care of.\r\n\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't learn ${this.dex.moves.get(moveID)} because it already knows a Hidden Move.`);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tisHidden = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if(pokeLearnsMove === undefined){\r\n\t\t\t\t\t\t\tlet isNatural = false; //whether it's learned through Sketch\r\n\t\t\t\t\t\t\t//console.log(\"This move is not naturally learned by this stage or form\");\r\n\t\t\t\t\t\t\tif(pokemon.changesFrom && pokemon.name !== pokemon.changesFrom){ //There is a base forme\r\n\t\t\t\t\t\t\t\tlet baseLearns = this.dex.species.getLearnsetData(this.dex.species.get(pokemon.changesFrom).id).learnset[moveID];\r\n\t\t\t\t\t\t\t\t//if(pokemon.changesFrom) console.log(\"Base form is \" + pokemon.changesFrom + \" and its accessibility to \" + moveID + \" is \" + baseLearns);\r\n\t\t\t\t\t\t\t\tif(baseLearns) isNatural = true;\r\n\t\t\t\t\t\t\t\tif(baseLearns == \"9D\"){ //This move is base forme's Hidden Move\r\n\t\t\t\t\t\t\t\t\tif(pokemon.exclusiveHidden) { //and the Pokemon can't learn it\r\n\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't know ${this.dex.moves.get(moveID)} because it is ${pokemon.baseSpecies}'s exclusive Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tif(isHidden){\r\n\t\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't learn ${this.dex.moves.get(moveID)} because it already knows a Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tisHidden = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(prevo){\r\n\t\t\t\t\t\t\t\tlet prevoLearns = this.dex.species.getLearnsetData(prevo.id).learnset[moveID];\r\n\t\t\t\t\t\t\t\t//console.log(\"Prevo is \" + prevo.name + \" and its accessibility to \" + moveID + \" is \" + prevoLearns);\r\n\t\t\t\t\t\t\t\tif(prevoLearns) isNatural = true;\r\n\t\t\t\t\t\t\t\tif(prevoLearns == \"9D\"){//This move is prevo's Hidden Move\r\n\t\t\t\t\t\t\t\t\tif(pokemon.exclusiveHidden) { //and the Pokemon can't learn it\r\n\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't know ${this.dex.moves.get(moveID)} because it is ${prevo}'s exclusive Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tif(isHidden){\r\n\t\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't learn ${this.dex.moves.get(moveID)} because it already knows a Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tisHidden = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else if (this.dex.species.getLearnsetData(prevo.id).learnset[moveID] === undefined){ //The prevo can't learn it either, therefore...\r\n\t\t\t\t\t\t\t\t\tconst first = (prevo.prevo) ? this.dex.species.get(prevo.prevo) : undefined; //there must be a first stage\r\n\t\t\t\t\t\t\t\t\tif(first){\r\n\t\t\t\t\t\t\t\t\t\tlet firstLearns = this.dex.species.getLearnsetData(first.id).learnset[moveID];\r\n\t\t\t\t\t\t\t\t\t\t//console.log(\"First stage is \" + first.name + \" and its accessibility to \" + moveID + \" is \" + firstLearns);\r\n\t\t\t\t\t\t\t\t\t\tif(firstLearns) isNatural = true;\r\n\t\t\t\t\t\t\t\t\t\tif(firstLearns == \"9D\") {//This move is first stage's Hidden Move\r\n\t\t\t\t\t\t\t\t\t\t\tif(pokemon.exclusiveHidden || prevo.exclusiveHidden) { //and the Pokemon can't learn it\r\n\t\t\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't know ${this.dex.moves.get(moveID)} because it is ${first}'s exclusive Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(isHidden){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't learn ${this.dex.moves.get(moveID)} because it already knows a Hidden Move.`);\r\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisHidden = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//if(!isNatural) console.log(\"This move is learned through Sketch\");\r\n\t\t\t\t\t\t\tif(!isNatural && pokeLearnset.learnset['sketch'] == \"9D\"){ //Move is Sketched and Sketch is the Hidden Move, so move counts as Hidden too\r\n\t\t\t\t\t\t\t\tif(isHidden){\r\n\t\t\t\t\t\t\t\t\tproblems.push(`${pokemon} can't Sketch ${this.dex.moves.get(moveID)} because Sketch is its Hidden Move and it already knows a Sketched move.`);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tisHidden = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(isHidden){ //Pokemon knows a Hidden Move, therefore we must ensure no one else in its family knows one\r\n\t\t\t\t\t\t//We start by constructing a family tree\r\n\t\t\t\t\t\tconst family: Species[] = [];\r\n\t\t\t\t\t\tlet base = pokemon; //Get the base Pokemon in the family\r\n\t\t\t\t\t\tif(prevo){\r\n\t\t\t\t\t\t\tif(prevo.prevo) base = this.dex.species.get(prevo.prevo);\r\n\t\t\t\t\t\t\telse base = prevo;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(base.name !== base.baseSpecies) base = this.dex.species.get(base.baseSpecies);\r\n\t\t\t\t\t\tfamily.push(base.name);\r\n\t\t\t\t\t\t//console.log(\"Creating \" + base.name + \" family\");\r\n\t\t\t\t\t\tif(base.evos){\r\n\t\t\t\t\t\t\tfor(let evo of base.evos){\r\n\t\t\t\t\t\t\t\tif(!family.includes(evo)){\r\n\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + evo);\r\n\t\t\t\t\t\t\t\t\tfamily.push(evo);\r\n\t\t\t\t\t\t\t\t\tconst evoMon = this.dex.species.get(evo);\r\n\t\t\t\t\t\t\t\t\tif(evoMon.evos){\r\n\t\t\t\t\t\t\t\t\t\tfor(let evoFinal of evoMon.evos){\r\n\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + evoFinal);\r\n\t\t\t\t\t\t\t\t\t\t\tfamily.push(evoFinal);\r\n\t\t\t\t\t\t\t\t\t\t\tconst evoFinalMon = this.dex.species.get(evoFinal);\r\n\t\t\t\t\t\t\t\t\t\t\tif(evoFinalMon.otherFormes){\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(let evoFinalForme of evoFinalMon.otherFormes){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + evoFinalForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfamily.push(evoFinalForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(evoMon.otherFormes){\r\n\t\t\t\t\t\t\t\t\t\tfor(let evoForme of evoMon.otherFormes) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(!family.includes(evoForme)){\r\n\t\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + evoForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfamily.push(evoForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst evoMonForme = this.dex.species.get(evoForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(evoMonForme.evos){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor(let evoFormeFinal of evoMonForme.evos){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!family.includes(evoFormeFinal)){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + evoFormeFinal);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily.push(evoFormeFinal);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} if (base.otherFormes){\r\n\t\t\t\t\t\t\tfor(let forme of base.otherFormes){\r\n\t\t\t\t\t\t\t\t//console.log(\"Adding \" + forme);\r\n\t\t\t\t\t\t\t\tfamily.push(forme);\r\n\t\t\t\t\t\t\t\tconst formeMon = this.dex.species.get(forme);\r\n\t\t\t\t\t\t\t\tif(formeMon.evos){\r\n\t\t\t\t\t\t\t\t\tfor(let formeEvo of formeMon.evos){\r\n\t\t\t\t\t\t\t\t\t\tif(!family.includes(formeEvo)){\r\n\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + formeEvo);\r\n\t\t\t\t\t\t\t\t\t\t\tfamily.push(formeEvo);\r\n\t\t\t\t\t\t\t\t\t\t\tconst formeEvoMon = this.dex.species.get(formeEvo);\r\n\t\t\t\t\t\t\t\t\t\t\tif(formeEvoMon.evos){\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(let formeEvoFinal of formeEvoMon.evos)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(!family.includes(formeEvoFinal)){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + formeEvoFinal);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily.push(formeEvoFinal);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif(formeEvoMon.otherFormes){\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(let formeEvoForme of formeEvoMon.otherFormes)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(!family.includes(formeEvoForme)){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//console.log(\"Adding \" + formeEvoForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfamily.push(formeEvoForme);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t//There are currently no cases of a Pokemon only evolving in an alternate form into a Pokemon that itself only evolves in an alternate form. Thank goodness.\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//console.log(\"Full family:\");\r\n\t\t\t\t\t\t//console.log(family);\r\n\t\t\t\t\t\t//Then we make sure none of them are in this team and know a Hidden Move\r\n\t\t\t\t\t\tfor(const poke of learnedHiddenTable){\r\n\t\t\t\t\t\t\tif(poke.baseSpecies === pokemon.baseSpecies) //normally useless with Species Clause, but I turned it off during testing and maybe Custom Battles will exist or something\r\n\t\t\t\t\t\t\t\tproblems.push(`No more than one ${pokemon.baseSpecies} can know its Hidden Move.`);\r\n\t\t\t\t\t\t\telse if(family.includes(poke.name))\r\n\t\t\t\t\t\t\t\tproblems.push(`${poke.name} and ${pokemon.name} cannot both know their Hidden Moves because they are in the same family.`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlearnedHiddenTable.push(pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn problems;\r\n\t\t},\r\n\t},\r\n\tgravitysleepclause: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Gravity Sleep Clause',\r\n\t\tdesc: \"Bans sleep moves below 100% accuracy, in conjunction with Gravity or Supermassive\",\r\n\t\tbanlist: [\r\n\t\t\t'Gravity ++ Dark Void', 'Gravity ++ Grass Whistle', 'Gravity ++ Hypnosis', 'Gravity ++ Sing', 'Gravity ++ Sleep Powder',\r\n\t\t\t'Supermassive ++ Dark Void', 'Supermassive ++ Grass Whistle', 'Supermassive ++ Hypnosis', 'Supermassive ++ Sing', 'Supermassive ++ Sleep Powder',\r\n\t\t],\r\n\t\tonValidateTeam(team) {\r\n\t\t\tlet hasMegaSteelix = false;\r\n\t\t\tlet hasSleepMove = false;\r\n\t\t\tfor (const set of team) {\r\n\t\t\t\tconst species = this.dex.species.get(set.species);\r\n\t\t\t\tif (species.name === \"Steelix\" && set.item === \"Steelixite\") hasMegaSteelix = true;\r\n\t\t\t\tfor (const moveid of set.moves) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\t// replicates previous behavior which may compare `true` to 100: true < 100 == true\r\n\t\t\t\t\t// this variable is true if the move never misses (even with lowered acc) or has a chance to miss,\r\n\t\t\t\t\t// but false if the move's accuracy is 100% (yet can be lowered).\r\n\t\t\t\t\tconst hasMissChanceOrNeverMisses = move.accuracy === true || move.accuracy < 100;\r\n\r\n\t\t\t\t\tif (move.status && move.status === 'slp' && hasMissChanceOrNeverMisses) {\r\n\t\t\t\t\t\thasSleepMove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (hasMegaSteelix && hasSleepMove) {\r\n\t\t\t\treturn [`The combination of Mega Steelix and a <100% accurate sleep move on the same team is banned by Gravity Sleep Clause.`];\r\n\t\t\t}\r\n\t\t},\r\n\t\tonBegin() {\r\n\t\t\tthis.add('rule', 'Gravity Sleep Clause: The combination of sleep-inducing moves with imperfect accuracy and Gravity or Supermassive are banned');\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
