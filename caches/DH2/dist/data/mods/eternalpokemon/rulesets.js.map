{
  "version": 3,
  "sources": ["../../../../data/mods/eternalpokemon/rulesets.ts"],
  "sourcesContent": ["export const Rulesets: {[k: string]: ModdedFormatData} = {\r\n\tdatamod: {\r\n\t\teffectType: 'Rule',\r\n\t\tname: 'Data Mod',\r\n\t\tdesc: 'When a new Pok\u00E9mon switches in for the first time, information about its types, stats and Abilities is displayed to both players.',\r\n\t\tonDataMod(pokemon) {\r\n\t\t\tlet species = this.dex.species.get(pokemon.species.name);\r\n\t\t\tif (species.copyData) { // all modded things in Eternal Pok\u00E9mon have this\r\n\t\t\t\t// ignore type announcement since no Eternal Forme changes type\r\n\t\t\t\t// this.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\tlet abilities = species.abilities[0];\r\n\t\t\t\tif (species.abilities[1]) abilities += ` / ${species.abilities[1]}`;\r\n\t\t\t\tif (species.abilities['H']) abilities += ` / ${species.abilities['H']}`;\r\n\t\t\t\tif (species.abilities['S']) abilities += ` / ${species.abilities['S']}`;\r\n\t\t\t\tconst baseStats = species.baseStats;\r\n\t\t\t\tconst type = species.types[0];\r\n\t\t\t\tif (species.types[1]) {\r\n\t\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// print signature move\r\n\t\t\t\tconst move_str = species.movepoolAdditions[0];\r\n\t\t\t\tconst move = this.dex.moves.get(move_str);\r\n\t\t\t\tlet acc;\r\n\t\t\t\tif (move.accuracy == true) acc = \"-\"; \r\n\t\t\t\telse acc = move.accuracy + \"%\";\r\n\t\t\t\t\r\n\t\t\t\tif (move.basePower == 0) {\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col movenamecol\">` + move.name + `</span> <span class=\"col typecol\"><img src=\"//play.pokemonshowdown.com/sprites/types/` + move.type + `.png\" alt=\"` + move.type + `\" width=\"32\" height=\"14\"><img src=\"//play.pokemonshowdown.com/sprites/categories/` + move.category + `.png\" alt=\"` + move.category + `\" width=\"32\" height=\"14\"></span> <span class=\"col widelabelcol\"><em>Accuracy</em><br>` + acc + `</span> <span class=\"col pplabelcol\"><em>PP</em><br>` + ~~(move.pp * 1.6) + `</span> <span class=\"col movedesccol\">` + move.shortDesc + `</span> </li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col movenamecol\">` + move.name + `</span> <span class=\"col typecol\"><img src=\"//play.pokemonshowdown.com/sprites/types/` + move.type + `.png\" alt=\"` + move.type + `\" width=\"32\" height=\"14\"><img src=\"//play.pokemonshowdown.com/sprites/categories/` + move.category + `.png\" alt=\"` + move.category + `\" width=\"32\" height=\"14\"></span> <span class=\"col labelcol\"><em>Power</em><br>` + move.basePower + `</span> <span class=\"col widelabelcol\"><em>Accuracy</em><br>` + acc + `</span> <span class=\"col pplabelcol\"><em>PP</em><br>` + ~~(move.pp * 1.6) + `</span> <span class=\"col movedesccol\">` + move.shortDesc + `</span> </li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (species.creator) this.hint(`${species.name} and ${move.name} were created by ${species.creator}!`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tonSwitchIn(pokemon) {\r\n\t\t\tconst switchedIn = pokemon.switchedIn;\r\n\t\t\tif (pokemon.illusion) {\r\n\t\t\t\t// this.add('-start', pokemon, 'typechange', pokemon.illusion.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\tif (!pokemon.illusion.switchedIn) {\r\n\t\t\t\t\tlet species = this.dex.species.get(pokemon.illusion.species.name);\r\n\t\t\t\t\tlet abilities = species.abilities[0];\r\n\t\t\t\t\tif (species.abilities[1]) abilities += ` / ${species.abilities[1]}`;\r\n\t\t\t\t\tif (species.abilities['H']) abilities += ` / ${species.abilities['H']}`;\r\n\t\t\t\t\tif (species.abilities['S']) abilities += ` / ${species.abilities['S']}`;\r\n\t\t\t\t\tconst baseStats = species.baseStats;\r\n\t\t\t\t\tconst type = species.types[0];\r\n\t\t\t\t\tif (species.types[1]) {\r\n\t\t\t\t\t\tconst type2 = species.types[1];\r\n\t\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"http://play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (species.creator) this.hint(`${species.name} was created by ${species.creator}!`);\r\n\t\t\t\t\tpokemon.illusion.switchedIn = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// this.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\tif (!pokemon.switchedIn) {\r\n\t\t\t\t\tthis.runEvent('DataMod', pokemon);\r\n\t\t\t\t\tpokemon.switchedIn = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonDamagingHit(damage, target, source, move) {\r\n\t\t\tif (target.hasAbility('illusion')) { // making sure the correct information is given when an Illusion breaks\r\n\t\t\t\tif (this.dex.species.get(target.species.name).copyData) { // if the target is modded\r\n\t\t\t\t\t// this.add('-start', target, 'typechange', target.getTypes(true).join('/'), '[silent]');\r\n\t\t\t\t\tif (!target.switchedIn) {\r\n\t\t\t\t\t\ttarget.switchedIn = true;\r\n\t\t\t\t\t\tthis.runEvent('DataMod', target);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst types = target.baseSpecies.types;\r\n\t\t\t\t\tif (target.getTypes().join() === types.join()) {\r\n\t\t\t\t\t\t// this.add('-end', target, 'typechange', '[silent]');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tstandardnatdex: {\r\n\t\teffectType: 'ValidatorRule',\r\n\t\tname: 'Standard NatDex',\r\n\t\tdesc: \"The standard ruleset for all National Dex tiers\",\r\n\t\truleset: [\r\n\t\t\t'Obtainable', '+Unobtainable', '+Past', 'Sketch Post-Gen 7 Moves', 'Team Preview', 'Nickname Clause', 'HP Percentage Mod', 'Cancel Mod', 'Endless Battle Clause',\r\n\t\t],\r\n\t\tonValidateSet(set) {\r\n\t\t\tconst species = this.dex.species.get(set.species);\r\n\t\t\tif (species.natDexTier === 'Illegal') {\r\n\t\t\t\tif (this.ruleTable.has(`+pokemon:${species.id}`)) return;\r\n\t\t\t\treturn [`${set.name || set.species} does not exist in the National Dex.`];\r\n\t\t\t}\r\n\t\t\tconst requireObtainable = this.ruleTable.has('obtainable');\r\n\t\t\tif (requireObtainable) {\r\n\t\t\t\tif (species.natDexTier === \"Unreleased\") {\r\n\t\t\t\t\tconst basePokemon = this.toID(species.baseSpecies);\r\n\t\t\t\t\tif (this.ruleTable.has(`+pokemon:${species.id}`) || this.ruleTable.has(`+basepokemon:${basePokemon}`)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn [`${set.name || set.species} does not exist in the National Dex.`];\r\n\t\t\t\t}\r\n\t\t\t\tfor (const moveid of set.moves) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tif (move.isNonstandard === 'Unobtainable' && move.gen === this.dex.gen) { // comment out light of ruin\r\n\t\t\t\t\t\tif (this.ruleTable.has(`+move:${move.id}`)) continue;\r\n\t\t\t\t\t\tconst problem = `${set.name}'s move ${move.name} does not exist in the National Dex.`;\r\n\t\t\t\t\t\tif (this.ruleTable.has('omunobtainablemoves')) {\r\n\t\t\t\t\t\t\tconst outOfBattleSpecies = this.getValidationSpecies(set)[0];\r\n\t\t\t\t\t\t\tif (!this.omCheckCanLearn(move, outOfBattleSpecies, this.allSources(outOfBattleSpecies), set, problem)) continue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn [problem];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Any item that was legal in Gen 7 (Normal Gem for example) should be usable\r\n\t\t\tif (!set.item) return;\r\n\t\t\tlet item = this.dex.items.get(set.item);\r\n\t\t\tlet gen = this.dex.gen;\r\n\t\t\twhile (item.isNonstandard && gen >= 7) {\r\n\t\t\t\titem = this.dex.forGen(gen).items.get(item.id);\r\n\t\t\t\tgen--;\r\n\t\t\t}\r\n\t\t\tif (requireObtainable && item.isNonstandard) {\r\n\t\t\t\tif (this.ruleTable.has(`+item:${item.id}`)) return;\r\n\t\t\t\treturn [`${set.name}'s item ${item.name} does not exist in Gen ${this.dex.gen}.`];\r\n\t\t\t}\r\n\t\t},\r\n\t\tonBegin() {\r\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\r\n\t\t\t\tif (pokemon.species.isMega || pokemon.species.isPrimal || pokemon.species.forme === \"Ultra\") {\r\n\t\t\t\t\tpokemon.canTerastallize = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n};"],
  "mappings": "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",
  "names": []
}
