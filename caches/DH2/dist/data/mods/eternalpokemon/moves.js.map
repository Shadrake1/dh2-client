{
  "version": 3,
  "sources": ["../../../../data/mods/eternalpokemon/moves.ts"],
  "sourcesContent": ["import { inherits } from \"util\";\r\n\r\nexport const Moves: { [moveid: string]: ModdedMoveData } = {\r\n\r\n\t// Phase I\r\n\t// Slate I\r\n\r\n\t// Eternal Magikarp\r\n\tcallforfamily: { // todo: figure out how to make team preview ask for order if you have this move\r\n        num: -129,\r\n        accuracy: true,\r\n        basePower: 0,\r\n        category: 'Status',\r\n        name: 'Call for Family',\r\n        shortDesc: \"+2 \u2191stat of last in party fainted, uses its first move.\",\r\n        pp: 10,\r\n        priority: 0,\r\n        flags: {protect: 1, mirror: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n\t\t\tthis.add('-anim', source, 'Geomancy', target);\r\n            this.add('-anim', source, 'Dragon Dance', target);\r\n\t\t},\r\n        onTryHit(target, source, move) {\r\n            // Find the last fainted Pok\u00E9mon on the user's team\r\n            const faintedPokemon = source.side.pokemon.filter(p => p.fainted);\r\n            const lastFainted = faintedPokemon[faintedPokemon.length - 1];\r\n    \r\n            if (!lastFainted) {\r\n                this.add('-fail', source, 'move: Call for Family');\r\n                return null;\r\n            }\r\n    \r\n            // Determine the best stat to boost\r\n            const stats: Array<StatIDExceptHP> = ['atk', 'def', 'spa', 'spd', 'spe']; // List of stats to consider\r\n            let bestStat: StatIDExceptHP = stats[0]; // Initialize with the first stat\r\n            let highestValue = lastFainted.getStat(bestStat); // Get the initial highest value\r\n    \r\n            for (const stat of stats) {\r\n                const currentValue = lastFainted.getStat(stat);\r\n                if (currentValue > highestValue) {\r\n                    highestValue = currentValue;\r\n                    bestStat = stat; // Update bestStat to the current highest stat\r\n                }\r\n            }\r\n            \r\n            this.add('-anim', source, 'Moonlight'); // Animation for the move\r\n            // Apply +2 to the best stat\r\n            this.boost({[bestStat]: 2}, source);\r\n    \r\n            // Use the first move of the last fainted Pok\u00E9mon\r\n            const firstMove = lastFainted.moveSlots[0]; // Get the first move slot\r\n    \r\n            if (!firstMove) {\r\n                this.add('-fail', source, 'move: Call for Family');\r\n                return null;\r\n            }\r\n    \r\n            // Use the move as if it were the user's move\r\n            const moveData = this.dex.moves.get(firstMove.id);\r\n            this.add('-message', `${source.name} summons ${lastFainted.name}'s ${moveData.name}!`);\r\n    \r\n            // Distinguish how to execute the move based on its target type\r\n            switch (moveData.target) {\r\n                case 'self':\r\n                    this.actions.useMove(moveData.id, source, source); // Affects only the user\r\n                    break;\r\n                case 'allySide':\r\n                    this.actions.useMove(moveData.id, source, source.side.pokemon[0]); // Affects an ally\r\n                    break;\r\n                case 'allyTeam':\r\n                    this.actions.useMove(moveData.id, source, null); // Affects entire team\r\n                    break;\r\n                case 'normal':\r\n                    const targets = source.side.foe.active.filter(target => target && !target.fainted);\r\n                    if (targets.length > 0) {\r\n                        const randomTarget = targets[Math.floor(Math.random() * targets.length)];\r\n                        this.actions.useMove(moveData.id, source, randomTarget);\r\n                    } else {\r\n                        this.add('-fail', source, 'move: Call for Family'); // No available foes\r\n                    }\r\n                    break;\r\n                // case any is important because without it, user will use distance moves against itself\r\n                case 'any':\r\n                    const anyTarget = source.side.foe.active.filter(target => target && !target.fainted);\r\n                    if (anyTarget.length > 0) {\r\n                        const randomTarget = anyTarget[Math.floor(Math.random() * anyTarget.length)];\r\n                        this.actions.useMove(moveData.id, source, randomTarget);\r\n                    } else {\r\n                        this.add('-fail', source, 'move: Call for Family');\r\n                    }\r\n                    break;  \r\n                default:\r\n                    this.actions.useMove(moveData.id, source, target); // Default case; use original target if no specific case matches\r\n                    break;\r\n            }\r\n        },\r\n        secondary: null,\r\n        target: 'self',\r\n        type: 'Dragon',\r\n        contestType: \"Cool\",\r\n    },\r\n\r\n\t// Eternal Spinarak\t\r\n\tcheliceraprey: {\r\n        num: -167,\r\n        accuracy: 100,\r\n        basePower: 70,\r\n        category: \"Physical\",\r\n        name: \"Chelicera Prey\",\r\n        shortDesc: \"Crits against speed lowered target.\",\r\n        pp: 10,\r\n        priority: 0,\r\n        flags: {contact: 1, protect: 1, mirror: 1, metronome: 1, bite: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n\t\t\tthis.add('-anim', source, 'Scary Face', target);\r\n            this.add('-anim', source, 'Bug Bite', target);\r\n\t\t},\r\n\t\tonModifyMove(move, pokemon, target) {\r\n\t\t\tif (target && target.boosts.spe < 0) {\r\n\t\t\t\tmove.willCrit = true;\r\n\t\t\t}\r\n\t\t},\r\n        secondary: null,\r\n        target: \"normal\",\r\n        type: \"Bug\",\r\n        contestType: \"Tough\",\r\n    },\r\n\r\n\t// Eternal Skrelp\t\r\n\tspiraldrain: {\r\n        num: -690,\r\n        accuracy: 100,\r\n        basePower: 90,\r\n        category: \"Physical\",\r\n        name: \"Spiral Drain\",\r\n        shortDesc: \"100% poison. Recovers 50% damage dealt.\",\r\n        pp: 10,\r\n        priority: 0,\r\n        flags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n\t\tonTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n\t\t\tthis.add('-anim', source, 'Whirlpool', target);\r\n            this.add('-anim', source, 'Giga Drain', target);\r\n\t\t},\r\n\t\tdrain: [1, 2],\r\n        secondary: {\r\n\t\t\tchance: 100,\r\n\t\t\tstatus: 'psn',\r\n\t\t},\r\n        target: \"normal\",\r\n        type: \"Water\",\r\n        contestType: \"Beautiful\",\r\n    },\r\n\r\n    // Phase I\r\n\t// Slate II\r\n\r\n\t// Eternal Pikachu\r\n    stormfront: {\r\n\t\tnum: -25,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Storm Front\",\r\n        shortDesc: \"Starts Rain. User switches out.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n\t\t\tthis.add('-anim', source, 'Ion Deluge', target);\r\n\t\t},\r\n\t\tweather: 'RainDance',\r\n\t\tselfSwitch: true,\r\n\t\tsecondary: null,\r\n\t\ttarget: \"all\",\r\n\t\ttype: \"Electric\",\r\n\t},\r\n\r\n    // Eternal Fletchinder\r\n    secondwind: {\r\n\t\tnum: -662,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 100,\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Second Wind\",\r\n        shortDesc: \"Fails if at full HP. Heals 1/4 max HP.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, heal: 1, metronome: 1, wind: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Aeroblast', target);\r\n            this.add('-anim', source, 'Morning Sun', target);\r\n\t\t},\r\n        onTry(source, target) {\r\n\t\t\tif (source.hp == source.maxhp) return false;\r\n\t\t},\r\n        onHit(target, source, move) {\r\n            return !!this.heal(source.maxhp / 4, source, source, move);\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Flying\",\r\n\t},\r\n\r\n    // Eternal Noibat\r\n    ultraresonance: {\r\n\t\tnum: -714,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 300,\r\n        basePowerCallback(pokemon, target, move) {\r\n\t\t\tconst bp = move.basePower - Math.abs(pokemon.hp - target.hp);\r\n\t\t\tthis.debug('BP: ' + bp);\r\n\t\t\treturn bp;\r\n\t\t},\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Ultra Resonance\",\r\n        shortDesc: \"BP = 300 - HP diff of user and target.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1, sound: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Psych Up', target);\r\n            this.add('-anim', source, 'Boomburst', target);\r\n\t\t},\r\n        onTryImmunity(target, source) {\r\n\t\t\treturn Math.abs(source.hp - target.hp) < 300;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"allAdjacent\",\r\n\t\ttype: \"Normal\",\r\n\t},\r\n\r\n    // Phase I\r\n\t// Slate III\r\n\r\n\t// Eternal Onix\r\n    crystallize: {\r\n\t\tnum: -95,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Crystallize\",\r\n        shortDesc: \"Heals 50%. Immune to status moves + stat drops.\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Rock Polish', target);\r\n            if (source.maxhp != source.hp) this.add('-anim', source, 'Shore Up', target);\r\n\t\t},\r\n        onHit(target, source, move) {\r\n\t\t\tconst success = !!this.heal(source.maxhp / 2, source, source, move);\r\n\t\t\tif (source.volatiles['crystallize']) return success;\r\n\t\t},\r\n        volatileStatus: 'crystallize',\r\n\t\tcondition: {\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-start', pokemon, 'Crystallize');\r\n\t\t\t},\r\n\t\t\tonTryBoost(boost, target, source, effect) { // stat drop immunity\r\n                if (source && target === source) return;\r\n                let showMsg = false;\r\n                let i: BoostID;\r\n                for (i in boost) {\r\n                    if (boost[i]! < 0) {\r\n                        delete boost[i];\r\n                        showMsg = true;\r\n                    }\r\n                }\r\n                if (showMsg && !(effect as ActiveMove).secondaries && effect.id !== 'octolock') {\r\n                    this.add(\"-fail\", target, \"unboost\", \"[from] move: Crystallize\", \"[of] \" + target);\r\n                }\r\n            },\r\n            onTryHit(target, source, move) { // status move immunity\r\n                if (move.category === 'Status' && target !== source) {\r\n                    this.add('-immune', target, '[from] ability: Good as Gold');\r\n                    return null;\r\n                }\r\n            },\r\n            onTryAddVolatile(status, target) {\r\n                if (status.id === 'yawn') {\r\n                    this.add('-immune', target, '[from] move: Crystallize');\r\n                    return null;\r\n                }\r\n            },\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"self\",\r\n\t\ttype: \"Rock\",\r\n\t},\r\n\r\n    // Eternal Staryu\r\n    corereaction: {\r\n\t\tnum: -120,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Core Reaction\",\r\n        shortDesc: \"User loses 33% of its max HP. +1 to all stats.\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Morning Sun', target);\r\n            this.add('-anim', source, 'Clangorous Soul', target);\r\n\t\t},\r\n\t\tonTry(source) {\r\n\t\t\tif (source.hp <= (source.maxhp * 33 / 100) || source.maxhp === 1) return false;\r\n\t\t},\r\n\t\tonTryHit(pokemon, target, move) {\r\n\t\t\tif (!this.boost(move.boosts as SparseBoostsTable)) return null;\r\n\t\t\tdelete move.boosts;\r\n\t\t},\r\n\t\tonHit(pokemon) {\r\n\t\t\tthis.directDamage(pokemon.maxhp * 33 / 100);\r\n\t\t},\r\n\t\tboosts: {\r\n\t\t\tatk: 1,\r\n\t\t\tdef: 1,\r\n\t\t\tspa: 1,\r\n\t\t\tspd: 1,\r\n\t\t\tspe: 1,\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"self\",\r\n\t\ttype: \"Psychic\",\r\n\t},\r\n\r\n    // Eternal Doublade\r\n    soulsplittingslices: {\r\n\t\tnum: 818,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Soul-Splitting Slices\",\r\n        shortDesc: \"Hits w/ effectiveness for each type of target.\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1, slicing: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n        onPrepareHit(target, source) { // animation\r\n            const targetTypes = [target.types[0]];\r\n            if (target.types[1]) targetTypes.push(target.types[1])\r\n            for (let type of this.dex.types.names()) {\r\n                if (target.hasType(type) && !targetTypes.includes(type)) {\r\n                    targetTypes.push(type);\r\n                    break;\r\n                }\r\n            }\r\n            for (let type of targetTypes) {\r\n                this.add('-anim', source, 'Sacred Sword', target);\r\n            }\r\n\t\t},\r\n\t\tonModifyMove(move, pokemon, target) {\r\n            const targetTypes = [target.types[0]];\r\n            if (target.types[1]) targetTypes.push(target.types[1])\r\n            for (let type of this.dex.types.names()) {\r\n                if (target.hasType(type) && !targetTypes.includes(type)) {\r\n                    targetTypes.push(type);\r\n                    break;\r\n                }\r\n            }\r\n            move.multihit = targetTypes.length;\r\n            move.targetTypes = targetTypes;\r\n\t\t},\r\n        onEffectiveness(typeMod, target, type, move) {\r\n            const i = move.hit - 1;\r\n            if (type == move.targetTypes[i]) return this.dex.getEffectiveness(move.type, type);\r\n\t\t\telse return 0;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Steel\",\r\n\t},\r\n\r\n    // Phase I\r\n\t// Slate IV\r\n\r\n    // Eternal Ekans\r\n    rocketwrap: {\r\n\t\tnum: -23,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 40,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Rocket Wrap\",\r\n        shortDesc: \"100% flinch. User switches. Fails if last active.\",\r\n\t\tpp: 20,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Coil', target);\r\n            this.add('-anim', source, 'Wrap', target);\r\n\t\t},\r\n        onTry(source) {\r\n\t\t\treturn !!this.canSwitch(source.side);\r\n\t\t},\r\n\t\tselfSwitch: true,\r\n\t\tsecondary: {\r\n\t\t\tchance: 100,\r\n\t\t\tvolatileStatus: 'flinch',\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Poison\",\r\n\t},\r\n\r\n    // Eternal Krokorok\r\n    kleptomania: {\r\n        num: -552,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 50,\r\n        basePowerCallback(pokemon, target, move) {\r\n\t\t\tlet bp = move.basePower;\r\n            if (pokemon.timesStolen) bp += 150 * pokemon.timesStolen\r\n\t\t\tthis.debug(\"BP: \" + bp);\r\n\t\t\treturn bp;\r\n\t\t},\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Kleptomania\",\r\n        shortDesc: \"+150 BP each time the user has stolen an item.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Nasty Plot', target);\r\n            this.add('-anim', source, 'Punishment', target);\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Dark\",\r\n    },\r\n\r\n    // moves modified to interact with Eternal Krokorok's Kleptomania\r\n    covet: {\r\n\t\tnum: 343,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 60,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Covet\",\r\n\t\tpp: 25,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, failmefirst: 1, noassist: 1, failcopycat: 1},\r\n\t\tonAfterHit(target, source, move) {\r\n\t\t\tif (source.item || source.volatiles['gem']) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst yourItem = target.takeItem(source);\r\n\t\t\tif (!yourItem) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||\r\n\t\t\t\t!source.setItem(yourItem)\r\n\t\t\t) {\r\n\t\t\t\ttarget.item = yourItem.id; // bypass setItem so we don't break choicelock or anything\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.add('-item', source, yourItem, '[from] move: Covet', '[of] ' + target);\r\n            if (source.timesStolen) source.timesStolen++; // added for Kleptomania\r\n            else source.timesStolen = 1;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Normal\",\r\n\t\tcontestType: \"Cute\",\r\n\t},\r\n    thief: {\r\n\t\tnum: 168,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 60,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Thief\",\r\n\t\tpp: 25,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, failmefirst: 1, noassist: 1, failcopycat: 1},\r\n\t\tonAfterHit(target, source, move) {\r\n\t\t\tif (source.item || source.volatiles['gem']) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst yourItem = target.takeItem(source);\r\n\t\t\tif (!yourItem) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||\r\n\t\t\t\t!source.setItem(yourItem)) {\r\n\t\t\t\ttarget.item = yourItem.id; // bypass setItem so we don't break choicelock or anything\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.add('-enditem', target, yourItem, '[silent]', '[from] move: Thief', '[of] ' + source);\r\n\t\t\tthis.add('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);\r\n            if (source.timesStolen) source.timesStolen++; // added for Kleptomania\r\n            else source.timesStolen = 1;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Dark\",\r\n\t\tcontestType: \"Tough\",\r\n\t},\r\n\r\n    // Eteral Litleo\r\n    fieryprovocation: {\r\n\t\tnum: -667,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 0,\r\n\t\tbasePowerCallback(pokemon, target, move) {\r\n            const bp = target.species.baseStats.atk;\r\n            this.debug('BP: ' + bp);\r\n\t\t\treturn bp;\r\n\t\t},\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Fiery Provocation\",\r\n        shortDesc: \"BP + burn % equal to target's base Atk.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Swagger', target);\r\n            this.add('-anim', source, 'Flare Blitz', target);\r\n\t\t},\r\n        onModifyMove(move, pokemon, target) {\r\n            const odds = Math.min(target.species.baseStats.atk, 100)\r\n            move.secondaries = [];\r\n\t\t\tmove.secondaries.push({\r\n                chance: odds,\r\n                status: 'brn',\r\n            });\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Fire\",\r\n\t},\r\n\r\n    // Phase I\r\n\t// Slate V\r\n\r\n    // Eternal Weepinbell\r\n    flytrap: {\r\n\t\tnum: -70,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 100,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Flytrap\",\r\n\t\tshortDesc: \".5x contact damage + PSN on contact. SE > Bug.\",\r\n\t\tpp: 15,\r\n\t\tpriority: -3,\r\n\t\tflags: {contact: 1, protect: 1, failmefirst: 1, nosleeptalk: 1, noassist: 1, failcopycat: 1, failinstruct: 1},\r\n\t\tonTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Poison Fang', target);\r\n\t\t},\r\n        priorityChargeCallback(pokemon) {\r\n\t\t\tpokemon.addVolatile('flytrap');\r\n            this.add('-anim', pokemon, 'Swallow', pokemon);\r\n\t\t},\r\n\t\tcondition: {\r\n\t\t\tduration: 1,\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-singleturn', pokemon, 'move: Flytrap');\r\n\t\t\t},\r\n\t\t\tonHit(target, source, move) {\r\n\t\t\t\tif (this.checkMoveMakesContact(move, source, target)) {\r\n\t\t\t\t\tsource.trySetStatus('psn', target);\r\n\t\t\t\t}\r\n\t\t\t},\r\n            onSourceModifyDamage(damage, source, target, move) {\r\n                let mod = 1;\r\n                if (move.flags['contact']) mod /= 2;\r\n                return this.chainModify(mod);\r\n            },\r\n\t\t},\r\n\t\t// FIXME: onMoveAborted(pokemon) {pokemon.removeVolatile('flytrap')},\r\n\t\tonAfterMove(pokemon) {\r\n\t\t\tpokemon.removeVolatile('flytrap');\r\n\t\t},\r\n        onEffectiveness(typeMod, target, type) {\r\n\t\t\tif (type === 'Bug') return 1;\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Grass\",\r\n\t},\r\n\r\n    // Eternal Eevee\r\n    continuoussteps: {\r\n\t\tnum: -133,\r\n\t\taccuracy: 50, // unmodifiable accuracy implemented in eternalpokemon/scripts.ts\r\n\t\tbasePower: 50,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Continuous Steps\",\r\n\t\tshortDesc: \"Hits 50x. Each hit can miss. Ignores acc modifiers.\",\r\n\t\tpp: 40,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Stomp', target);\r\n\t\t},\r\n\t\tonHit(target, source) { // animation\r\n\t\t\tthis.add('-anim', source, 'Stomp', target);\r\n\t\t},\r\n\t\tmultihit: 50,\r\n\t\tmultiaccuracy: true,\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Normal\",\r\n\t},\r\n\r\n    // Eternal Dragonair\r\n    nineorbassault: { // todo switch out effect\r\n\t\tnum: -148,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 90,\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Nine-Orb Assault\",\r\n\t\tshortDesc: \"User switches after using a status move.\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, distance: 1, metronome: 1, pulse: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Clangorous Soul', target);\r\n            this.add('-anim', source, 'Dragon Energy', target);\r\n\t\t},\r\n        onAfterMove(source, target, move) {\r\n\t\t\tsource.addVolatile(\"nineorbassault\");\r\n\t\t},\r\n        condition: {\r\n\t\t\tonStart(pokemon) {\r\n\t\t\t\tthis.add('-start', pokemon, 'Nine-Orb Assault');\r\n\t\t\t},\r\n            onAfterMove(source, target, move) {\r\n                if (move && move.category == 'Status' && source && source.hp) {\r\n                    if (!this.canSwitch(source.side) || source.forceSwitchFlag || source.beingCalledBack || source.isSkyDropped()) return;\r\n                    if (source.volatiles['commanding'] || source.volatiles['commanded']) return;\r\n                    target.switchFlag = true;\r\n                }\r\n            }\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"any\",\r\n\t\ttype: \"Dragon\",\r\n\t\tcontestType: \"Beautiful\",\r\n\t},\r\n\r\n    // Eternal Hippopotas\r\n    sirocco: {\r\n\t\tnum: -449,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 75,\r\n\t\tcategory: \"Special\",\r\n\t\tname: \"Sirocco\",\r\n\t\tshortDesc: \"10% chance to burn. Super effective on Grass.\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {protect: 1, mirror: 1, metronome: 1, wind: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Scorching Sands', target);\r\n\t\t},\r\n\t\tonEffectiveness(typeMod, target, type) {\r\n\t\t\tif (type === 'Grass') return 1;\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tchance: 10,\r\n\t\t\tstatus: 'brn',\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Ground\",\r\n\t},\r\n\r\n    // Phase I\r\n\t// Slate VI\r\n\r\n    // Eternal Kirlia\r\n    sentimentalpirouette: {\r\n\t\tnum: -281,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 70,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Sentimental Pirouette\",\r\n\t\tshortDesc: \"SpD > Atk in calculation. If SpD > Spe, +1 Spe.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1},\r\n\t\toverrideOffensiveStat: 'spd',\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Rapid Spin', target);\r\n            this.add('-anim', source, 'Psystrike', target);\r\n\t\t},\r\n\t\tonAfterMoveSecondarySelf(pokemon, target, move) {\r\n\t\t\tif (pokemon.getStat('spd', false, true) > pokemon.getStat('spe', false, true)) {\r\n                this.boost({spe: 1}, pokemon, pokemon, move);\r\n            }\r\n\t\t},\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Psychic\",\r\n\t},\r\n\r\n    // Eternal Skiddo\r\n    mosspit: {\r\n\t\tnum: -672,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 75,\r\n        basePowerCallback(source, target, move) {\r\n\t\t\tif (!this.queue.willMove(target)) {\r\n                this.debug('Moss Pit damage boost');\r\n\t\t\t    return move.basePower * 1.3;\r\n\t\t\t}\r\n\t\t\tthis.debug('Moss Pit NOT boosted');\r\n\t\t\treturn move.basePower;\r\n\t\t},\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Moss Pit\",\r\n\t\tshortDesc: \"30% BP + Grassy Terrain ifn't move before target.\",\r\n\t\tpp: 15,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Wood Hammer', target);\r\n\t\t},\r\n\t\tonHit(target, source, move) {\r\n\t\t\tif (!this.queue.willMove(target)) {\r\n                this.debug('Moss Pit set grassy terrain');\r\n                this.field.setTerrain('grassyterrain');\r\n            } else {\r\n                this.debug('Moss Pit NO grassy terrain');\r\n            }\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Grass\",\r\n\t},\r\n\r\n    // Eternal Pancham\r\n    corkscrewpunch: {\r\n\t\tnum: -674,\r\n\t\taccuracy: 100,\r\n\t\tbasePower: 95,\r\n\t\tcategory: \"Physical\",\r\n\t\tname: \"Corkscrew Punch\",\r\n\t\tshortDesc: \"Frees user from hazards, binding, Leech Seed.\",\r\n\t\tpp: 5,\r\n\t\tpriority: 0,\r\n\t\tflags: {contact: 1, protect: 1, mirror: 1, punch: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonPrepareHit(target, source) { // animation\r\n            this.add('-anim', source, 'Focus Energy', target);\r\n            this.add('-anim', source, 'Dynamic Punch', target);\r\n\t\t},\r\n\t\tonAfterHit(target, pokemon, move) {\r\n\t\t\tif (!move.hasSheerForce) {\r\n\t\t\t\tif (pokemon.hp && pokemon.removeVolatile('leechseed')) {\r\n\t\t\t\t\tthis.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tconst sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge'];\r\n\t\t\t\tfor (const condition of sideConditions) {\r\n\t\t\t\t\tif (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\r\n\t\t\t\t\t\tthis.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (pokemon.hp && pokemon.volatiles['partiallytrapped']) {\r\n\t\t\t\t\tpokemon.removeVolatile('partiallytrapped');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tonAfterSubDamage(damage, target, pokemon, move) {\r\n\t\t\tif (!move.hasSheerForce) {\r\n\t\t\t\tif (pokemon.hp && pokemon.removeVolatile('leechseed')) {\r\n\t\t\t\t\tthis.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);\r\n\t\t\t\t}\r\n\t\t\t\tconst sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge'];\r\n\t\t\t\tfor (const condition of sideConditions) {\r\n\t\t\t\t\tif (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\r\n\t\t\t\t\t\tthis.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (pokemon.hp && pokemon.volatiles['partiallytrapped']) {\r\n\t\t\t\t\tpokemon.removeVolatile('partiallytrapped');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"normal\",\r\n\t\ttype: \"Fighting\",\r\n\t},\r\n\r\n    // Eternal Espurr\r\n    catseye: {\r\n\t\tnum: -677,\r\n\t\taccuracy: true,\r\n\t\tbasePower: 0,\r\n\t\tcategory: \"Status\",\r\n\t\tname: \"Cat's Eye\",\r\n\t\tshortDesc: \"33% heal. +1 SpA & 33% drain each Dark-type.\",\r\n\t\tpp: 10,\r\n\t\tpriority: 0,\r\n\t\tflags: {snatch: 1, heal: 1, metronome: 1},\r\n        onTryMove() { // animation\r\n\t\t\tthis.attrLastMove('[still]');\r\n\t\t},\r\n\t\tonHit(target, source, move) {\r\n\t\t\tlet factor = 1/3;\r\n\r\n\t\t\tconst targets: Pokemon[] = [];\r\n\t\t\tfor (const pokemon of this.getAllActive()) {\r\n\t\t\t\tif (this.runEvent('Invulnerability', pokemon, source, move) === false) {\r\n\t\t\t\t\tthis.add('-miss', source, pokemon);\r\n\t\t\t\t} else if (this.runEvent('TryHit', pokemon, source, move) && pokemon.hasType('Dark')) {\r\n\t\t\t\t\ttargets.push(pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.add('-fieldactivate', 'move: Cat\\'s Eye');\r\n\t\t\tfor (const pokemon of targets) {\r\n                this.add('-anim', source, 'Night Shade', pokemon);\r\n\t\t\t\tthis.directDamage(pokemon.maxhp / 3, pokemon, source);\r\n                this.boost({spa: 1}, source, source, move);\r\n                factor += 1/3;\r\n\t\t\t}\r\n\r\n            if (source.maxhp != source.hp) this.add('-anim', source, 'Recover', target);\r\n\t\t\tconst success = !!this.heal(this.modify(source.maxhp, factor));\r\n\t\t\tif (!success && !targets.length) {\r\n\t\t\t\tthis.add('-fail', source, 'heal');\r\n\t\t\t\treturn this.NOT_FAIL;\r\n\t\t\t}\r\n\t\t},\r\n\t\tsecondary: null,\r\n\t\ttarget: \"self\",\r\n\t\ttype: \"Psychic\",\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["target"]
}
