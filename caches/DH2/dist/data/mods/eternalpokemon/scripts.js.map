{
  "version": 3,
  "sources": ["../../../../data/mods/eternalpokemon/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tteambuilderConfig: {\r\n\t\texcludeStandardTiers: true,\r\n\t\tcustomTiers: [\"Banned\", \"WIP\", \"FE\", \"1x NFE\", \"2x NFE\"],\r\n\t},\r\n\tinit() {\t\t\r\n\t\tfor (const id in this.dataCache.Pokedex) {\r\n\t\t\tconst newMon = this.dataCache.Pokedex[id];\r\n\t\t\tif (!newMon) continue;\r\n\r\n\t\t\tif (id == \"floette\") { // handles floette first to submit a learnset for eternal floette\r\n\t\t\t\t// otherwise floette's learnset gets modified before eternal floette accessess it\r\n\r\n\t\t\t\tconst learnset = this.dataCache.Learnsets[id].learnset;\r\n\t\t\t\tconst latestGen = 7;\r\n\t\t\t\t\r\n\t\t\t\tfor (const moveid in learnset) { // filter only to allow moves from the latest gen\r\n\t\t\t\t\tthis.modData('Learnsets', \"floetteeternal\").learnset[moveid] = learnset[moveid].filter(\r\n\t\t\t\t\t\t(method) => parseInt(method[0]) == latestGen\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.modData('Learnsets', \"floetteeternal\").learnset[\"lightofruin\"] = [\"9L50\"];\r\n\r\n\t\t\t\t// no continue; to handle base floette's learnset\r\n\t\t\t}\r\n\r\n\t\t\tif (id == \"floetteeternal\") continue;\r\n\r\n\t\t\tif (!newMon.copyData) {\r\n\t\t\t\t// latest gen learnset for all pokemon, not just eternal pok\u00E9mon\r\n\t\t\t\t// console.log(newMon.name);\r\n\t\t\t\t// console.log(this.dataCache.Learnsets[id]);\r\n\t\t\t\tif (!this.dataCache.Learnsets[id] || !this.dataCache.Learnsets[id].learnset) continue;\r\n\r\n\t\t\t\tconst learnset = this.dataCache.Learnsets[id].learnset;\r\n\r\n\t\t\t\tlet currentGen, latestGen = 0;\r\n\t\t\t\tfor (const moveid in learnset) { // determine what the latest gen is for this pok\u00E9mon\r\n\t\t\t\t\tfor (const method in learnset[moveid]) {\r\n\t\t\t\t\t\t// only looks at non-virtual console moves\r\n\t\t\t\t\t\tif (learnset[moveid][method][1] != \"V\") {\r\n\t\t\t\t\t\t\tcurrentGen = parseInt(learnset[moveid][method][0])\r\n\t\t\t\t\t\t\tif (currentGen > latestGen) latestGen = currentGen;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (const moveid in learnset) { // filter only to allow moves from the latest gen\r\n\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = learnset[moveid].filter(\r\n\t\t\t\t\t\t(method) => parseInt(method[0]) == latestGen && method[1] != \"V\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// only new pok\u00E9mon\r\n\r\n\t\t\tconst copyData = this.dataCache.Pokedex[this.toID(newMon.copyData)];\r\n\r\n\t\t\tif (!newMon.types && copyData.types) newMon.types = copyData.types;\r\n\t\t\tif (!newMon.baseStats && copyData.baseStats) newMon.baseStats = copyData.baseStats;\r\n\t\t\tif (!newMon.abilities && copyData.abilities) newMon.abilities = copyData.abilities;\r\n\t\t\tif (!newMon.num && copyData.num) newMon.num = copyData.num; // no longer inverting the original's dex number\r\n\t\t\tif (!newMon.genderRatio && copyData.genderRatio) newMon.genderRatio = copyData.genderRatio;\r\n\t\t\tif (!newMon.heightm && copyData.heightm) newMon.heightm = copyData.heightm;\r\n\t\t\tif (!newMon.weightkg && copyData.weightkg) newMon.weightkg = copyData.weightkg;\r\n\t\t\tif (!newMon.color && copyData.color) newMon.color = copyData.color;\r\n\t\t\tif (!newMon.eggGroups && copyData.eggGroups) newMon.eggGroups = copyData.eggGroups;\r\n\r\n\t\t\tlet copyMoves = newMon.copyData;\r\n\t\t\tif (newMon.copyMoves) copyMoves = newMon.copyMoves;\r\n\t\t\tif (copyMoves) {\r\n\t\t\t\tif (!this.dataCache.Learnsets[id]) this.dataCache.Learnsets[id] = {learnset: {}}; // create a blank learnset entry so we don't need a learnsets file (thank you ink)\r\n\t\t\t\tconst learnset = this.dataCache.Learnsets[this.toID(copyMoves)].learnset;\r\n\r\n\t\t\t\tlet currentGen, latestGen = 0;\r\n\t\t\t\tfor (const moveid in learnset) { // determine what the latest gen is for this pok\u00E9mon\r\n\t\t\t\t\tfor (const method in learnset[moveid]) {\r\n\t\t\t\t\t\tcurrentGen = parseInt(learnset[moveid][method][0])\r\n\t\t\t\t\t\tif (currentGen > latestGen) latestGen = currentGen;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (const moveid in learnset) { // filter only to allow moves from the latest gen\r\n\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = learnset[moveid].filter(\r\n\t\t\t\t\t\t(method) => parseInt(method[0]) == latestGen\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// adds prevo moves\r\n\t\t\t\t// only necessary to check one stage cus an eternal pokemon's base forme can only have 1 prevo\r\n\t\t\t\tif (copyData.prevo) {\r\n\t\t\t\t\tconst prevoLearnset = this.dataCache.Learnsets[this.toID(copyData.prevo.toLowerCase())].learnset;\r\n\t\t\t\t\tfor (const moveid in prevoLearnset) { // filter only to allow moves from the latest gen\r\n\t\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = prevoLearnset[moveid].filter(\r\n\t\t\t\t\t\t\t(method) => parseInt(method[0]) == latestGen\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newMon.movepoolAdditions) {\r\n\t\t\t\t\tfor (const move of newMon.movepoolAdditions) {\r\n\t\t\t\t\t\tthis.modData('Learnsets', this.toID(id)).learnset[this.toID(move)] = [\"9L50\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// modifies getMoveAccuracy to account for Eternal Eevee's Continuous Steps\r\n\t// Gets the current accuracy for a move.\r\n\t// todo: not working\r\n\tactions: {\r\n\t\thitStepAccuracy(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\r\n\t\t\tconst hitResults = [];\r\n\t\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\t\tthis.battle.activeTarget = target;\r\n\t\t\t\t// calculate true accuracy\r\n\t\t\t\tlet accuracy = move.accuracy;\r\n\t\t\t\tif (move.ohko) { // bypasses accuracy modifiers\r\n\t\t\t\t\tif (!target.isSemiInvulnerable()) {\r\n\t\t\t\t\t\taccuracy = 30;\r\n\t\t\t\t\t\tif (move.ohko === 'Ice' && this.battle.gen >= 7 && !pokemon.hasType('Ice')) {\r\n\t\t\t\t\t\t\taccuracy = 20;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!target.volatiles['dynamax'] && pokemon.level >= target.level &&\r\n\t\t\t\t\t\t\t(move.ohko === true || !target.hasType(move.ohko))) {\r\n\t\t\t\t\t\t\taccuracy += (pokemon.level - target.level);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\r\n\t\t\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (move.name == \"Continuous Steps\") // implementing Continuous Steps\r\n\t\t\t\t\taccuracy = move.accuracy;\r\n\t\t\t\telse {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\t\tlet boost = 0;\r\n\t\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\t\tconst boosts = this.battle.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\t\tboost = this.battle.clampIntRange(boost - boosts['evasion'], -6, 6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * (3 + boost) / 3);\r\n\t\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\t\taccuracy = this.battle.trunc(accuracy * 3 / (3 - boost));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (move.alwaysHit || (move.id === 'toxic' && this.battle.gen >= 8 && pokemon.hasType('Poison')) ||\r\n\t\t\t\t\t\t(move.target === 'self' && move.category === 'Status' && !target.isSemiInvulnerable())) {\r\n\t\t\t\t\taccuracy = true; // bypasses ohko accuracy modifiers\r\n\t\t\t\t} else {\r\n\t\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t}\r\n\t\t\t\tif (accuracy !== true && !this.battle.randomChance(accuracy, 100)) {\r\n\t\t\t\t\tif (move.smartTarget) {\r\n\t\t\t\t\t\tmove.smartTarget = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!move.spreadHit) this.battle.attrLastMove('[miss]');\r\n\t\t\t\t\t\tthis.battle.add('-miss', pokemon, target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ohko && pokemon.hasItem('blunderpolicy') && pokemon.useItem()) {\r\n\t\t\t\t\t\tthis.battle.boost({spe: 2}, pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t\thitResults[i] = false;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t}\r\n\t\t\treturn hitResults;\r\n\t\t}\r\n\t}\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
