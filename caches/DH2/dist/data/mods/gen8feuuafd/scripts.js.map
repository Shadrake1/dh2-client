{
  "version": 3,
  "sources": ["../../../../data/mods/gen8feuuafd/scripts.ts"],
  "sourcesContent": ["export const Scripts: {[k: string]: ModdedBattleScriptsData} = {\r\n\tinit() {\r\n\t\t// Automatically construct fusion learnsets! (Thank u scoopapa)\r\n\t\tfor (const id in this.dataCache.Pokedex) { // check the dex for fusions\r\n\t\t\tconst fusionEntry = this.dataCache.Pokedex[id];\r\n\t\t\tif (fusionEntry.fusion) { // if the pokedex entry has a fusion field, it's a fusion\r\n\t\t\t\tconst learnsetFusionList = [];// list of pokemon whose learnsets need to be fused\r\n\t\t\t\tfor (let name of fusionEntry.fusion) {\r\n\t\t\t\t\tlet prevo = true;\r\n\t\t\t\t\twhile (prevo) { // make sure prevos of both fused pokemon are added to the list\r\n\t\t\t\t\t\tlearnsetFusionList.push(name);\r\n\t\t\t\t\t\tconst dexEntry = this.dataCache.Pokedex[this.toID(name)];\r\n\t\t\t\t\t\tif (dexEntry.prevo) name = dexEntry.prevo;\r\n\t\t\t\t\t\telse prevo = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.dataCache.Learnsets[id]) this.dataCache.Learnsets[id] = {learnset: {}};// create a blank learnset entry so we don't need a learnsets file\r\n\t\t\t\tfor (const name of learnsetFusionList) {\r\n\t\t\t\t\tconst learnset = this.dataCache.Learnsets[this.toID(name)].learnset;// get the learnset of each pokemon in the list\r\n\t\t\t\t\tfor (const moveid in learnset) {\r\n\t\t\t\t\t\tif (this.dataCache.Moves[moveid].isNonstandard === 'Past') continue; // exclude dexited moves (I hope!)\r\n\t\t\t\t\t\tthis.modData('Learnsets', id).learnset[moveid] = ['8L1'];// all moves are compatible with the fusion's only ability, so just set it to 8L1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now, case-by-case learnset revisions:\r\n\t\t// Behemoth Bash and Behemoth Blade are added automatically to the Crowned dogs somewhere,\r\n\t\t// so we will simulate that here, instead of actually editing that.\r\n\t\tthis.modData('Learnsets', 'yaciancrowned').learnset.behemothblade = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'igglyzentacrowned').learnset.behemothbash = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'nozedawnwings').learnset.moongeistbeam = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'tyranetteeternal').learnset.lightofruin = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'monferpaunbound').learnset.hyperspacefury = ['7L1'];\r\n\t\tthis.modData('Learnsets', 'hoopagigasunbound').learnset.hyperspacefury = ['7L1'];\r\n\t\tdelete this.modData('Learnsets', 'yaciancrowned').learnset.ironhead;\r\n\t\tdelete this.modData('Learnsets', 'igglyzentacrowned').learnset.ironhead;\r\n\t},\r\n\r\n\tteambuilderConfig: {\r\n\t\t// for micrometas to only show custom tiers\r\n\t\texcludeStandardTiers: true,\r\n\t\t// only to specify the order of custom tiers\r\n\t\tcustomTiers: ['FEUU', 'FERUBL', 'FERU', 'Bugged', 'FENFE', 'FELC', 'Forms', 'FEUUber'],\r\n\t},\r\n\r\n\tcanMegaEvo(pokemon) {\r\n\t\tconst altForme = pokemon.baseSpecies.otherFormes && this.dex.species.get(pokemon.baseSpecies.otherFormes[0]);\r\n\t\tconst item = pokemon.getItem();\r\n\t\tif (\r\n\t\t\taltForme?.isMega && altForme?.requiredMove &&\r\n\t\t\tpokemon.baseMoves.includes(this.toID(altForme.requiredMove)) && !item.zMove\r\n\t\t) {\r\n\t\t\treturn altForme.name;\r\n\t\t}\r\n\t\t/*\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Bug\") {\r\n\t\t\treturn \"Silvino-Bug-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Dark\") {\r\n\t\t\treturn \"Silvino-Dark-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Dragon\") {\r\n\t\t\treturn \"Silvino-Dragon-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Electric\") {\r\n\t\t\treturn \"Silvino-Electric-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Fairy\") {\r\n\t\t\treturn \"Silvino-Fairy-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Fighting\") {\r\n\t\t\treturn \"Silvino-Fighting-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Fire\") {\r\n\t\t\treturn \"Silvino-Fire-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Flying\") {\r\n\t\t\treturn \"Silvino-Flying-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Ghost\") {\r\n\t\t\treturn \"Silvino-Ghost-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Grass\") {\r\n\t\t\treturn \"Silvino-Grass-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Ground\") {\r\n\t\t\treturn \"Silvino-Ground-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Ice\") {\r\n\t\t\treturn \"Silvino-Ice-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Poison\") {\r\n\t\t\treturn \"Silvino-Poison-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Psychic\") {\r\n\t\t\treturn \"Silvino-Psychic-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Rock\") {\r\n\t\t\treturn \"Silvino-Rock-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Steel\") {\r\n\t\t\treturn \"Silvino-Steel-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Silvino-Water\") {\r\n\t\t\treturn \"Silvino-Water-Mega\";\r\n\t\t}\r\n\t*/\r\n\t\tif (item.name === \"Sablenite\" && pokemon.baseSpecies.name === \"Absable\") {\r\n\t\t\treturn \"Absable-Mega-Y\";\r\n\t\t}\r\n\r\n\t\tif (item.name === \"Tyranitarite\" && pokemon.baseSpecies.name === \"Goatitar\") {\r\n\t\t\treturn \"Goatitar-Mega\";\r\n\t\t}\r\n\r\n\t\tif (item.name === \"Mawilite\" && pokemon.baseSpecies.name === \"Duramaw\") {\r\n\t\t\treturn \"Duramaw-Mega\";\r\n\t\t}\r\n\r\n\t\tif (item.name === \"Gardevoirite\" && pokemon.baseSpecies.name === \"Goodevoir\") {\r\n\t\t\treturn \"Goodevoir-Mega\";\r\n\t\t}\r\n\r\n\t\tif (item.name === \"Audinite\" && pokemon.baseSpecies.name === \"Audiyem\") {\r\n\t\t\treturn \"Audiyem-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Heracronite\" && pokemon.baseSpecies.name === \"Cleracross\") {\r\n\t\t\treturn \"Cleracross-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Garchompite\" && pokemon.baseSpecies.name === \"Rhychomp\") {\r\n\t\t\treturn \"Rhychomp-Mega\";\r\n\t\t}\r\n\t\tif (item.name === \"Medichamite\" && pokemon.baseSpecies.name === \"Gastrocham\") {\r\n\t\t\treturn \"Gastrocham-Mega\";\r\n\t\t}\r\n\r\n\t\treturn item.megaStone;\r\n\t},\r\n\r\n\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect, zMove, externalMove, maxMove, originalTarget) {\r\n\t\tpokemon.activeMoveActions++;\r\n\t\tlet target = this.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\r\n\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\r\n\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\r\n\t\t\tconst changedMove = this.runEvent('OverrideAction', pokemon, target, baseMove);\r\n\t\t\tif (changedMove && changedMove !== true) {\r\n\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\r\n\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\r\n\t\t\t\ttarget = this.getRandomTarget(pokemon, baseMove);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet move = baseMove;\r\n\t\tif (zMove) {\r\n\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\r\n\t\t} else if (maxMove) {\r\n\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\r\n\t\t}\r\n\r\n\t\tmove.isExternal = externalMove;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\t/* if (pokemon.moveThisTurn) {\r\n\t\t\t// THIS IS PURELY A SANITY CHECK\r\n\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\r\n\t\t\t// USE this.queue.cancelMove INSTEAD\r\n\t\t\tthis.debug('' + pokemon.id + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\treturn;\r\n\t\t} */\r\n\t\tconst willTryMove = this.runEvent('BeforeMove', pokemon, target, move);\r\n\t\tif (!willTryMove) {\r\n\t\t\tthis.runEvent('MoveAborted', pokemon, target, move);\r\n\t\t\tthis.clearActiveMove(true);\r\n\t\t\t// The event 'BeforeMove' could have returned false or null\r\n\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\r\n\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\r\n\t\t\tpokemon.moveThisTurnResult = willTryMove;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (move.beforeMoveCallback) {\r\n\t\t\tif (move.beforeMoveCallback.call(this, pokemon, target, move)) {\r\n\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet lockedMove;\r\n\t\tif (!externalMove) {\r\n\t\t\tlockedMove = this.runEvent('LockMove', pokemon);\r\n\t\t\tif (lockedMove === true) lockedMove = false;\r\n\t\t\tif (!lockedMove) {\r\n\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\r\n\t\t\t\t\tthis.add('cant', pokemon, 'nopp', move);\r\n\t\t\t\t\tconst gameConsole = [\r\n\t\t\t\t\t\tnull, 'Game Boy', 'Game Boy Color', 'Game Boy Advance', 'DS', 'DS', '3DS', '3DS',\r\n\t\t\t\t\t][this.gen] || 'Switch';\r\n\t\t\t\t\tthis.hint(`This is not a bug, this is really how it works on the ${gameConsole}; try it yourself if you don't believe us.`);\r\n\t\t\t\t\tthis.clearActiveMove(true);\r\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\r\n\t\t\t}\r\n\t\t\tpokemon.moveUsed(move, targetLoc);\r\n\t\t}\r\n\r\n\t\t// Dancer Petal Dance hack\r\n\t\t// TODO: implement properly\r\n\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\r\n\r\n\t\tif (zMove) {\r\n\t\t\tif (pokemon.illusion) {\r\n\t\t\t\tthis.singleEvent('End', this.dex.abilities.get('Illusion'), pokemon.abilityData, pokemon);\r\n\t\t\t}\r\n\t\t\tthis.add('-zpower', pokemon);\r\n\t\t\tpokemon.side.zMoveUsed = true;\r\n\t\t}\r\n\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, target, sourceEffect, zMove, maxMove);\r\n\t\tthis.lastSuccessfulMoveThisTurn = moveDidSomething ? this.activeMove && this.activeMove.id : null;\r\n\t\tif (this.activeMove) move = this.activeMove;\r\n\t\tthis.singleEvent('AfterMove', move, null, pokemon, target, move);\r\n\t\tthis.runEvent('AfterMove', pokemon, target, move);\r\n\r\n\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\r\n\t\tif (moveDidSomething && !move.isExternal) {\r\n\t\t\tconst dancers = [];\r\n\t\t\tfor (const currentPoke of this.getAllActive()) {\r\n\t\t\t\tif (pokemon === currentPoke) continue;\r\n\t\t\t\tif (!currentPoke.isSemiInvulnerable() && (move.flags['dance'] && currentPoke.hasAbility('dancer')) || (move.category === 'Status' && currentPoke.hasAbility('parroting'))) {\r\n\t\t\t\t\tdancers.push(currentPoke);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Dancer activates in order of lowest speed stat to highest\r\n\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\r\n\t\t\t// but before any multipliers like Agility or Choice Scarf\r\n\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\r\n\t\t\tdancers.sort(\r\n\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityOrder - a.abilityOrder\r\n\t\t\t);\r\n\t\t\tfor (const dancer of dancers) {\r\n\t\t\t\tif (this.faintMessages()) break;\r\n\t\t\t\tif (dancer.fainted) continue;\r\n\t\t\t\tconst dancersTarget = target.side !== dancer.side && pokemon.side === dancer.side ? target : pokemon;\r\n\t\t\t\tthis.runMove(move.id, dancer, this.getTargetLoc(dancersTarget, dancer), this.dex.abilities.get(dancer.ability), undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\r\n\t},\r\n\r\n\tpokemon: {\r\n\t\t// Included for abilities that make the user non-grounded:\r\n\t\t// Levitate is checked for when running groundedness (ground immunity, iron ball, etc)\r\n\t\t// So we manually add a check for Magnetic Waves here as well,\r\n\t\t// Including a diffrent activation message\r\n\t\t// so that the game doesn't report it as having Levitate when it procs.\r\n\t\t// AFFECTED ABILITIES: Magnetic Waves, Leviflame, Levitability\r\n\t\trunImmunity(type: string, message?: string | boolean) {\r\n\t\t\tif (!type || type === '???') return true;\r\n\t\t\tif (!(type in this.battle.dex.data.TypeChart)) {\r\n\t\t\t\tif (type === 'Fairy' || type === 'Dark' || type === 'Steel') return true;\r\n\t\t\t\tthrow new Error(\"Use runStatusImmunity for \" + type);\r\n\t\t\t}\r\n\t\t\tif (this.fainted) return false;\r\n\r\n\t\t\tconst negateResult = this.battle.runEvent('NegateImmunity', this, type);\r\n\t\t\tlet isGrounded;\r\n\t\t\tif (type === 'Ground') {\r\n\t\t\t\tisGrounded = this.isGrounded(!negateResult);\r\n\t\t\t\tif (isGrounded === null) {\r\n\t\t\t\t\tif (message) {\r\n\t\t\t\t\t\tif (this.hasAbility('magneticwaves')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Magnetic Waves');\r\n\t\t\t\t\t\t} else if (this.hasAbility('leviflame')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Leviflame');\r\n\t\t\t\t\t\t} else if (this.hasAbility('levitability')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Levitability');\r\n\t\t\t\t\t\t} else if (this.hasAbility('stickyfloat')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Sticky Float');\r\n\t\t\t\t\t\t} else if (this.hasAbility('etativel')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Etativel');\r\n\t\t\t\t\t\t} else if (this.hasAbility('lighthearted')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Lighthearted');\r\n\t\t\t\t\t\t} else if (this.hasAbility('clearlyfloating')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Clearly Floating');\r\n\t\t\t\t\t\t} else if (this.hasAbility('floatguise')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Float Guise');\r\n\t\t\t\t\t\t} else if (this.hasAbility('aerialbreak')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Aerial Break');\r\n\t\t\t\t\t\t} else if (this.hasAbility('levimetal')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Levimetal');\r\n\t\t\t\t\t\t} else if (this.hasAbility('hoverboard')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Hoverboard');\r\n\t\t\t\t\t\t} else if (this.hasAbility('levistatic')) {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Levistatic');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.battle.add('-immune', this, '[from] ability: Levitate');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!negateResult) return true;\r\n\t\t\tif ((isGrounded === undefined && !this.battle.dex.getImmunity(type, this)) || isGrounded === false) {\r\n\t\t\t\tif (message) {\r\n\t\t\t\t\tthis.battle.add('-immune', this);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\r\n\t\tisGrounded(negateImmunity = false) {\r\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather) return true;\r\n\t\t\tif ('ingrain' in this.volatiles && this.battle.gen >= 4) return true;\r\n\t\t\tif ('smackdown' in this.volatiles) return true;\r\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\r\n\t\t\tif (item === 'ironball') return true;\r\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\r\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !('roost' in this.volatiles)) return false;\r\n\t\t\tif (\r\n\t\t\t\t(this.hasAbility('levitate') ||\r\n\t\t\t\tthis.hasAbility('magneticwaves') ||\r\n\t\t\t\tthis.hasAbility('leviflame') ||\r\n\t\t\t\tthis.hasAbility('levitability') ||\r\n\t\t\t\tthis.hasAbility('stickyfloat')) &&\r\n\r\n\t\t\t\t!this.battle.suppressingAttackEvents()\r\n\t\t\t) return null;\r\n\t\t\tif ('magnetrise' in this.volatiles) return false;\r\n\t\t\tif ('telekinesis' in this.volatiles) return false;\r\n\t\t\treturn item !== 'airballoon';\r\n\t\t},\r\n\r\n\r\n\t\tignoringAbility() {\r\n\t\t\t// Check if any active pokemon have the ability Neutralizing Gas\r\n\t\t\tlet neutralizinggas = false;\r\n\t\t\tlet lemegeton = false;\r\n\t\t\tfor (const pokemon of this.battle.getAllActive()) {\r\n\t\t\t\t// can't use hasAbility because it would lead to infinite recursion\r\n\t\t\t\tif (pokemon.ability === ('neutralizinggas' as ID) || (pokemon.ability === ('lemegeton' as ID) && !pokemon.volatiles['gastroacid'] && !pokemon.abilityData.ending)) {\r\n\t\t\t\t\tneutralizinggas = true;\r\n\t\t\t\t\tlemegeton = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn !!(\r\n\t\t\t\t(this.battle.gen >= 5 && !this.isActive) ||\r\n                ((this.volatiles['gastroacid'] || (neutralizinggas && this.ability !== ('neutralizinggas' as ID)) || (lemegeton && this.ability !== ('lemegeton' as ID))) &&\r\n                !this.getAbility().isPermanent\r\n                )\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\tsetStatus(\r\n\t\t\tstatus: string | Condition,\r\n\t\t\tsource: Pokemon | null = null,\r\n\t\t\tsourceEffect: Effect | null = null,\r\n\t\t\tignoreImmunities = false\r\n\t\t) {\r\n\t\t\t  if (!this.hp) return false;\r\n\t\t\t  status = this.battle.dex.conditions.get(status);\r\n\t\t\t  if (this.battle.event) {\r\n\t\t\t\tif (!source) source = this.battle.event.source;\r\n\t\t\t\tif (!sourceEffect) sourceEffect = this.battle.effect;\r\n\t\t\t  }\r\n\t\t\t  if (!source) source = this;\r\n\r\n\t\t\t  if (this.status === status.id) {\r\n\t\t\t\tif ((sourceEffect as Move)?.status === this.status) {\r\n\t\t\t\t\t\t this.battle.add('-fail', this, this.status);\r\n\t\t\t\t} else if ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\t\t this.battle.add('-fail', source);\r\n\t\t\t\t\t\t this.battle.attrLastMove('[still]');\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t  }\r\n\r\n\t\t\t  if (!ignoreImmunities && status.id &&\r\n\t\t\t\t\t\t !(source?.hasAbility(['corrosion', 'toxicplay']) && ['tox', 'psn'].includes(status.id))) {\r\n\t\t\t\t// the game currently never ignores immunities\r\n\t\t\t\tif (!this.runStatusImmunity(status.id === 'tox' ? 'psn' : status.id)) {\r\n\t\t\t\t\t\t this.battle.debug('immune to status');\r\n\t\t\t\t\t\t if ((sourceEffect as Move)?.status) {\r\n\t\t\t\t\t\t\t  this.battle.add('-immune', this);\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t return false;\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t  const prevStatus = this.status;\r\n\t\t\t  const prevStatusData = this.statusData;\r\n\t\t\t  if (status.id) {\r\n\t\t\t\tconst result: boolean = this.battle.runEvent('SetStatus', this, source, sourceEffect, status);\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\t\t this.battle.debug('set status [' + status.id + '] interrupted');\r\n\t\t\t\t\t\t return result;\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\r\n\t\t\t  this.status = status.id;\r\n\t\t\t  this.statusData = {id: status.id, target: this};\r\n\t\t\t  if (source) this.statusData.source = source;\r\n\t\t\t  if (status.duration) this.statusData.duration = status.duration;\r\n\t\t\t  if (status.durationCallback) {\r\n\t\t\t\tthis.statusData.duration = status.durationCallback.call(this.battle, this, source, sourceEffect);\r\n\t\t\t  }\r\n\r\n\t\t\t  if (status.id && !this.battle.singleEvent('Start', status, this.statusData, this, source, sourceEffect)) {\r\n\t\t\t\tthis.battle.debug('status start [' + status.id + '] interrupted');\r\n\t\t\t\t// cancel the setstatus\r\n\t\t\t\tthis.status = prevStatus;\r\n\t\t\t\tthis.statusData = prevStatusData;\r\n\t\t\t\treturn false;\r\n\t\t\t  }\r\n\t\t\t  if (status.id && !this.battle.runEvent('AfterSetStatus', this, source, sourceEffect, status)) {\r\n\t\t\t\treturn false;\r\n\t\t\t  }\r\n\t\t\t  return true;\r\n\t\t},\r\n\t},\r\n\r\n\r\n\t// Included for Gutsy Jaw:\r\n\t// Burn status' Atk reduction and Guts users' immunity to it is hard-coded in battle.ts,\r\n\t// So we have to bypass it manually here.\r\n\tmodifyDamage(\r\n\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\r\n\t) {\r\n\t\tconst tr = this.trunc;\r\n\t\tif (!move.type) move.type = '???';\r\n\t\tconst type = move.type;\r\n\r\n\t\tbaseDamage += 2;\r\n\r\n\t\t// multi-target modifier (doubles only)\r\n\t\tif (move.spreadHit) {\r\n\t\t\tconst spreadModifier = move.spreadModifier || (this.gameType === 'free-for-all' ? 0.5 : 0.75);\r\n\t\t\tthis.debug('Spread modifier: ' + spreadModifier);\r\n\t\t\tbaseDamage = this.modify(baseDamage, spreadModifier);\r\n\t\t}\r\n\r\n\t\t// weather modifier\r\n\t\tbaseDamage = this.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\t// crit - not a modifier\r\n\t\tconst isCrit = target.getMoveHitData(move).crit;\r\n\t\tif (isCrit) {\r\n\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.gen >= 6 ? 1.5 : 2)));\r\n\t\t}\r\n\r\n\t\t// random factor - also not a modifier\r\n\t\tbaseDamage = this.randomizer(baseDamage);\r\n\r\n\t\t// STAB\r\n\t\tif (move.forceSTAB || (type !== '???' && pokemon.hasType(type))) {\r\n\t\t\t// The \"???\" type never gets STAB\r\n\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\r\n\t\t\t// Struggle in the same turn.\r\n\t\t\t// (On second thought, it might be easier to get a MissingNo.)\r\n\t\t\tbaseDamage = this.modify(baseDamage, move.stab || 1.5);\r\n\t\t}\r\n\t\t// types\r\n\t\tlet typeMod = target.runEffectiveness(move);\r\n\t\ttypeMod = this.clampIntRange(typeMod, -6, 6);\r\n\t\ttarget.getMoveHitData(move).typeMod = typeMod;\r\n\t\tif (typeMod > 0) {\r\n\t\t\tif (!suppressMessages) this.add('-supereffective', target);\r\n\r\n\t\t\tfor (let i = 0; i < typeMod; i++) {\r\n\t\t\t\tbaseDamage *= 2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeMod < 0) {\r\n\t\t\tif (!suppressMessages) this.add('-resisted', target);\r\n\r\n\t\t\tfor (let i = 0; i > typeMod; i--) {\r\n\t\t\t\tbaseDamage = tr(baseDamage / 2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isCrit && !suppressMessages) this.add('-crit', target);\r\n\r\n\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !(pokemon.hasAbility('guts') || pokemon.hasAbility('gutsyjaw') || pokemon.hasAbility('wetfilling') || pokemon.hasAbility('rumenramming') || pokemon.hasAbility('gutsguard') || pokemon.hasAbility('courageous') || pokemon.hasAbility('ultraimpulse'))) {\r\n\t\t\tif (this.gen < 6 || move.id !== 'facade') {\r\n\t\t\t\tbaseDamage = this.modify(baseDamage, 0.5);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\r\n\t\tif (this.gen === 5 && !baseDamage) baseDamage = 1;\r\n\r\n\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\r\n\t\tbaseDamage = this.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\r\n\r\n\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\r\n\t\t\tbaseDamage = this.modify(baseDamage, 0.25);\r\n\t\t\tthis.add('-zbroken', target);\r\n\t\t}\r\n\r\n\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\r\n\t\tif (this.gen !== 5 && !baseDamage) return 1;\r\n\r\n\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\r\n\t\treturn tr(baseDamage, 16);\r\n\t},\r\n\r\n\tcureStatus(silent = false) {\r\n\t\tif (!this.hp || !this.status) return false;\r\n\t\tthis.battle.add('-curestatus', this, this.status, silent ? '[silent]' : '[msg]');\r\n\t\tif (this.status === 'slp' && !this.hasAbility('comatose') && this.removeVolatile('nightmare')) {\r\n\t\t\tthis.battle.add('-end', this, 'Nightmare', '[silent]');\r\n\t\t}\r\n\t\tthis.setStatus('');\r\n\t\tdelete this.m.orbItemStatus;\r\n\t\treturn true;\r\n\t},\r\n\r\n\t// Something something Life Orb Sheer Force\r\n\t// Wow, this sucks\r\n\tuseMoveInner(moveOrMoveName, pokemon, target, sourceEffect, zMove, maxMove) {\r\n\t\tif (!sourceEffect && this.effect.id) sourceEffect = this.effect;\r\n\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\r\n\r\n\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\r\n\t\tif (move.id === 'weatherball' && zMove) {\r\n\t\t\t// Z-Weather Ball only changes types if it's used directly,\r\n\t\t\t// not if it's called by Z-Sleep Talk or something.\r\n\t\t\tthis.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tif (move.type !== 'Normal') sourceEffect = move;\r\n\t\t}\r\n\t\tif (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\r\n\t\t\tmove = this.getActiveZMove(move, pokemon);\r\n\t\t}\r\n\t\tif (maxMove && move.category !== 'Status') {\r\n\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\r\n\t\t\tthis.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\t\tthis.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\t}\r\n\t\tif (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\r\n\t\t\tmove = this.getActiveMaxMove(move, pokemon);\r\n\t\t}\r\n\r\n\t\tif (this.activeMove) {\r\n\t\t\tmove.priority = this.activeMove.priority;\r\n\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.activeMove.pranksterBoosted;\r\n\t\t}\r\n\t\tconst baseTarget = move.target;\r\n\t\tif (target === undefined) target = this.getRandomTarget(pokemon, move);\r\n\t\tif (move.target === 'self' || move.target === 'allies') {\r\n\t\t\ttarget = pokemon;\r\n\t\t}\r\n\t\tif (sourceEffect) {\r\n\t\t\tmove.sourceEffect = sourceEffect.id;\r\n\t\t\tmove.ignoreAbility = false;\r\n\t\t}\r\n\t\tlet moveResult = false;\r\n\r\n\t\tthis.setActiveMove(move, pokemon, target);\r\n\r\n\t\tthis.singleEvent('ModifyType', move, null, pokemon, target, move, move);\r\n\t\tthis.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\r\n\t\tif (baseTarget !== move.target) {\r\n\t\t\t// Target changed in ModifyMove, so we must adjust it here\r\n\t\t\t// Adjust before the next event so the correct target is passed to the\r\n\t\t\t// event\r\n\t\t\ttarget = this.getRandomTarget(pokemon, move);\r\n\t\t}\r\n\t\tmove = this.runEvent('ModifyType', pokemon, target, move, move);\r\n\t\tmove = this.runEvent('ModifyMove', pokemon, target, move, move);\r\n\t\tif (baseTarget !== move.target) {\r\n\t\t\t// Adjust again\r\n\t\t\ttarget = this.getRandomTarget(pokemon, move);\r\n\t\t}\r\n\t\tif (!move || pokemon.fainted) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet attrs = '';\r\n\r\n\t\tlet movename = move.name;\r\n\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\r\n\t\tif (sourceEffect) attrs += `|[from]${sourceEffect.fullname}`;\r\n\t\tif (zMove && move.isZ === true) {\r\n\t\t\tattrs = '|[anim]' + movename + attrs;\r\n\t\t\tmovename = 'Z-' + movename;\r\n\t\t}\r\n\t\tthis.addMove('move', pokemon, movename, target + attrs);\r\n\r\n\t\tif (zMove) this.runZPower(move, pokemon);\r\n\r\n\t\tif (!target) {\r\n\t\t\tthis.attrLastMove('[notarget]');\r\n\t\t\tthis.add(this.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst {targets, pressureTargets} = pokemon.getMoveTargets(move, target);\r\n\t\tif (targets.length) {\r\n\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\r\n\t\t}\r\n\r\n\t\tif (!sourceEffect || sourceEffect.id === 'pursuit') {\r\n\t\t\tlet extraPP = 0;\r\n\t\t\tfor (const source of pressureTargets) {\r\n\t\t\t\tconst ppDrop = this.runEvent('DeductPP', source, pokemon, move);\r\n\t\t\t\tif (ppDrop !== true) {\r\n\t\t\t\t\textraPP += ppDrop || 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (extraPP > 0) {\r\n\t\t\t\tpokemon.deductPP(move, extraPP);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.singleEvent('TryMove', move, null, pokemon, target, move) ||\r\n\t\t\t!this.runEvent('TryMove', pokemon, target, move)) {\r\n\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\r\n\r\n\t\tif (move.ignoreImmunity === undefined) {\r\n\t\t\tmove.ignoreImmunity = (move.category === 'Status');\r\n\t\t}\r\n\r\n\t\tif (this.gen !== 4 && move.selfdestruct === 'always') {\r\n\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t}\r\n\r\n\t\tlet damage: number | false | undefined | '' = false;\r\n\t\tif (move.target === 'all' || move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') {\r\n\t\t\tdamage = this.tryMoveHit(target, pokemon, move);\r\n\t\t\tif (damage === this.NOT_FAIL) pokemon.moveThisTurnResult = null;\r\n\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\r\n\t\t} else {\r\n\t\t\tif (!targets.length) {\r\n\t\t\t\tthis.attrLastMove('[notarget]');\r\n\t\t\t\tthis.add(this.gen >= 5 ? '-fail' : '-notarget', pokemon);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.gen === 4 && move.selfdestruct === 'always') {\r\n\t\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t\t}\r\n\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\r\n\t\t}\r\n\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\r\n\t\tif (!pokemon.hp) {\r\n\t\t\tthis.faint(pokemon, pokemon, move);\r\n\t\t}\r\n\r\n\t\tif (!moveResult) {\r\n\t\t\tthis.singleEvent('MoveFail', move, null, target, pokemon, move);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Right here\r\n\t\tif (!move.negateSecondary && !(move.hasSheerForce && (pokemon.hasAbility('terrorizer') || pokemon.hasAbility('monarchyenforcement') || pokemon.hasAbility('hydraulicpress') || pokemon.hasAbility('noproprioception') || pokemon.hasAbility('versatility') || pokemon.hasAbility('thickskull') || pokemon.hasAbility('sheerluck'))) && !(pokemon.hasAbility('sheerluck') && move.critRatio > 1)) {\r\n\t\t\tconst originalHp = pokemon.hp;\r\n\t\t\tthis.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\r\n\t\t\tthis.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\r\n\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status') {\r\n\t\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && originalHp > pokemon.maxhp / 2) {\r\n\t\t\t\t\tthis.runEvent('EmergencyExit', pokemon, pokemon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\tafterMoveSecondaryEvent(targets, pokemon, move) {\r\n\t\t// console.log(`${targets}, ${pokemon}, ${move}`)\r\n\t\tif (!move.negateSecondary && !(move.hasSheerForce && (pokemon.hasAbility('terrorizer') || pokemon.hasAbility('monarchyenforcement') || pokemon.hasAbility('hydraulicpress') || pokemon.hasAbility('noproprioception') || pokemon.hasAbility('versatility') || pokemon.hasAbility('thickskull') || pokemon.hasAbility('sheerluck'))) && !(pokemon.hasAbility('sheerluck') && move.critRatio > 1)) {\r\n\t\t\tthis.singleEvent('AfterMoveSecondary', move, null, targets[0], pokemon, move);\r\n\t\t\tthis.runEvent('AfterMoveSecondary', targets, pokemon, move);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t},\r\n\thitStepMoveHitLoop(targets, pokemon, move) { // Temporary name\r\n\t\tconst damage: (number | boolean | undefined)[] = [];\r\n\t\tfor (const i of targets.keys()) {\r\n\t\t\tdamage[i] = 0;\r\n\t\t}\r\n\t\tmove.totalDamage = 0;\r\n\t\tpokemon.lastDamage = 0;\r\n\t\tlet targetHits = move.multihit || 1;\r\n\t\tif (Array.isArray(targetHits)) {\r\n\t\t\t// yes, it's hardcoded... meh\r\n\t\t\tif (targetHits[0] === 2 && targetHits[1] === 5) {\r\n\t\t\t\tif (this.gen >= 5) {\r\n\t\t\t\t\t// 35-35-15-15 out of 100 for 2-3-4-5 hits\r\n\t\t\t\t\ttargetHits = this.sample([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttargetHits = this.sample([2, 2, 2, 3, 3, 3, 4, 5]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttargetHits = this.random(targetHits[0], targetHits[1] + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttargetHits = Math.floor(targetHits);\r\n\t\tlet nullDamage = true;\r\n\t\tlet moveDamage: (number | boolean | undefined)[];\r\n\t\t// There is no need to recursively check the \u00B4sleepUsable\u00B4 flag as Sleep Talk can only be used while asleep.\r\n\t\tconst isSleepUsable = move.sleepUsable || this.dex.moves.get(move.sourceEffect).sleepUsable;\r\n\r\n\t\tlet targetsCopy: (Pokemon | false | null)[] = targets.slice(0);\r\n\t\tlet hit: number;\r\n\t\tfor (hit = 1; hit <= targetHits; hit++) {\r\n\t\t\tif (damage.includes(false)) break;\r\n\t\t\tif (hit > 1 && pokemon.status === 'slp' && !isSleepUsable) break;\r\n\t\t\tif (targets.every(target => !target || !target.hp)) break;\r\n\t\t\tmove.hit = hit;\r\n\t\t\tif (move.smartTarget && targets.length > 1) {\r\n\t\t\t\ttargetsCopy = [targets[hit - 1]];\r\n\t\t\t} else {\r\n\t\t\t\ttargetsCopy = targets.slice(0);\r\n\t\t\t}\r\n\t\t\tconst target = targetsCopy[0]; // some relevant-to-single-target-moves-only things are hardcoded\r\n\t\t\tif (target && typeof move.smartTarget === 'boolean') {\r\n\t\t\t\tif (hit > 1) {\r\n\t\t\t\t\tthis.addMove('-anim', pokemon, move.name, target);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.retargetLastMove(target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// like this (Triple Kick)\r\n\t\t\tif (target && move.multiaccuracy && hit > 1) {\r\n\t\t\t\tlet accuracy = move.accuracy;\r\n\t\t\t\tconst boostTable = [1, 4 / 3, 5 / 3, 2, 7 / 3, 8 / 3, 3];\r\n\t\t\t\tif (accuracy !== true) {\r\n\t\t\t\t\tif (!move.ignoreAccuracy) {\r\n\t\t\t\t\t\tconst boosts = this.runEvent('ModifyBoost', pokemon, null, null, {...pokemon.boosts});\r\n\t\t\t\t\t\tconst boost = this.clampIntRange(boosts['accuracy'], -6, 6);\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy *= boostTable[boost];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\taccuracy /= boostTable[-boost];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!move.ignoreEvasion) {\r\n\t\t\t\t\t\tconst boosts = this.runEvent('ModifyBoost', target, null, null, {...target.boosts});\r\n\t\t\t\t\t\tconst boost = this.clampIntRange(boosts['evasion'], -6, 6);\r\n\t\t\t\t\t\tif (boost > 0) {\r\n\t\t\t\t\t\t\taccuracy /= boostTable[boost];\r\n\t\t\t\t\t\t} else if (boost < 0) {\r\n\t\t\t\t\t\t\taccuracy *= boostTable[-boost];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\taccuracy = this.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\r\n\t\t\t\tif (!move.alwaysHit) {\r\n\t\t\t\t\taccuracy = this.runEvent('Accuracy', target, pokemon, move, accuracy);\r\n\t\t\t\t\tif (accuracy !== true && !this.randomChance(accuracy, 100)) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst moveData = move;\r\n\t\t\tif (!moveData.flags) moveData.flags = {};\r\n\r\n\t\t\t// Modifies targetsCopy (which is why it's a copy)\r\n\t\t\t[moveDamage, targetsCopy] = this.spreadMoveHit(targetsCopy, pokemon, move, moveData);\r\n\r\n\t\t\tif (!moveDamage.some(val => val !== false)) break;\r\n\t\t\tnullDamage = false;\r\n\r\n\t\t\tfor (const [i, md] of moveDamage.entries()) {\r\n\t\t\t\t// Damage from each hit is individually counted for the\r\n\t\t\t\t// purposes of Counter, Metal Burst, and Mirror Coat.\r\n\t\t\t\tdamage[i] = md === true || !md ? 0 : md;\r\n\t\t\t\t// Total damage dealt is accumulated for the purposes of recoil (Parental Bond).\r\n\t\t\t\tmove.totalDamage += damage[i] as number;\r\n\t\t\t}\r\n\t\t\tif (move.mindBlownRecoil) {\r\n\t\t\t\tthis.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get('Mind Blown'), true);\r\n\t\t\t\tmove.mindBlownRecoil = false;\r\n\t\t\t}\r\n\t\t\tthis.eachEvent('Update');\r\n\t\t\tif (!pokemon.hp && targets.length === 1) {\r\n\t\t\t\thit++; // report the correct number of hits for multihit moves\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// hit is 1 higher than the actual hit count\r\n\t\tif (hit === 1) return damage.fill(false);\r\n\t\tif (nullDamage) damage.fill(false);\r\n\t\tif (move.multihit && typeof move.smartTarget !== 'boolean') {\r\n\t\t\tthis.add('-hitcount', targets[0], hit - 1);\r\n\t\t}\r\n\r\n\t\tif (move.recoil && move.totalDamage) {\r\n\t\t\tthis.damage(this.calcRecoilDamage(move.totalDamage, move), pokemon, pokemon, 'recoil');\r\n\t\t}\r\n\r\n\t\tif (move.struggleRecoil) {\r\n\t\t\tlet recoilDamage;\r\n\t\t\tif (this.dex.gen >= 5) {\r\n\t\t\t\trecoilDamage = this.clampIntRange(Math.round(pokemon.baseMaxhp / 4), 1);\r\n\t\t\t} else {\r\n\t\t\t\trecoilDamage = this.trunc(pokemon.maxhp / 4);\r\n\t\t\t}\r\n\t\t\tthis.directDamage(recoilDamage, pokemon, pokemon, {id: 'strugglerecoil'} as Condition);\r\n\t\t}\r\n\r\n\t\t// smartTarget messes up targetsCopy, but smartTarget should in theory ensure that targets will never fail, anyway\r\n\t\tif (move.smartTarget) targetsCopy = targets.slice(0);\r\n\r\n\t\tfor (const [i, target] of targetsCopy.entries()) {\r\n\t\t\tif (target && pokemon !== target) {\r\n\t\t\t\ttarget.gotAttacked(move, damage[i] as number | false | undefined, pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.ohko && !targets[0].hp) this.add('-ohko');\r\n\r\n\t\tif (!damage.some(val => !!val || val === 0)) return damage;\r\n\r\n\t\tthis.eachEvent('Update');\r\n\r\n\t\tthis.afterMoveSecondaryEvent(targetsCopy.filter(val => !!val) as Pokemon[], pokemon, move);\r\n\t\t// Right here\r\n\t\tif (!move.negateSecondary && !(move.hasSheerForce && (pokemon.hasAbility('terrorizer') || pokemon.hasAbility('monarchyenforcement')))) {\r\n\t\t\tfor (const [i, d] of damage.entries()) {\r\n\t\t\t\t// There are no multihit spread moves, so it's safe to use move.totalDamage for multihit moves\r\n\t\t\t\t// The previous check was for `move.multihit`, but that fails for Dragon Darts\r\n\t\t\t\tconst curDamage = targets.length === 1 ? move.totalDamage : d;\r\n\t\t\t\tif (typeof curDamage === 'number' && targets[i].hp) {\r\n\t\t\t\t\tconst targetHPBeforeDamage = (targets[i].hurtThisTurn || 0) + curDamage;\r\n\t\t\t\t\tif (targets[i].hp <= targets[i].maxhp / 2 && targetHPBeforeDamage > targets[i].maxhp / 2) {\r\n\t\t\t\t\t\tthis.runEvent('EmergencyExit', targets[i], pokemon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn damage;\r\n\t},\r\n\tcanUltraBurst(pokemon) {\r\n\t\tif (['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane'].includes(pokemon.baseSpecies.name) &&\r\n\t\t\tpokemon.getItem().id === 'ultranecroziumz') {\r\n\t\t\treturn \"Necrozma-Ultra\";\r\n\t\t}\r\n\t\tif (['Noze-Dawn-Wings'].includes(pokemon.baseSpecies.name) &&\r\n\t\t\tpokemon.getItem().id === 'depletedultranecroziumz') {\r\n\t\t\treturn \"Noze-Ultra\";\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\thitStepTryImmunity(targets, pokemon, move) {\r\n\t\tconst hitResults = [];\r\n\t\tfor (const [i, target] of targets.entries()) {\r\n\t\t\tif (this.gen >= 6 && move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\r\n\t\t\t\tthis.debug('natural powder immunity');\r\n\t\t\t\tthis.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else if (!this.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\r\n\t\t\t\tthis.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else if (this.gen >= 7 && move.pranksterBoosted && (pokemon.hasAbility('prankster') || pokemon.hasAbility('notfunny') || pokemon.hasAbility('darkhumour') || pokemon.hasAbility('flashyjokes') || pokemon.hasAbility('lighthearted') || pokemon.hasAbility('creepy')) &&\r\n\t\t\t\ttargets[i].side !== pokemon.side && !this.dex.getImmunity('prankster', target)) {\r\n\t\t\t\tthis.debug('natural prankster immunity');\r\n\t\t\t\tif (!target.illusion) this.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\r\n\t\t\t\tthis.add('-immune', target);\r\n\t\t\t\thitResults[i] = false;\r\n\t\t\t} else {\r\n\t\t\t\thitResults[i] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hitResults;\r\n\t},\r\n\thitStepStealBoosts(targets, pokemon, move) {\r\n\t\tconst target = targets[0]; // hardcoded\r\n\t\tif (move.stealsBoosts) {\r\n\t\t\tconst boosts: SparseBoostsTable = {};\r\n\t\t\tlet stolen = false;\r\n\t\t\tlet statName: BoostName;\r\n\t\t\tfor (statName in target.boosts) {\r\n\t\t\t\tconst stage = target.boosts[statName];\r\n\t\t\t\tif (stage > 0) {\r\n\t\t\t\t\tboosts[statName] = stage;\r\n\t\t\t\t\tstolen = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stolen) {\r\n\t\t\t\tthis.attrLastMove('[still]');\r\n\t\t\t\tthis.add('-clearpositiveboost', target, pokemon, 'move: ' + move.name);\r\n\t\t\t\tthis.boost(boosts, pokemon, pokemon);\r\n\r\n\t\t\t\tlet statName2: BoostName;\r\n\t\t\t\tfor (statName2 in boosts) {\r\n\t\t\t\t\tboosts[statName2] = 0;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.setBoost(boosts);\r\n\t\t\t\tthis.addMove('-anim', pokemon, \"Spectral Thief\", target);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// this DEFINITELY should fucking not have worked first try. I am so mad.\r\n\t\tif (pokemon.ability === 'faustianpact' && move.flags['contact']) {\r\n\t\t\tlet swapped = false;\r\n\t\t\tconst targetAbility = target.getAbility();\r\n\t\t\tconst additionalBannedAbilities = ['hungerswitch', 'illusion', 'neutralizinggas', 'wonderguard'];\r\n\t\t\tif (!targetAbility.isPermanent || !additionalBannedAbilities.includes(targetAbility) || !pokemon.volatiles['dynamax']) {\r\n\t\t\t\tswapped = true;\r\n\t\t\t}\r\n\t\t\tif (swapped) {\r\n\t\t\t\tthis.attrLastMove('[still]'); // Will it work without this line...?\r\n\t\t\t\ttarget.setAbility('faustianpact', pokemon);\r\n\t\t\t\tpokemon.setAbility(targetAbility);\r\n\t\t\t\tthis.add('-activate', pokemon, 'ability: Faustian Pact');\r\n\t\t\t\tthis.add('-activate', pokemon, 'Skill Swap', '', '', '[of] ' + target);\r\n\t\t\t\tthis.add('-activate', pokemon, 'ability: ' + targetAbility.name);\r\n\t\t\t\tthis.add('-activate', target, 'ability: Faustian Pact');\r\n\t\t\t\tthis.addMove('-anim', pokemon, move.name, target);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,UAAkD;AAAA,EAC9D,OAAO;AAEN,eAAW,MAAM,KAAK,UAAU,SAAS;AACxC,YAAM,cAAc,KAAK,UAAU,QAAQ,EAAE;AAC7C,UAAI,YAAY,QAAQ;AACvB,cAAM,qBAAqB,CAAC;AAC5B,iBAAS,QAAQ,YAAY,QAAQ;AACpC,cAAI,QAAQ;AACZ,iBAAO,OAAO;AACb,+BAAmB,KAAK,IAAI;AAC5B,kBAAM,WAAW,KAAK,UAAU,QAAQ,KAAK,KAAK,IAAI,CAAC;AACvD,gBAAI,SAAS;AAAO,qBAAO,SAAS;AAAA;AAC/B,sBAAQ;AAAA,UACd;AAAA,QACD;AACA,YAAI,CAAC,KAAK,UAAU,UAAU,EAAE;AAAG,eAAK,UAAU,UAAU,EAAE,IAAI,EAAC,UAAU,CAAC,EAAC;AAC/E,mBAAW,QAAQ,oBAAoB;AACtC,gBAAM,WAAW,KAAK,UAAU,UAAU,KAAK,KAAK,IAAI,CAAC,EAAE;AAC3D,qBAAW,UAAU,UAAU;AAC9B,gBAAI,KAAK,UAAU,MAAM,MAAM,EAAE,kBAAkB;AAAQ;AAC3D,iBAAK,QAAQ,aAAa,EAAE,EAAE,SAAS,MAAM,IAAI,CAAC,KAAK;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAKA,SAAK,QAAQ,aAAa,eAAe,EAAE,SAAS,gBAAgB,CAAC,KAAK;AAC1E,SAAK,QAAQ,aAAa,mBAAmB,EAAE,SAAS,eAAe,CAAC,KAAK;AAC7E,SAAK,QAAQ,aAAa,eAAe,EAAE,SAAS,gBAAgB,CAAC,KAAK;AAC1E,SAAK,QAAQ,aAAa,kBAAkB,EAAE,SAAS,cAAc,CAAC,KAAK;AAC3E,SAAK,QAAQ,aAAa,iBAAiB,EAAE,SAAS,iBAAiB,CAAC,KAAK;AAC7E,SAAK,QAAQ,aAAa,mBAAmB,EAAE,SAAS,iBAAiB,CAAC,KAAK;AAC/E,WAAO,KAAK,QAAQ,aAAa,eAAe,EAAE,SAAS;AAC3D,WAAO,KAAK,QAAQ,aAAa,mBAAmB,EAAE,SAAS;AAAA,EAChE;AAAA,EAEA,mBAAmB;AAAA;AAAA,IAElB,sBAAsB;AAAA;AAAA,IAEtB,aAAa,CAAC,QAAQ,UAAU,QAAQ,UAAU,SAAS,QAAQ,SAAS,SAAS;AAAA,EACtF;AAAA,EAEA,WAAW,SAAS;AACnB,UAAM,WAAW,QAAQ,YAAY,eAAe,KAAK,IAAI,QAAQ,IAAI,QAAQ,YAAY,YAAY,CAAC,CAAC;AAC3G,UAAM,OAAO,QAAQ,QAAQ;AAC7B,QACC,UAAU,UAAU,UAAU,gBAC9B,QAAQ,UAAU,SAAS,KAAK,KAAK,SAAS,YAAY,CAAC,KAAK,CAAC,KAAK,OACrE;AACD,aAAO,SAAS;AAAA,IACjB;AAsDA,QAAI,KAAK,SAAS,eAAe,QAAQ,YAAY,SAAS,WAAW;AACxE,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,kBAAkB,QAAQ,YAAY,SAAS,YAAY;AAC5E,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,cAAc,QAAQ,YAAY,SAAS,WAAW;AACvE,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,kBAAkB,QAAQ,YAAY,SAAS,aAAa;AAC7E,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,SAAS,cAAc,QAAQ,YAAY,SAAS,WAAW;AACvE,aAAO;AAAA,IACR;AACA,QAAI,KAAK,SAAS,iBAAiB,QAAQ,YAAY,SAAS,cAAc;AAC7E,aAAO;AAAA,IACR;AACA,QAAI,KAAK,SAAS,iBAAiB,QAAQ,YAAY,SAAS,YAAY;AAC3E,aAAO;AAAA,IACR;AACA,QAAI,KAAK,SAAS,iBAAiB,QAAQ,YAAY,SAAS,cAAc;AAC7E,aAAO;AAAA,IACR;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,QAAQ,gBAAgB,SAAS,WAAW,cAAc,OAAO,cAAc,SAAS,gBAAgB;AACvG,YAAQ;AACR,QAAI,SAAS,KAAK,UAAU,SAAS,WAAW,SAAS,gBAAgB,WAAW,cAAc;AAClG,QAAI,WAAW,KAAK,IAAI,cAAc,cAAc;AACpD,UAAM,mBAAmB,SAAS;AAClC,QAAI,SAAS,OAAO,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc;AACtE,YAAM,cAAc,KAAK,SAAS,kBAAkB,SAAS,QAAQ,QAAQ;AAC7E,UAAI,eAAe,gBAAgB,MAAM;AACxC,mBAAW,KAAK,IAAI,cAAc,WAAW;AAC7C,YAAI;AAAkB,mBAAS,mBAAmB;AAClD,iBAAS,KAAK,gBAAgB,SAAS,QAAQ;AAAA,MAChD;AAAA,IACD;AACA,QAAI,OAAO;AACX,QAAI,OAAO;AACV,aAAO,KAAK,eAAe,UAAU,OAAO;AAAA,IAC7C,WAAW,SAAS;AACnB,aAAO,KAAK,iBAAiB,UAAU,OAAO;AAAA,IAC/C;AAEA,SAAK,aAAa;AAElB,SAAK,cAAc,MAAM,SAAS,MAAM;AAUxC,UAAM,cAAc,KAAK,SAAS,cAAc,SAAS,QAAQ,IAAI;AACrE,QAAI,CAAC,aAAa;AACjB,WAAK,SAAS,eAAe,SAAS,QAAQ,IAAI;AAClD,WAAK,gBAAgB,IAAI;AAIzB,cAAQ,qBAAqB;AAC7B;AAAA,IACD;AACA,QAAI,KAAK,oBAAoB;AAC5B,UAAI,KAAK,mBAAmB,KAAK,MAAM,SAAS,QAAQ,IAAI,GAAG;AAC9D,aAAK,gBAAgB,IAAI;AACzB,gBAAQ,qBAAqB;AAC7B;AAAA,MACD;AAAA,IACD;AACA,YAAQ,aAAa;AACrB,QAAI;AACJ,QAAI,CAAC,cAAc;AAClB,mBAAa,KAAK,SAAS,YAAY,OAAO;AAC9C,UAAI,eAAe;AAAM,qBAAa;AACtC,UAAI,CAAC,YAAY;AAChB,YAAI,CAAC,QAAQ,SAAS,UAAU,MAAM,MAAM,KAAM,KAAK,OAAO,YAAa;AAC1E,eAAK,IAAI,QAAQ,SAAS,QAAQ,IAAI;AACtC,gBAAM,cAAc;AAAA,YACnB;AAAA,YAAM;AAAA,YAAY;AAAA,YAAkB;AAAA,YAAoB;AAAA,YAAM;AAAA,YAAM;AAAA,YAAO;AAAA,UAC5E,EAAE,KAAK,GAAG,KAAK;AACf,eAAK,KAAK,yDAAyD,uDAAuD;AAC1H,eAAK,gBAAgB,IAAI;AACzB,kBAAQ,qBAAqB;AAC7B;AAAA,QACD;AAAA,MACD,OAAO;AACN,uBAAe,KAAK,IAAI,WAAW,IAAI,YAAY;AAAA,MACpD;AACA,cAAQ,SAAS,MAAM,SAAS;AAAA,IACjC;AAIA,UAAM,SAAS,gBAAgB,CAAC,QAAQ,UAAU,YAAY;AAE9D,QAAI,OAAO;AACV,UAAI,QAAQ,UAAU;AACrB,aAAK,YAAY,OAAO,KAAK,IAAI,UAAU,IAAI,UAAU,GAAG,QAAQ,aAAa,OAAO;AAAA,MACzF;AACA,WAAK,IAAI,WAAW,OAAO;AAC3B,cAAQ,KAAK,YAAY;AAAA,IAC1B;AACA,UAAM,mBAAmB,KAAK,QAAQ,UAAU,SAAS,QAAQ,cAAc,OAAO,OAAO;AAC7F,SAAK,6BAA6B,mBAAmB,KAAK,cAAc,KAAK,WAAW,KAAK;AAC7F,QAAI,KAAK;AAAY,aAAO,KAAK;AACjC,SAAK,YAAY,aAAa,MAAM,MAAM,SAAS,QAAQ,IAAI;AAC/D,SAAK,SAAS,aAAa,SAAS,QAAQ,IAAI;AAGhD,QAAI,oBAAoB,CAAC,KAAK,YAAY;AACzC,YAAM,UAAU,CAAC;AACjB,iBAAW,eAAe,KAAK,aAAa,GAAG;AAC9C,YAAI,YAAY;AAAa;AAC7B,YAAI,CAAC,YAAY,mBAAmB,MAAM,KAAK,MAAM,OAAO,KAAK,YAAY,WAAW,QAAQ,MAAO,KAAK,aAAa,YAAY,YAAY,WAAW,WAAW,GAAI;AAC1K,kBAAQ,KAAK,WAAW;AAAA,QACzB;AAAA,MACD;AAKA,cAAQ;AAAA,QACP,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY,KAAK,IAAI,EAAE,YAAY,KAAK,MAAM,EAAE,eAAe,EAAE;AAAA,MAChF;AACA,iBAAW,UAAU,SAAS;AAC7B,YAAI,KAAK,cAAc;AAAG;AAC1B,YAAI,OAAO;AAAS;AACpB,cAAM,gBAAgB,OAAO,SAAS,OAAO,QAAQ,QAAQ,SAAS,OAAO,OAAO,SAAS;AAC7F,aAAK,QAAQ,KAAK,IAAI,QAAQ,KAAK,aAAa,eAAe,MAAM,GAAG,KAAK,IAAI,UAAU,IAAI,OAAO,OAAO,GAAG,QAAW,IAAI;AAAA,MAChI;AAAA,IACD;AACA,QAAI,UAAU,QAAQ,UAAU,YAAY;AAAG,aAAO,QAAQ,UAAU,YAAY;AAAA,EACrF;AAAA,EAEA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOR,YAAY,MAAc,SAA4B;AACrD,UAAI,CAAC,QAAQ,SAAS;AAAO,eAAO;AACpC,UAAI,EAAE,QAAQ,KAAK,OAAO,IAAI,KAAK,YAAY;AAC9C,YAAI,SAAS,WAAW,SAAS,UAAU,SAAS;AAAS,iBAAO;AACpE,cAAM,IAAI,MAAM,+BAA+B,IAAI;AAAA,MACpD;AACA,UAAI,KAAK;AAAS,eAAO;AAEzB,YAAM,eAAe,KAAK,OAAO,SAAS,kBAAkB,MAAM,IAAI;AACtE,UAAI;AACJ,UAAI,SAAS,UAAU;AACtB,qBAAa,KAAK,WAAW,CAAC,YAAY;AAC1C,YAAI,eAAe,MAAM;AACxB,cAAI,SAAS;AACZ,gBAAI,KAAK,WAAW,eAAe,GAAG;AACrC,mBAAK,OAAO,IAAI,WAAW,MAAM,gCAAgC;AAAA,YAClE,WAAW,KAAK,WAAW,WAAW,GAAG;AACxC,mBAAK,OAAO,IAAI,WAAW,MAAM,2BAA2B;AAAA,YAC7D,WAAW,KAAK,WAAW,cAAc,GAAG;AAC3C,mBAAK,OAAO,IAAI,WAAW,MAAM,8BAA8B;AAAA,YAChE,WAAW,KAAK,WAAW,aAAa,GAAG;AAC1C,mBAAK,OAAO,IAAI,WAAW,MAAM,8BAA8B;AAAA,YAChE,WAAW,KAAK,WAAW,UAAU,GAAG;AACvC,mBAAK,OAAO,IAAI,WAAW,MAAM,0BAA0B;AAAA,YAC5D,WAAW,KAAK,WAAW,cAAc,GAAG;AAC3C,mBAAK,OAAO,IAAI,WAAW,MAAM,8BAA8B;AAAA,YAChE,WAAW,KAAK,WAAW,iBAAiB,GAAG;AAC9C,mBAAK,OAAO,IAAI,WAAW,MAAM,kCAAkC;AAAA,YACpE,WAAW,KAAK,WAAW,YAAY,GAAG;AACzC,mBAAK,OAAO,IAAI,WAAW,MAAM,6BAA6B;AAAA,YAC/D,WAAW,KAAK,WAAW,aAAa,GAAG;AAC1C,mBAAK,OAAO,IAAI,WAAW,MAAM,8BAA8B;AAAA,YAChE,WAAW,KAAK,WAAW,WAAW,GAAG;AACxC,mBAAK,OAAO,IAAI,WAAW,MAAM,2BAA2B;AAAA,YAC7D,WAAW,KAAK,WAAW,YAAY,GAAG;AACzC,mBAAK,OAAO,IAAI,WAAW,MAAM,4BAA4B;AAAA,YAC9D,WAAW,KAAK,WAAW,YAAY,GAAG;AACzC,mBAAK,OAAO,IAAI,WAAW,MAAM,4BAA4B;AAAA,YAC9D,OAAO;AACN,mBAAK,OAAO,IAAI,WAAW,MAAM,0BAA0B;AAAA,YAC5D;AAAA,UACD;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AACA,UAAI,CAAC;AAAc,eAAO;AAC1B,UAAK,eAAe,UAAa,CAAC,KAAK,OAAO,IAAI,YAAY,MAAM,IAAI,KAAM,eAAe,OAAO;AACnG,YAAI,SAAS;AACZ,eAAK,OAAO,IAAI,WAAW,IAAI;AAAA,QAChC;AACA,eAAO;AAAA,MACR;AACA,aAAO;AAAA,IACR;AAAA,IAGA,WAAW,iBAAiB,OAAO;AAClC,UAAI,aAAa,KAAK,OAAO,MAAM;AAAe,eAAO;AACzD,UAAI,aAAa,KAAK,aAAa,KAAK,OAAO,OAAO;AAAG,eAAO;AAChE,UAAI,eAAe,KAAK;AAAW,eAAO;AAC1C,YAAM,OAAQ,KAAK,aAAa,IAAI,KAAK,KAAK;AAC9C,UAAI,SAAS;AAAY,eAAO;AAEhC,UAAI,CAAC,kBAAkB,KAAK,QAAQ,QAAQ,KAAK,EAAE,WAAW,KAAK;AAAY,eAAO;AACtF,WACE,KAAK,WAAW,UAAU,KAC3B,KAAK,WAAW,eAAe,KAC/B,KAAK,WAAW,WAAW,KAC3B,KAAK,WAAW,cAAc,KAC9B,KAAK,WAAW,aAAa,MAE7B,CAAC,KAAK,OAAO,wBAAwB;AACpC,eAAO;AACT,UAAI,gBAAgB,KAAK;AAAW,eAAO;AAC3C,UAAI,iBAAiB,KAAK;AAAW,eAAO;AAC5C,aAAO,SAAS;AAAA,IACjB;AAAA,IAGA,kBAAkB;AAEjB,UAAI,kBAAkB;AACtB,UAAI,YAAY;AAChB,iBAAW,WAAW,KAAK,OAAO,aAAa,GAAG;AAEjD,YAAI,QAAQ,YAAa,qBAA6B,QAAQ,YAAa,eAAsB,CAAC,QAAQ,UAAU,YAAY,KAAK,CAAC,QAAQ,YAAY,QAAS;AAClK,4BAAkB;AAClB,sBAAY;AACZ;AAAA,QACD;AAAA,MACD;AAEA,aAAO,CAAC,EACN,KAAK,OAAO,OAAO,KAAK,CAAC,KAAK,aACjB,KAAK,UAAU,YAAY,KAAM,mBAAmB,KAAK,YAAa,qBAA8B,aAAa,KAAK,YAAa,gBACrI,CAAC,KAAK,WAAW,EAAE;AAAA,IAGjC;AAAA,IAEA,UACC,QACA,SAAyB,MACzB,eAA8B,MAC9B,mBAAmB,OAClB;AACC,UAAI,CAAC,KAAK;AAAI,eAAO;AACrB,eAAS,KAAK,OAAO,IAAI,WAAW,IAAI,MAAM;AAC9C,UAAI,KAAK,OAAO,OAAO;AACxB,YAAI,CAAC;AAAQ,mBAAS,KAAK,OAAO,MAAM;AACxC,YAAI,CAAC;AAAc,yBAAe,KAAK,OAAO;AAAA,MAC7C;AACA,UAAI,CAAC;AAAQ,iBAAS;AAEtB,UAAI,KAAK,WAAW,OAAO,IAAI;AAChC,YAAK,cAAuB,WAAW,KAAK,QAAQ;AACjD,eAAK,OAAO,IAAI,SAAS,MAAM,KAAK,MAAM;AAAA,QAC7C,WAAY,cAAuB,QAAQ;AACxC,eAAK,OAAO,IAAI,SAAS,MAAM;AAC/B,eAAK,OAAO,aAAa,SAAS;AAAA,QACrC;AACA,eAAO;AAAA,MACN;AAEA,UAAI,CAAC,oBAAoB,OAAO,MAC9B,EAAE,QAAQ,WAAW,CAAC,aAAa,WAAW,CAAC,KAAK,CAAC,OAAO,KAAK,EAAE,SAAS,OAAO,EAAE,IAAI;AAE5F,YAAI,CAAC,KAAK,kBAAkB,OAAO,OAAO,QAAQ,QAAQ,OAAO,EAAE,GAAG;AACnE,eAAK,OAAO,MAAM,kBAAkB;AACpC,cAAK,cAAuB,QAAQ;AAClC,iBAAK,OAAO,IAAI,WAAW,IAAI;AAAA,UACjC;AACA,iBAAO;AAAA,QACV;AAAA,MACC;AACA,YAAM,aAAa,KAAK;AACxB,YAAM,iBAAiB,KAAK;AAC5B,UAAI,OAAO,IAAI;AAChB,cAAM,SAAkB,KAAK,OAAO,SAAS,aAAa,MAAM,QAAQ,cAAc,MAAM;AAC5F,YAAI,CAAC,QAAQ;AACV,eAAK,OAAO,MAAM,iBAAiB,OAAO,KAAK,eAAe;AAC9D,iBAAO;AAAA,QACV;AAAA,MACC;AAEA,WAAK,SAAS,OAAO;AACrB,WAAK,aAAa,EAAC,IAAI,OAAO,IAAI,QAAQ,KAAI;AAC9C,UAAI;AAAQ,aAAK,WAAW,SAAS;AACrC,UAAI,OAAO;AAAU,aAAK,WAAW,WAAW,OAAO;AACvD,UAAI,OAAO,kBAAkB;AAC9B,aAAK,WAAW,WAAW,OAAO,iBAAiB,KAAK,KAAK,QAAQ,MAAM,QAAQ,YAAY;AAAA,MAC9F;AAEA,UAAI,OAAO,MAAM,CAAC,KAAK,OAAO,YAAY,SAAS,QAAQ,KAAK,YAAY,MAAM,QAAQ,YAAY,GAAG;AAC1G,aAAK,OAAO,MAAM,mBAAmB,OAAO,KAAK,eAAe;AAEhE,aAAK,SAAS;AACd,aAAK,aAAa;AAClB,eAAO;AAAA,MACN;AACA,UAAI,OAAO,MAAM,CAAC,KAAK,OAAO,SAAS,kBAAkB,MAAM,QAAQ,cAAc,MAAM,GAAG;AAC/F,eAAO;AAAA,MACN;AACA,aAAO;AAAA,IACV;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAMA,aACC,YAAoB,SAAkB,QAAiB,MAAkB,mBAAmB,OAC3F;AACD,UAAM,KAAK,KAAK;AAChB,QAAI,CAAC,KAAK;AAAM,WAAK,OAAO;AAC5B,UAAM,OAAO,KAAK;AAElB,kBAAc;AAGd,QAAI,KAAK,WAAW;AACnB,YAAM,iBAAiB,KAAK,mBAAmB,KAAK,aAAa,iBAAiB,MAAM;AACxF,WAAK,MAAM,sBAAsB,cAAc;AAC/C,mBAAa,KAAK,OAAO,YAAY,cAAc;AAAA,IACpD;AAGA,iBAAa,KAAK,SAAS,uBAAuB,SAAS,QAAQ,MAAM,UAAU;AAGnF,UAAM,SAAS,OAAO,eAAe,IAAI,EAAE;AAC3C,QAAI,QAAQ;AACX,mBAAa,GAAG,cAAc,KAAK,iBAAiB,KAAK,OAAO,IAAI,MAAM,GAAG;AAAA,IAC9E;AAGA,iBAAa,KAAK,WAAW,UAAU;AAGvC,QAAI,KAAK,aAAc,SAAS,SAAS,QAAQ,QAAQ,IAAI,GAAI;AAKhE,mBAAa,KAAK,OAAO,YAAY,KAAK,QAAQ,GAAG;AAAA,IACtD;AAEA,QAAI,UAAU,OAAO,iBAAiB,IAAI;AAC1C,cAAU,KAAK,cAAc,SAAS,IAAI,CAAC;AAC3C,WAAO,eAAe,IAAI,EAAE,UAAU;AACtC,QAAI,UAAU,GAAG;AAChB,UAAI,CAAC;AAAkB,aAAK,IAAI,mBAAmB,MAAM;AAEzD,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AACjC,sBAAc;AAAA,MACf;AAAA,IACD;AACA,QAAI,UAAU,GAAG;AAChB,UAAI,CAAC;AAAkB,aAAK,IAAI,aAAa,MAAM;AAEnD,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AACjC,qBAAa,GAAG,aAAa,CAAC;AAAA,MAC/B;AAAA,IACD;AAEA,QAAI,UAAU,CAAC;AAAkB,WAAK,IAAI,SAAS,MAAM;AAEzD,QAAI,QAAQ,WAAW,SAAS,KAAK,aAAa,cAAc,EAAE,QAAQ,WAAW,MAAM,KAAK,QAAQ,WAAW,UAAU,KAAK,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,cAAc,KAAK,QAAQ,WAAW,WAAW,KAAK,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,cAAc,IAAI;AACvT,UAAI,KAAK,MAAM,KAAK,KAAK,OAAO,UAAU;AACzC,qBAAa,KAAK,OAAO,YAAY,GAAG;AAAA,MACzC;AAAA,IACD;AAGA,QAAI,KAAK,QAAQ,KAAK,CAAC;AAAY,mBAAa;AAGhD,iBAAa,KAAK,SAAS,gBAAgB,SAAS,QAAQ,MAAM,UAAU;AAE5E,QAAI,KAAK,mBAAmB,OAAO,eAAe,IAAI,EAAE,eAAe;AACtE,mBAAa,KAAK,OAAO,YAAY,IAAI;AACzC,WAAK,IAAI,YAAY,MAAM;AAAA,IAC5B;AAGA,QAAI,KAAK,QAAQ,KAAK,CAAC;AAAY,aAAO;AAG1C,WAAO,GAAG,YAAY,EAAE;AAAA,EACzB;AAAA,EAEA,WAAW,SAAS,OAAO;AAC1B,QAAI,CAAC,KAAK,MAAM,CAAC,KAAK;AAAQ,aAAO;AACrC,SAAK,OAAO,IAAI,eAAe,MAAM,KAAK,QAAQ,SAAS,aAAa,OAAO;AAC/E,QAAI,KAAK,WAAW,SAAS,CAAC,KAAK,WAAW,UAAU,KAAK,KAAK,eAAe,WAAW,GAAG;AAC9F,WAAK,OAAO,IAAI,QAAQ,MAAM,aAAa,UAAU;AAAA,IACtD;AACA,SAAK,UAAU,EAAE;AACjB,WAAO,KAAK,EAAE;AACd,WAAO;AAAA,EACR;AAAA;AAAA;AAAA,EAIA,aAAa,gBAAgB,SAAS,QAAQ,cAAc,OAAO,SAAS;AAC3E,QAAI,CAAC,gBAAgB,KAAK,OAAO;AAAI,qBAAe,KAAK;AACzD,QAAI,gBAAgB,CAAC,YAAY,aAAa,EAAE,SAAS,aAAa,EAAE;AAAG,qBAAe;AAE1F,QAAI,OAAO,KAAK,IAAI,cAAc,cAAc;AAChD,QAAI,KAAK,OAAO,iBAAiB,OAAO;AAGvC,WAAK,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AACtE,UAAI,KAAK,SAAS;AAAU,uBAAe;AAAA,IAC5C;AACA,QAAI,SAAU,KAAK,aAAa,YAAY,gBAAiB,aAA4B,KAAM;AAC9F,aAAO,KAAK,eAAe,MAAM,OAAO;AAAA,IACzC;AACA,QAAI,WAAW,KAAK,aAAa,UAAU;AAE1C,WAAK,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AACtE,WAAK,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AAAA,IACxD;AACA,QAAI,WAAY,KAAK,aAAa,YAAY,gBAAiB,aAA4B,OAAQ;AAClG,aAAO,KAAK,iBAAiB,MAAM,OAAO;AAAA,IAC3C;AAEA,QAAI,KAAK,YAAY;AACpB,WAAK,WAAW,KAAK,WAAW;AAChC,UAAI,CAAC,KAAK;AAAY,aAAK,mBAAmB,KAAK,WAAW;AAAA,IAC/D;AACA,UAAM,aAAa,KAAK;AACxB,QAAI,WAAW;AAAW,eAAS,KAAK,gBAAgB,SAAS,IAAI;AACrE,QAAI,KAAK,WAAW,UAAU,KAAK,WAAW,UAAU;AACvD,eAAS;AAAA,IACV;AACA,QAAI,cAAc;AACjB,WAAK,eAAe,aAAa;AACjC,WAAK,gBAAgB;AAAA,IACtB;AACA,QAAI,aAAa;AAEjB,SAAK,cAAc,MAAM,SAAS,MAAM;AAExC,SAAK,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AACtE,SAAK,YAAY,cAAc,MAAM,MAAM,SAAS,QAAQ,MAAM,IAAI;AACtE,QAAI,eAAe,KAAK,QAAQ;AAI/B,eAAS,KAAK,gBAAgB,SAAS,IAAI;AAAA,IAC5C;AACA,WAAO,KAAK,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AAC9D,WAAO,KAAK,SAAS,cAAc,SAAS,QAAQ,MAAM,IAAI;AAC9D,QAAI,eAAe,KAAK,QAAQ;AAE/B,eAAS,KAAK,gBAAgB,SAAS,IAAI;AAAA,IAC5C;AACA,QAAI,CAAC,QAAQ,QAAQ,SAAS;AAC7B,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ;AAEZ,QAAI,WAAW,KAAK;AACpB,QAAI,KAAK,OAAO;AAAe,iBAAW;AAC1C,QAAI;AAAc,eAAS,UAAU,aAAa;AAClD,QAAI,SAAS,KAAK,QAAQ,MAAM;AAC/B,cAAQ,YAAY,WAAW;AAC/B,iBAAW,OAAO;AAAA,IACnB;AACA,SAAK,QAAQ,QAAQ,SAAS,UAAU,SAAS,KAAK;AAEtD,QAAI;AAAO,WAAK,UAAU,MAAM,OAAO;AAEvC,QAAI,CAAC,QAAQ;AACZ,WAAK,aAAa,YAAY;AAC9B,WAAK,IAAI,KAAK,OAAO,IAAI,UAAU,aAAa,OAAO;AACvD,aAAO;AAAA,IACR;AAEA,UAAM,EAAC,SAAS,gBAAe,IAAI,QAAQ,eAAe,MAAM,MAAM;AACtE,QAAI,QAAQ,QAAQ;AACnB,eAAS,QAAQ,QAAQ,SAAS,CAAC;AAAA,IACpC;AAEA,QAAI,CAAC,gBAAgB,aAAa,OAAO,WAAW;AACnD,UAAI,UAAU;AACd,iBAAW,UAAU,iBAAiB;AACrC,cAAM,SAAS,KAAK,SAAS,YAAY,QAAQ,SAAS,IAAI;AAC9D,YAAI,WAAW,MAAM;AACpB,qBAAW,UAAU;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,GAAG;AAChB,gBAAQ,SAAS,MAAM,OAAO;AAAA,MAC/B;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,YAAY,WAAW,MAAM,MAAM,SAAS,QAAQ,IAAI,KACjE,CAAC,KAAK,SAAS,WAAW,SAAS,QAAQ,IAAI,GAAG;AAClD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACR;AAEA,SAAK,YAAY,kBAAkB,MAAM,MAAM,SAAS,QAAQ,IAAI;AAEpE,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,iBAAkB,KAAK,aAAa;AAAA,IAC1C;AAEA,QAAI,KAAK,QAAQ,KAAK,KAAK,iBAAiB,UAAU;AACrD,WAAK,MAAM,SAAS,SAAS,IAAI;AAAA,IAClC;AAEA,QAAI,SAA0C;AAC9C,QAAI,KAAK,WAAW,SAAS,KAAK,WAAW,aAAa,KAAK,WAAW,cAAc,KAAK,WAAW,YAAY;AACnH,eAAS,KAAK,WAAW,QAAQ,SAAS,IAAI;AAC9C,UAAI,WAAW,KAAK;AAAU,gBAAQ,qBAAqB;AAC3D,UAAI,UAAU,WAAW,KAAK,WAAW;AAAW,qBAAa;AAAA,IAClE,OAAO;AACN,UAAI,CAAC,QAAQ,QAAQ;AACpB,aAAK,aAAa,YAAY;AAC9B,aAAK,IAAI,KAAK,OAAO,IAAI,UAAU,aAAa,OAAO;AACvD,eAAO;AAAA,MACR;AACA,UAAI,KAAK,QAAQ,KAAK,KAAK,iBAAiB,UAAU;AACrD,aAAK,MAAM,SAAS,SAAS,IAAI;AAAA,MAClC;AACA,mBAAa,KAAK,iBAAiB,SAAS,SAAS,IAAI;AAAA,IAC1D;AACA,QAAI,KAAK,aAAa;AAAY,WAAK,QAAQ,SAAS,SAAS,MAAM,KAAK,WAAW,OAAO,IAAI;AAClG,QAAI,CAAC,QAAQ,IAAI;AAChB,WAAK,MAAM,SAAS,SAAS,IAAI;AAAA,IAClC;AAEA,QAAI,CAAC,YAAY;AAChB,WAAK,YAAY,YAAY,MAAM,MAAM,QAAQ,SAAS,IAAI;AAC9D,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,mBAAmB,EAAE,KAAK,kBAAkB,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,qBAAqB,KAAK,QAAQ,WAAW,gBAAgB,KAAK,QAAQ,WAAW,kBAAkB,KAAK,QAAQ,WAAW,aAAa,KAAK,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,WAAW,OAAO,EAAE,QAAQ,WAAW,WAAW,KAAK,KAAK,YAAY,IAAI;AAChY,YAAM,aAAa,QAAQ;AAC3B,WAAK,YAAY,0BAA0B,MAAM,MAAM,SAAS,QAAQ,IAAI;AAC5E,WAAK,SAAS,0BAA0B,SAAS,QAAQ,IAAI;AAC7D,UAAI,WAAW,YAAY,UAAU,KAAK,aAAa,UAAU;AAChE,YAAI,QAAQ,MAAM,QAAQ,QAAQ,KAAK,aAAa,QAAQ,QAAQ,GAAG;AACtE,eAAK,SAAS,iBAAiB,SAAS,OAAO;AAAA,QAChD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,wBAAwB,SAAS,SAAS,MAAM;AAE/C,QAAI,CAAC,KAAK,mBAAmB,EAAE,KAAK,kBAAkB,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,qBAAqB,KAAK,QAAQ,WAAW,gBAAgB,KAAK,QAAQ,WAAW,kBAAkB,KAAK,QAAQ,WAAW,aAAa,KAAK,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,WAAW,OAAO,EAAE,QAAQ,WAAW,WAAW,KAAK,KAAK,YAAY,IAAI;AAChY,WAAK,YAAY,sBAAsB,MAAM,MAAM,QAAQ,CAAC,GAAG,SAAS,IAAI;AAC5E,WAAK,SAAS,sBAAsB,SAAS,SAAS,IAAI;AAAA,IAC3D;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAS,SAAS,MAAM;AAC1C,UAAM,SAA2C,CAAC;AAClD,eAAW,KAAK,QAAQ,KAAK,GAAG;AAC/B,aAAO,CAAC,IAAI;AAAA,IACb;AACA,SAAK,cAAc;AACnB,YAAQ,aAAa;AACrB,QAAI,aAAa,KAAK,YAAY;AAClC,QAAI,MAAM,QAAQ,UAAU,GAAG;AAE9B,UAAI,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,GAAG;AAC/C,YAAI,KAAK,OAAO,GAAG;AAElB,uBAAa,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,QACtF,OAAO;AACN,uBAAa,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,QAClD;AAAA,MACD,OAAO;AACN,qBAAa,KAAK,OAAO,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC;AAAA,MAC1D;AAAA,IACD;AACA,iBAAa,KAAK,MAAM,UAAU;AAClC,QAAI,aAAa;AACjB,QAAI;AAEJ,UAAM,gBAAgB,KAAK,eAAe,KAAK,IAAI,MAAM,IAAI,KAAK,YAAY,EAAE;AAEhF,QAAI,cAA0C,QAAQ,MAAM,CAAC;AAC7D,QAAI;AACJ,SAAK,MAAM,GAAG,OAAO,YAAY,OAAO;AACvC,UAAI,OAAO,SAAS,KAAK;AAAG;AAC5B,UAAI,MAAM,KAAK,QAAQ,WAAW,SAAS,CAAC;AAAe;AAC3D,UAAI,QAAQ,MAAM,CAAAA,YAAU,CAACA,WAAU,CAACA,QAAO,EAAE;AAAG;AACpD,WAAK,MAAM;AACX,UAAI,KAAK,eAAe,QAAQ,SAAS,GAAG;AAC3C,sBAAc,CAAC,QAAQ,MAAM,CAAC,CAAC;AAAA,MAChC,OAAO;AACN,sBAAc,QAAQ,MAAM,CAAC;AAAA,MAC9B;AACA,YAAM,SAAS,YAAY,CAAC;AAC5B,UAAI,UAAU,OAAO,KAAK,gBAAgB,WAAW;AACpD,YAAI,MAAM,GAAG;AACZ,eAAK,QAAQ,SAAS,SAAS,KAAK,MAAM,MAAM;AAAA,QACjD,OAAO;AACN,eAAK,iBAAiB,MAAM;AAAA,QAC7B;AAAA,MACD;AAGA,UAAI,UAAU,KAAK,iBAAiB,MAAM,GAAG;AAC5C,YAAI,WAAW,KAAK;AACpB,cAAM,aAAa,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC;AACvD,YAAI,aAAa,MAAM;AACtB,cAAI,CAAC,KAAK,gBAAgB;AACzB,kBAAM,SAAS,KAAK,SAAS,eAAe,SAAS,MAAM,MAAM,EAAC,GAAG,QAAQ,OAAM,CAAC;AACpF,kBAAM,QAAQ,KAAK,cAAc,OAAO,UAAU,GAAG,IAAI,CAAC;AAC1D,gBAAI,QAAQ,GAAG;AACd,0BAAY,WAAW,KAAK;AAAA,YAC7B,OAAO;AACN,0BAAY,WAAW,CAAC,KAAK;AAAA,YAC9B;AAAA,UACD;AACA,cAAI,CAAC,KAAK,eAAe;AACxB,kBAAM,SAAS,KAAK,SAAS,eAAe,QAAQ,MAAM,MAAM,EAAC,GAAG,OAAO,OAAM,CAAC;AAClF,kBAAM,QAAQ,KAAK,cAAc,OAAO,SAAS,GAAG,IAAI,CAAC;AACzD,gBAAI,QAAQ,GAAG;AACd,0BAAY,WAAW,KAAK;AAAA,YAC7B,WAAW,QAAQ,GAAG;AACrB,0BAAY,WAAW,CAAC,KAAK;AAAA,YAC9B;AAAA,UACD;AAAA,QACD;AACA,mBAAW,KAAK,SAAS,kBAAkB,QAAQ,SAAS,MAAM,QAAQ;AAC1E,YAAI,CAAC,KAAK,WAAW;AACpB,qBAAW,KAAK,SAAS,YAAY,QAAQ,SAAS,MAAM,QAAQ;AACpE,cAAI,aAAa,QAAQ,CAAC,KAAK,aAAa,UAAU,GAAG;AAAG;AAAA,QAC7D;AAAA,MACD;AAEA,YAAM,WAAW;AACjB,UAAI,CAAC,SAAS;AAAO,iBAAS,QAAQ,CAAC;AAGvC,OAAC,YAAY,WAAW,IAAI,KAAK,cAAc,aAAa,SAAS,MAAM,QAAQ;AAEnF,UAAI,CAAC,WAAW,KAAK,SAAO,QAAQ,KAAK;AAAG;AAC5C,mBAAa;AAEb,iBAAW,CAAC,GAAG,EAAE,KAAK,WAAW,QAAQ,GAAG;AAG3C,eAAO,CAAC,IAAI,OAAO,QAAQ,CAAC,KAAK,IAAI;AAErC,aAAK,eAAe,OAAO,CAAC;AAAA,MAC7B;AACA,UAAI,KAAK,iBAAiB;AACzB,aAAK,OAAO,KAAK,MAAM,QAAQ,QAAQ,CAAC,GAAG,SAAS,SAAS,KAAK,IAAI,WAAW,IAAI,YAAY,GAAG,IAAI;AACxG,aAAK,kBAAkB;AAAA,MACxB;AACA,WAAK,UAAU,QAAQ;AACvB,UAAI,CAAC,QAAQ,MAAM,QAAQ,WAAW,GAAG;AACxC;AACA;AAAA,MACD;AAAA,IACD;AAEA,QAAI,QAAQ;AAAG,aAAO,OAAO,KAAK,KAAK;AACvC,QAAI;AAAY,aAAO,KAAK,KAAK;AACjC,QAAI,KAAK,YAAY,OAAO,KAAK,gBAAgB,WAAW;AAC3D,WAAK,IAAI,aAAa,QAAQ,CAAC,GAAG,MAAM,CAAC;AAAA,IAC1C;AAEA,QAAI,KAAK,UAAU,KAAK,aAAa;AACpC,WAAK,OAAO,KAAK,iBAAiB,KAAK,aAAa,IAAI,GAAG,SAAS,SAAS,QAAQ;AAAA,IACtF;AAEA,QAAI,KAAK,gBAAgB;AACxB,UAAI;AACJ,UAAI,KAAK,IAAI,OAAO,GAAG;AACtB,uBAAe,KAAK,cAAc,KAAK,MAAM,QAAQ,YAAY,CAAC,GAAG,CAAC;AAAA,MACvE,OAAO;AACN,uBAAe,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAAA,MAC5C;AACA,WAAK,aAAa,cAAc,SAAS,SAAS,EAAC,IAAI,iBAAgB,CAAc;AAAA,IACtF;AAGA,QAAI,KAAK;AAAa,oBAAc,QAAQ,MAAM,CAAC;AAEnD,eAAW,CAAC,GAAG,MAAM,KAAK,YAAY,QAAQ,GAAG;AAChD,UAAI,UAAU,YAAY,QAAQ;AACjC,eAAO,YAAY,MAAM,OAAO,CAAC,GAAiC,OAAO;AAAA,MAC1E;AAAA,IACD;AAEA,QAAI,KAAK,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAAI,WAAK,IAAI,OAAO;AAEjD,QAAI,CAAC,OAAO,KAAK,SAAO,CAAC,CAAC,OAAO,QAAQ,CAAC;AAAG,aAAO;AAEpD,SAAK,UAAU,QAAQ;AAEvB,SAAK,wBAAwB,YAAY,OAAO,SAAO,CAAC,CAAC,GAAG,GAAgB,SAAS,IAAI;AAEzF,QAAI,CAAC,KAAK,mBAAmB,EAAE,KAAK,kBAAkB,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,qBAAqB,KAAK;AACtI,iBAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,GAAG;AAGtC,cAAM,YAAY,QAAQ,WAAW,IAAI,KAAK,cAAc;AAC5D,YAAI,OAAO,cAAc,YAAY,QAAQ,CAAC,EAAE,IAAI;AACnD,gBAAM,wBAAwB,QAAQ,CAAC,EAAE,gBAAgB,KAAK;AAC9D,cAAI,QAAQ,CAAC,EAAE,MAAM,QAAQ,CAAC,EAAE,QAAQ,KAAK,uBAAuB,QAAQ,CAAC,EAAE,QAAQ,GAAG;AACzF,iBAAK,SAAS,iBAAiB,QAAQ,CAAC,GAAG,OAAO;AAAA,UACnD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,cAAc,SAAS;AACtB,QAAI,CAAC,uBAAuB,oBAAoB,EAAE,SAAS,QAAQ,YAAY,IAAI,KAClF,QAAQ,QAAQ,EAAE,OAAO,mBAAmB;AAC5C,aAAO;AAAA,IACR;AACA,QAAI,CAAC,iBAAiB,EAAE,SAAS,QAAQ,YAAY,IAAI,KACxD,QAAQ,QAAQ,EAAE,OAAO,2BAA2B;AACpD,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAS,SAAS,MAAM;AAC1C,UAAM,aAAa,CAAC;AACpB,eAAW,CAAC,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG;AAC5C,UAAI,KAAK,OAAO,KAAK,KAAK,MAAM,QAAQ,KAAK,WAAW,WAAW,CAAC,KAAK,IAAI,YAAY,UAAU,MAAM,GAAG;AAC3G,aAAK,MAAM,yBAAyB;AACpC,aAAK,IAAI,WAAW,MAAM;AAC1B,mBAAW,CAAC,IAAI;AAAA,MACjB,WAAW,CAAC,KAAK,YAAY,eAAe,MAAM,CAAC,GAAG,QAAQ,SAAS,IAAI,GAAG;AAC7E,aAAK,IAAI,WAAW,MAAM;AAC1B,mBAAW,CAAC,IAAI;AAAA,MACjB,WAAW,KAAK,OAAO,KAAK,KAAK,qBAAqB,QAAQ,WAAW,WAAW,KAAK,QAAQ,WAAW,UAAU,KAAK,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,aAAa,KAAK,QAAQ,WAAW,cAAc,KAAK,QAAQ,WAAW,QAAQ,MACpQ,QAAQ,CAAC,EAAE,SAAS,QAAQ,QAAQ,CAAC,KAAK,IAAI,YAAY,aAAa,MAAM,GAAG;AAChF,aAAK,MAAM,4BAA4B;AACvC,YAAI,CAAC,OAAO;AAAU,eAAK,KAAK,iDAAiD;AACjF,aAAK,IAAI,WAAW,MAAM;AAC1B,mBAAW,CAAC,IAAI;AAAA,MACjB,OAAO;AACN,mBAAW,CAAC,IAAI;AAAA,MACjB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,SAAS,SAAS,MAAM;AAC1C,UAAM,SAAS,QAAQ,CAAC;AACxB,QAAI,KAAK,cAAc;AACtB,YAAM,SAA4B,CAAC;AACnC,UAAI,SAAS;AACb,UAAI;AACJ,WAAK,YAAY,OAAO,QAAQ;AAC/B,cAAM,QAAQ,OAAO,OAAO,QAAQ;AACpC,YAAI,QAAQ,GAAG;AACd,iBAAO,QAAQ,IAAI;AACnB,mBAAS;AAAA,QACV;AAAA,MACD;AACA,UAAI,QAAQ;AACX,aAAK,aAAa,SAAS;AAC3B,aAAK,IAAI,uBAAuB,QAAQ,SAAS,WAAW,KAAK,IAAI;AACrE,aAAK,MAAM,QAAQ,SAAS,OAAO;AAEnC,YAAI;AACJ,aAAK,aAAa,QAAQ;AACzB,iBAAO,SAAS,IAAI;AAAA,QACrB;AACA,eAAO,SAAS,MAAM;AACtB,aAAK,QAAQ,SAAS,SAAS,kBAAkB,MAAM;AAAA,MACxD;AAAA,IACD;AAEA,QAAI,QAAQ,YAAY,kBAAkB,KAAK,MAAM,SAAS,GAAG;AAChE,UAAI,UAAU;AACd,YAAM,gBAAgB,OAAO,WAAW;AACxC,YAAM,4BAA4B,CAAC,gBAAgB,YAAY,mBAAmB,aAAa;AAC/F,UAAI,CAAC,cAAc,eAAe,CAAC,0BAA0B,SAAS,aAAa,KAAK,CAAC,QAAQ,UAAU,SAAS,GAAG;AACtH,kBAAU;AAAA,MACX;AACA,UAAI,SAAS;AACZ,aAAK,aAAa,SAAS;AAC3B,eAAO,WAAW,gBAAgB,OAAO;AACzC,gBAAQ,WAAW,aAAa;AAChC,aAAK,IAAI,aAAa,SAAS,wBAAwB;AACvD,aAAK,IAAI,aAAa,SAAS,cAAc,IAAI,IAAI,UAAU,MAAM;AACrE,aAAK,IAAI,aAAa,SAAS,cAAc,cAAc,IAAI;AAC/D,aAAK,IAAI,aAAa,QAAQ,wBAAwB;AACtD,aAAK,QAAQ,SAAS,SAAS,KAAK,MAAM,MAAM;AAAA,MACjD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AACD;",
  "names": ["target"]
}
