{
  "version": 3,
  "sources": ["../../../server/chat-plugins/auction.ts"],
  "sourcesContent": ["/**\r\n * Chat plugin to run auctions for team tournaments.\r\n *\r\n * Based on the original Scrappie auction system\r\n * https://github.com/Hidden50/Pokemon-Showdown-Node-Bot/blob/master/commands/base-auctions.js\r\n * @author Karthik\r\n */\r\nimport {Net, Utils} from '../../lib';\r\n\r\ninterface Player {\r\n\tid: ID;\r\n\tname: string;\r\n\tteam?: Team;\r\n\tprice: number;\r\n\ttiers?: string[];\r\n}\r\n\r\ninterface Manager {\r\n\tid: ID;\r\n\tteam: Team;\r\n}\r\n\r\nclass Team {\r\n\tid: ID;\r\n\tname: string;\r\n\tplayers: Player[];\r\n\tcredits: number;\r\n\tsuspended: boolean;\r\n\tprivate auction: Auction;\r\n\tconstructor(name: string, auction: Auction) {\r\n\t\tthis.id = toID(name);\r\n\t\tthis.name = name;\r\n\t\tthis.players = [];\r\n\t\tthis.credits = auction.startingCredits;\r\n\t\tthis.suspended = false;\r\n\t\tthis.auction = auction;\r\n\t}\r\n\r\n\tgetManagers() {\r\n\t\treturn [...this.auction.managers.values()]\r\n\t\t\t.filter(m => m.team === this)\r\n\t\t\t.map(m => Users.getExact(m.id)?.name || m.id);\r\n\t}\r\n\r\n\taddPlayer(player: Player, price = 0) {\r\n\t\tplayer.team?.removePlayer(player);\r\n\t\tthis.players.push(player);\r\n\t\tthis.credits -= price;\r\n\t\tplayer.team = this;\r\n\t\tplayer.price = price;\r\n\t}\r\n\r\n\tremovePlayer(player: Player) {\r\n\t\tconst pIndex = this.players.indexOf(player);\r\n\t\tif (pIndex === -1) return;\r\n\t\tthis.players.splice(pIndex, 1);\r\n\t\tdelete player.team;\r\n\t\tplayer.price = 0;\r\n\t}\r\n\r\n\tisSuspended() {\r\n\t\treturn this.credits < this.auction.minBid || this.suspended;\r\n\t}\r\n\r\n\tmaxBid(credits = this.credits) {\r\n\t\treturn credits + this.auction.minBid * Math.min(0, this.players.length - this.auction.minPlayers + 1);\r\n\t}\r\n}\r\n\r\nfunction parseCredits(amount: string) {\r\n\tlet credits = Number(amount.replace(',', '.'));\r\n\tif (credits < 500) credits *= 1000;\r\n\tif (!credits || credits % 500 !== 0) {\r\n\t\tthrow new Chat.ErrorMessage(`The amount of credits must be a multiple of 500.`);\r\n\t}\r\n\treturn credits;\r\n}\r\n\r\nexport class Auction extends Rooms.SimpleRoomGame {\r\n\toverride readonly gameid = 'auction' as ID;\r\n\towners: Set<ID>;\r\n\tteams: Map<string, Team>;\r\n\tmanagers: Map<string, Manager>;\r\n\tauctionPlayers: Map<string, Player>;\r\n\r\n\tstartingCredits: number;\r\n\tminBid: number;\r\n\tminPlayers: number;\r\n\tblindMode: boolean;\r\n\r\n\tlastQueue: Team[] | null;\r\n\tqueue: Team[];\r\n\tbidTimer: NodeJS.Timer;\r\n\t/** How many seconds have passed since the start of the timer */\r\n\tbidTimeElapsed: number;\r\n\t/** Measured in seconds */\r\n\tbidTimeLimit: number;\r\n\tnominatingTeam: Team;\r\n\tnominatedPlayer: Player;\r\n\thighestBidder: Team;\r\n\thighestBid: number;\r\n\t/** Used for blind mode */\r\n\tbidsPlaced: Map<Team, number>;\r\n\tstate: 'setup' | 'nom' | 'bid' = 'setup';\r\n\tconstructor(room: Room, startingCredits = 100000) {\r\n\t\tsuper(room);\r\n\t\tthis.title = `Auction (${room.title})`;\r\n\t\tthis.owners = new Set();\r\n\t\tthis.teams = new Map();\r\n\t\tthis.managers = new Map();\r\n\t\tthis.auctionPlayers = new Map();\r\n\r\n\t\tthis.startingCredits = startingCredits;\r\n\t\tthis.minBid = 3000;\r\n\t\tthis.minPlayers = 10;\r\n\t\tthis.blindMode = false;\r\n\r\n\t\tthis.lastQueue = null;\r\n\t\tthis.queue = [];\r\n\t\tthis.bidTimer = null!;\r\n\t\tthis.bidTimeElapsed = 0;\r\n\t\tthis.bidTimeLimit = 10;\r\n\t\tthis.nominatingTeam = null!;\r\n\t\tthis.nominatedPlayer = null!;\r\n\t\tthis.highestBidder = null!;\r\n\t\tthis.highestBid = 0;\r\n\t\tthis.bidsPlaced = new Map();\r\n\t}\r\n\r\n\tsendMessage(message: string) {\r\n\t\tthis.room.add(`|c|&|${message}`).update();\r\n\t}\r\n\r\n\tsendHTMLBox(htmlContent: string) {\r\n\t\tthis.room.add(`|html|<div class=\"infobox\">${htmlContent}</div>`).update();\r\n\t}\r\n\r\n\tcheckOwner(user: User) {\r\n\t\tif (!this.owners.has(user.id) && !Users.Auth.hasPermission(user, 'declare', null, this.room)) {\r\n\t\t\tthrow new Chat.ErrorMessage(`You must be an auction owner to use this command.`);\r\n\t\t}\r\n\t}\r\n\r\n\taddOwners(users: string[]) {\r\n\t\tfor (const name of users) {\r\n\t\t\tconst user = Users.getExact(name);\r\n\t\t\tif (!user) throw new Chat.ErrorMessage(`User \"${name}\" not found.`);\r\n\t\t\tif (this.owners.has(user.id)) throw new Chat.ErrorMessage(`${user.name} is already an auction owner.`);\r\n\t\t\tthis.owners.add(user.id);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveOwners(users: string[]) {\r\n\t\tfor (const name of users) {\r\n\t\t\tconst id = toID(name);\r\n\t\t\tif (!this.owners.has(id)) throw new Chat.ErrorMessage(`User \"${name}\" is not an auction owner.`);\r\n\t\t\tthis.owners.delete(id);\r\n\t\t}\r\n\t}\r\n\r\n\tgenerateUsernameList(players: (string | Player)[], max = players.length, clickable = false) {\r\n\t\tlet buf = `<span style=\"font-size: 90%\">`;\r\n\t\tbuf += players.slice(0, max).map(p => {\r\n\t\t\tif (typeof p === 'object') {\r\n\t\t\t\treturn `<username title=\"Tiers: ${p.tiers?.length ? `${Utils.escapeHTML(p.tiers.join(', '))}` : 'N/A'}\"${clickable ? ' class=\"username\"' : ''} style=\"font-weight: normal\">${Utils.escapeHTML(p.name)}</username>`;\r\n\t\t\t}\r\n\t\t\treturn `<username${clickable ? ' class=\"username\"' : ''} style=\"font-weight: normal\">${Utils.escapeHTML(p)}</username>`;\r\n\t\t}).join(', ');\r\n\t\tif (players.length > max) {\r\n\t\t\tbuf += ` <span title=\"${players.slice(max).map(p => Utils.escapeHTML(typeof p === 'object' ? p.name : p)).join(', ')}\">(+${players.length - max})</span>`;\r\n\t\t}\r\n\t\tbuf += `</span>`;\r\n\t\treturn buf;\r\n\t}\r\n\r\n\tgeneratePriceList() {\r\n\t\tconst players = Utils.sortBy(this.getDraftedPlayers(), p => -p.price);\r\n\t\tlet buf = '';\r\n\t\tfor (const team of this.teams.values()) {\r\n\t\t\tbuf += Utils.html`<details><summary>${team.name}</summary><table>`;\r\n\t\t\tfor (const player of players.filter(p => p.team === team)) {\r\n\t\t\t\tbuf += Utils.html`<tr><td>${player.name}</td><td>${player.price}</td></tr>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</table></details><br/>`;\r\n\t\t}\r\n\t\tbuf += `<details><summary>All</summary><table>`;\r\n\t\tfor (const player of players) {\r\n\t\t\tbuf += Utils.html`<tr><td>${player.name}</td><td>${player.price}</td></tr>`;\r\n\t\t}\r\n\t\tbuf += `</table></details>`;\r\n\t\treturn buf;\r\n\t}\r\n\r\n\tgenerateAuctionTable() {\r\n\t\tlet buf = `<div class=\"ladder pad\"><table style=\"width: 100%\"><tr><th colspan=2>Order</th><th>Teams</th><th>Credits</th><th>Players</th></tr>`;\r\n\t\tconst queue = this.queue.filter(team => !team.isSuspended());\r\n\t\tfor (const team of this.teams.values()) {\r\n\t\t\tlet i1 = queue.indexOf(team) + 1;\r\n\t\t\tlet i2 = queue.lastIndexOf(team) + 1;\r\n\t\t\tif (i1 > queue.length / 2) {\r\n\t\t\t\t[i1, i2] = [i2, i1];\r\n\t\t\t}\r\n\t\t\tbuf += `<tr>`;\r\n\t\t\tbuf += `<td align=\"center\" style=\"width: 15px\">${i1 > 0 ? i1 : '-'}</td><td align=\"center\" style=\"width: 15px\">${i2 > 0 ? i2 : '-'}</td>`;\r\n\t\t\tbuf += `<td style=\"white-space: nowrap\"><strong>${Utils.escapeHTML(team.name)}</strong><br/>${this.generateUsernameList(team.getManagers(), 2, true)}</td>`;\r\n\t\t\tbuf += `<td style=\"white-space: nowrap\">${team.credits.toLocaleString()}${team.maxBid() >= this.minBid ? `<br/><span style=\"font-size: 90%\">Max bid: ${team.maxBid().toLocaleString()}</span>` : ''}</td>`;\r\n\t\t\tbuf += `<td><div style=\"min-height: 32px; height: 32px; overflow: hidden; resize: vertical\"><span style=\"float: right\">${team.players.length}</span>${this.generateUsernameList(team.players)}</div></td>`;\r\n\t\t\tbuf += `</tr>`;\r\n\t\t}\r\n\t\tbuf += `</table></div>`;\r\n\r\n\t\tconst players = Utils.sortBy(this.getUndraftedPlayers(), p => p.name);\r\n\t\tconst tierArrays = new Map<string, Player[]>();\r\n\t\tfor (const player of players) {\r\n\t\t\tif (!player.tiers) continue;\r\n\t\t\tfor (const tier of player.tiers) {\r\n\t\t\t\tif (!tierArrays.has(tier)) tierArrays.set(tier, []);\r\n\t\t\t\ttierArrays.get(tier)!.push(player);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst sortedTiers = [...tierArrays.keys()].sort();\r\n\t\tif (sortedTiers.length) {\r\n\t\t\tbuf += `<details><summary>Remaining Players (${players.length})</summary>`;\r\n\t\t\tbuf += `<details><summary>All</summary>${this.generateUsernameList(players)}</details>`;\r\n\t\t\tbuf += `<details><summary>Tiers</summary><ul style=\"list-style-type: none\">`;\r\n\t\t\tfor (const tier of sortedTiers) {\r\n\t\t\t\tconst tierPlayers = tierArrays.get(tier)!;\r\n\t\t\t\tbuf += `<li><details><summary>${Utils.escapeHTML(tier)} (${tierPlayers.length})</summary>${this.generateUsernameList(tierPlayers)}</details></li>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</ul></details></details>`;\r\n\t\t} else {\r\n\t\t\tbuf += `<details><summary>Remaining Players (${players.length})</summary>${this.generateUsernameList(players)}</details>`;\r\n\t\t}\r\n\t\tbuf += `<details><summary>Auction Settings</summary>`;\r\n\t\tbuf += `- Minimum bid: <b>${this.minBid.toLocaleString()}</b><br/>`;\r\n\t\tbuf += `- Minimum players per team: <b>${this.minPlayers}</b><br/>`;\r\n\t\tbuf += `- Blind mode: <b>${this.blindMode ? 'On' : 'Off'}</b><br/>`;\r\n\t\tbuf += `</details>`;\r\n\t\treturn buf;\r\n\t}\r\n\r\n\tsendBidInfo() {\r\n\t\tlet buf = `<div class=\"infobox\">`;\r\n\t\tbuf += Utils.html`Player: <username>${this.nominatedPlayer.name}</username> `;\r\n\t\tbuf += `Top bid: <b>${this.highestBid}</b> `;\r\n\t\tbuf += Utils.html`Top bidder: <b>${this.highestBidder.name}</b> `;\r\n\t\tbuf += Utils.html`Tiers: <b>${this.nominatedPlayer.tiers?.length ? `${this.nominatedPlayer.tiers.join(', ')}` : 'N/A'}</b>`;\r\n\t\tbuf += `</div>`;\r\n\t\tthis.room.add(`|uhtml|bid|${buf}`).update();\r\n\t}\r\n\r\n\tsetMinBid(amount: number) {\r\n\t\tif (this.state !== 'setup') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot change the minimum bid after the auction has started.`);\r\n\t\t}\r\n\t\tif (amount > 500000) throw new Chat.ErrorMessage(`The minimum bid must not exceed 500,000.`);\r\n\t\tthis.minBid = amount;\r\n\t}\r\n\r\n\tsetMinPlayers(amount: number) {\r\n\t\tif (this.state !== 'setup') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot change the minimum number of players after the auction has started.`);\r\n\t\t}\r\n\t\tif (!amount || amount > 30) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The minimum number of players must be between 1 and 30.`);\r\n\t\t}\r\n\t\tthis.minPlayers = amount;\r\n\t}\r\n\r\n\tsetBlindMode(blind: boolean) {\r\n\t\tif (this.state !== 'setup') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot toggle blind mode after the auction has started.`);\r\n\t\t}\r\n\t\tthis.blindMode = blind;\r\n\t\tif (blind) {\r\n\t\t\tthis.bidTimeLimit = 30;\r\n\t\t} else {\r\n\t\t\tthis.bidTimeLimit = 10;\r\n\t\t}\r\n\t}\r\n\r\n\tgetUndraftedPlayers() {\r\n\t\treturn [...this.auctionPlayers.values()].filter(p => !p.team);\r\n\t}\r\n\r\n\tgetDraftedPlayers() {\r\n\t\treturn [...this.auctionPlayers.values()].filter(p => p.team);\r\n\t}\r\n\r\n\timportPlayers(data: string) {\r\n\t\tif (this.state !== 'setup') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot import a player list after the auction has started.`);\r\n\t\t}\r\n\t\tconst rows = data.replace('\\r', '').split('\\n');\r\n\t\tconst tierNames = rows.shift()!.split('\\t').slice(1);\r\n\t\tconst playerList = new Map<string, Player>();\r\n\t\tfor (const row of rows) {\r\n\t\t\tconst tiers = [];\r\n\t\t\tconst [name, ...tierData] = row.split('\\t');\r\n\t\t\tfor (let i = 0; i < tierData.length; i++) {\r\n\t\t\t\tif (['y', 'Y', '\\u2713', '\\u2714'].includes(tierData[i].trim())) {\r\n\t\t\t\t\tif (!tierNames[i]) throw new Chat.ErrorMessage(`Invalid tier data found in the pastebin.`);\r\n\t\t\t\t\tif (tierNames[i].length > 30) throw new Chat.ErrorMessage(`Tier names must be 30 characters or less.`);\r\n\t\t\t\t\ttiers.push(tierNames[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (name.length > 25) throw new Chat.ErrorMessage(`Player names must be 25 characters or less.`);\r\n\t\t\tconst player: Player = {\r\n\t\t\t\tid: toID(name),\r\n\t\t\t\tname,\r\n\t\t\t\tprice: 0,\r\n\t\t\t};\r\n\t\t\tif (tiers.length) player.tiers = tiers;\r\n\t\t\tplayerList.set(player.id, player);\r\n\t\t}\r\n\t\tthis.auctionPlayers = playerList;\r\n\t}\r\n\r\n\taddAuctionPlayer(name: string, tiers?: string[]) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot add players to the auction right now.`);\r\n\t\t}\r\n\t\tif (name.length > 25) throw new Chat.ErrorMessage(`Player names must be 25 characters or less.`);\r\n\t\tconst player: Player = {\r\n\t\t\tid: toID(name),\r\n\t\t\tname,\r\n\t\t\tprice: 0,\r\n\t\t};\r\n\t\tif (tiers?.length) {\r\n\t\t\tif (tiers.some(tier => tier.length > 30)) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Tier names must be 30 characters or less.`);\r\n\t\t\t}\r\n\t\t\tplayer.tiers = tiers;\r\n\t\t}\r\n\t\tthis.auctionPlayers.set(player.id, player);\r\n\t\treturn player;\r\n\t}\r\n\r\n\tremoveAuctionPlayer(name: string) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot remove players from the auction right now.`);\r\n\t\t}\r\n\t\tconst player = this.auctionPlayers.get(toID(name));\r\n\t\tif (!player) throw new Chat.ErrorMessage(`Player \"${name}\" not found.`);\r\n\t\tplayer.team?.removePlayer(player);\r\n\t\tthis.auctionPlayers.delete(player.id);\r\n\t\tif (this.state !== 'setup' && !this.getUndraftedPlayers().length) {\r\n\t\t\tthis.end('The auction has ended because there are no players remaining in the draft pool.');\r\n\t\t}\r\n\t\treturn player;\r\n\t}\r\n\r\n\tassignPlayer(name: string, teamName?: string) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot assign players to a team right now.`);\r\n\t\t}\r\n\t\tconst player = this.auctionPlayers.get(toID(name));\r\n\t\tif (!player) throw new Chat.ErrorMessage(`Player \"${name}\" not found.`);\r\n\t\tif (teamName) {\r\n\t\t\tconst team = this.teams.get(toID(teamName));\r\n\t\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\r\n\t\t\tteam.addPlayer(player);\r\n\t\t\tif (!this.getUndraftedPlayers().length) {\r\n\t\t\t\treturn this.end('The auction has ended because there are no players remaining in the draft pool.');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tplayer.team?.removePlayer(player);\r\n\t\t}\r\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\r\n\t}\r\n\r\n\taddTeam(name: string) {\r\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`You cannot add teams after the auction has started.`);\r\n\t\tif (name.length > 40) throw new Chat.ErrorMessage(`Team names must be 40 characters or less.`);\r\n\t\tconst team = new Team(name, this);\r\n\t\tthis.teams.set(team.id, team);\r\n\t\tconst teams = [...this.teams.values()];\r\n\t\tthis.queue = teams.concat(teams.slice().reverse());\r\n\t\treturn team;\r\n\t}\r\n\r\n\tremoveTeam(name: string) {\r\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`You cannot remove teams after the auction has started.`);\r\n\t\tconst team = this.teams.get(toID(name));\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\r\n\t\tthis.queue = this.queue.filter(t => t !== team);\r\n\t\tthis.teams.delete(team.id);\r\n\t\treturn team;\r\n\t}\r\n\r\n\tsuspendTeam(name: string) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot suspend teams right now.`);\r\n\t\t}\r\n\t\tconst team = this.teams.get(toID(name));\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\r\n\t\tif (team.suspended) throw new Chat.ErrorMessage(`Team ${name} is already suspended.`);\r\n\t\tif (this.nominatingTeam === team) throw new Chat.ErrorMessage(`You cannot suspend the current nominating team.`);\r\n\t\tteam.suspended = true;\r\n\t}\r\n\r\n\tunsuspendTeam(name: string) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot unsuspend teams right now.`);\r\n\t\t}\r\n\t\tconst team = this.teams.get(toID(name));\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\r\n\t\tif (!team.suspended) throw new Chat.ErrorMessage(`Team ${name} is not suspended.`);\r\n\t\tteam.suspended = false;\r\n\t}\r\n\r\n\taddManagers(teamName: string, users: string[]) {\r\n\t\tconst team = this.teams.get(toID(teamName));\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\r\n\t\tfor (const name of users) {\r\n\t\t\tconst user = Users.getExact(name);\r\n\t\t\tif (!user) throw new Chat.ErrorMessage(`User \"${name}\" not found.`);\r\n\t\t\tconst manager = this.managers.get(user.id);\r\n\t\t\tif (!manager) {\r\n\t\t\t\tthis.managers.set(user.id, {id: user.id, team});\r\n\t\t\t} else {\r\n\t\t\t\tmanager.team = team;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremoveManagers(users: string[]) {\r\n\t\tfor (const name of users) {\r\n\t\t\tif (!this.managers.delete(toID(name))) throw new Chat.ErrorMessage(`User \"${name}\" is not a manager.`);\r\n\t\t}\r\n\t}\r\n\r\n\taddCreditsToTeam(teamName: string, amount: number) {\r\n\t\tif (this.state !== 'setup' && this.state !== 'nom') {\r\n\t\t\tthrow new Chat.ErrorMessage(`You cannot add credits to a team right now.`);\r\n\t\t}\r\n\t\tconst team = this.teams.get(toID(teamName));\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\r\n\t\tconst newCredits = team.credits + amount;\r\n\t\tif (newCredits <= 0 || newCredits > 10000000) {\r\n\t\t\tthrow new Chat.ErrorMessage(`A team must have between 0 and 10,000,000 credits.`);\r\n\t\t}\r\n\t\tif (team.maxBid(newCredits) < this.minBid) {\r\n\t\t\tthrow new Chat.ErrorMessage(`A team must have enough credits to draft the minimum amount of players.`);\r\n\t\t}\r\n\t\tteam.credits = newCredits;\r\n\t}\r\n\r\n\tstart() {\r\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`The auction has already started.`);\r\n\t\tif (this.teams.size < 2) throw new Chat.ErrorMessage(`The auction needs at least 2 teams to start.`);\r\n\t\tconst problemTeams = [...this.teams.values()].filter(t => t.maxBid() < this.minBid).map(t => t.name);\r\n\t\tif (problemTeams.length) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The following teams do not have enough credits to draft the minimum amount of players: ${problemTeams.join(', ')}`);\r\n\t\t}\r\n\t\tthis.next();\r\n\t}\r\n\r\n\treset() {\r\n\t\tconst teams = [...this.teams.values()];\r\n\t\tfor (const team of teams) {\r\n\t\t\tteam.credits = this.startingCredits;\r\n\t\t\tteam.suspended = false;\r\n\t\t\tfor (const player of team.players) {\r\n\t\t\t\tdelete player.team;\r\n\t\t\t\tplayer.price = 0;\r\n\t\t\t}\r\n\t\t\tteam.players = [];\r\n\t\t}\r\n\t\tthis.lastQueue = null;\r\n\t\tthis.queue = teams.concat(teams.slice().reverse());\r\n\t\tthis.clearTimer();\r\n\t\tthis.state = 'setup';\r\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\r\n\t}\r\n\r\n\tnext() {\r\n\t\tthis.state = 'nom';\r\n\t\tif (!this.queue.filter(team => !team.isSuspended()).length) {\r\n\t\t\treturn this.end('The auction has ended because there are no teams remaining that can draft players.');\r\n\t\t}\r\n\t\tif (!this.getUndraftedPlayers().length) {\r\n\t\t\treturn this.end('The auction has ended because there are no players remaining in the draft pool.');\r\n\t\t}\r\n\t\tdo {\r\n\t\t\tthis.nominatingTeam = this.queue.shift()!;\r\n\t\t\tthis.queue.push(this.nominatingTeam);\r\n\t\t} while (this.nominatingTeam.isSuspended());\r\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\r\n\t\tthis.sendMessage(`/html It is now <b>${Utils.escapeHTML(this.nominatingTeam.name)}</b>'s turn to nominate a player. Managers: ${this.nominatingTeam.getManagers().map(m => `<username class=\"username\">${Utils.escapeHTML(m)}</username>`).join(' ')}`);\r\n\t}\r\n\r\n\tnominate(user: User, target: string) {\r\n\t\tif (this.state !== 'nom') throw new Chat.ErrorMessage(`You cannot nominate players right now.`);\r\n\t\tconst manager = this.managers.get(user.id);\r\n\t\tif (!manager || manager.team !== this.nominatingTeam) this.checkOwner(user);\r\n\r\n\t\t// For undo\r\n\t\tthis.lastQueue = this.queue.slice();\r\n\t\tthis.lastQueue.unshift(this.lastQueue.pop()!);\r\n\r\n\t\tconst player = this.auctionPlayers.get(toID(target));\r\n\t\tif (!player) throw new Chat.ErrorMessage(`${target} is not a valid player.`);\r\n\t\tif (player.team) throw new Chat.ErrorMessage(`${player.name} has already been drafted.`);\r\n\t\tthis.nominatedPlayer = player;\r\n\t\tthis.state = 'bid';\r\n\t\tthis.highestBid = this.minBid;\r\n\t\tthis.highestBidder = this.nominatingTeam;\r\n\t\tthis.sendMessage(Utils.html`/html <username class=\"username\">${user.name}</username> from team <b>${this.nominatingTeam.name}</b> has nominated <username>${player.name}</username> for auction. Use /bid or type a number to place a bid!`);\r\n\t\tif (!this.blindMode) this.sendBidInfo();\r\n\t\tthis.bidTimer = setInterval(() => this.pokeBidTimer(), 1000);\r\n\t}\r\n\r\n\tbid(user: User, bid: number) {\r\n\t\tif (this.state !== 'bid') throw new Chat.ErrorMessage(`There are no players up for auction right now.`);\r\n\t\tconst team = this.managers.get(user.id)?.team;\r\n\t\tif (!team) throw new Chat.ErrorMessage(`Only managers can bid on players.`);\r\n\t\tif (team.isSuspended()) throw new Chat.ErrorMessage(`Your team is suspended and cannot place bids.`);\r\n\r\n\t\tif (bid > team.maxBid()) throw new Chat.ErrorMessage(`Your team cannot afford to bid that much.`);\r\n\r\n\t\tif (this.blindMode) {\r\n\t\t\tif (this.bidsPlaced.has(team)) throw new Chat.ErrorMessage(`Your team has already placed a bid.`);\r\n\t\t\tif (bid <= this.minBid) throw new Chat.ErrorMessage(`Your bid must be higher than the minimum bid.`);\r\n\t\t\tfor (const manager of this.managers.values()) {\r\n\t\t\t\tif (manager.team !== team) continue;\r\n\t\t\t\tconst msg = `|c:|${Math.floor(Date.now() / 1000)}|&|/html Your team placed a bid of <b>${bid}</b> on <username>${Utils.escapeHTML(this.nominatedPlayer.name)}</username>.`;\r\n\t\t\t\tUsers.getExact(manager.id)?.sendTo(this.room, msg);\r\n\t\t\t}\r\n\t\t\tif (bid > this.highestBid) {\r\n\t\t\t\tthis.highestBid = bid;\r\n\t\t\t\tthis.highestBidder = team;\r\n\t\t\t}\r\n\t\t\tthis.bidsPlaced.set(team, bid);\r\n\t\t\tif (this.bidsPlaced.size === this.teams.size) {\r\n\t\t\t\tthis.finishCurrentNom();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (bid <= this.highestBid) throw new Chat.ErrorMessage(`Your bid must be higher than the current bid.`);\r\n\t\t\tthis.highestBid = bid;\r\n\t\t\tthis.highestBidder = team;\r\n\t\t\tthis.sendMessage(Utils.html`/html <username class=\"username\">${user.name}</username>[${team.name}]: <b>${bid}</b>`);\r\n\t\t\tthis.sendBidInfo();\r\n\t\t\tthis.clearTimer();\r\n\t\t\tthis.bidTimer = setInterval(() => this.pokeBidTimer(), 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tonChatMessage(message: string, user: User) {\r\n\t\tif (this.state !== 'bid' || !Number(message.replace(',', '.'))) return;\r\n\t\tthis.bid(user, parseCredits(message));\r\n\t\treturn '';\r\n\t}\r\n\r\n\tfinishCurrentNom() {\r\n\t\tif (this.blindMode) {\r\n\t\t\tlet buf = `<div class=\"ladder pad\"><table><tr><th>Team</th><th>Bid</th></tr>`;\r\n\t\t\tif (!this.bidsPlaced.has(this.nominatingTeam)) {\r\n\t\t\t\tbuf += Utils.html`<tr><td>${this.nominatingTeam.name}</td><td>${this.minBid}</td></tr>`;\r\n\t\t\t}\r\n\t\t\tfor (const [team, bid] of this.bidsPlaced) {\r\n\t\t\t\tbuf += Utils.html`<tr><td>${team.name}</td><td>${bid}</td></tr>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</table></div>`;\r\n\t\t\tthis.sendHTMLBox(buf);\r\n\t\t\tthis.bidsPlaced.clear();\r\n\t\t}\r\n\t\tthis.sendMessage(Utils.html`/html <b>${this.highestBidder.name}</b> bought <username>${this.nominatedPlayer.name}</username> for <b>${this.highestBid}</b> credits!`);\r\n\t\tthis.highestBidder.addPlayer(this.nominatedPlayer, this.highestBid);\r\n\t\tthis.clearTimer();\r\n\t\tthis.next();\r\n\t}\r\n\r\n\tundoLastNom() {\r\n\t\tif (this.state !== 'nom') throw new Chat.ErrorMessage(`You cannot undo a nomination right now.`);\r\n\t\tif (!this.lastQueue) throw new Chat.ErrorMessage(`You cannot undo more than one nomination at a time.`);\r\n\t\tthis.queue = this.lastQueue;\r\n\t\tthis.lastQueue = null;\r\n\t\tthis.highestBidder.removePlayer(this.nominatedPlayer);\r\n\t\tthis.highestBidder.credits += this.highestBid;\r\n\t\tthis.next();\r\n\t}\r\n\r\n\tclearTimer() {\r\n\t\tclearInterval(this.bidTimer);\r\n\t\tthis.bidTimeElapsed = 0;\r\n\t}\r\n\r\n\tpokeBidTimer() {\r\n\t\tthis.bidTimeElapsed++;\r\n\t\tconst timeRemaining = this.bidTimeLimit - this.bidTimeElapsed;\r\n\t\tif (timeRemaining === 0) {\r\n\t\t\tthis.finishCurrentNom();\r\n\t\t} else if (timeRemaining % 10 === 0 || timeRemaining === 5) {\r\n\t\t\tthis.sendMessage(`__${this.bidTimeLimit - this.bidTimeElapsed} seconds left!__`);\r\n\t\t}\r\n\t}\r\n\r\n\tend(message?: string) {\r\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\r\n\t\tthis.sendHTMLBox(this.generatePriceList());\r\n\t\tif (message) this.sendMessage(message);\r\n\t\tthis.destroy();\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tclearInterval(this.bidTimer);\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tauction: {\r\n\t\tcreate(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('minigame', null, room);\r\n\t\t\tif (room.game) return this.errorReply(`There is already a game of ${room.game.title} in progress in this room.`);\r\n\t\t\tif (room.settings.auctionDisabled) return this.errorReply('Auctions are currently disabled in this room.');\r\n\r\n\t\t\tlet startingCredits;\r\n\t\t\tif (target) {\r\n\t\t\t\tstartingCredits = parseCredits(target);\r\n\t\t\t\tif (startingCredits < 10000 || startingCredits > 10000000) {\r\n\t\t\t\t\treturn this.errorReply(`Starting credits must be between 10,000 and 10,000,000.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst auction = new Auction(room, startingCredits);\r\n\t\t\tauction.addOwners([user.id]);\r\n\t\t\troom.game = auction;\r\n\t\t\tthis.addModAction(`An auction was created by ${user.name}.`);\r\n\t\t\tthis.modlog(`AUCTION CREATE`);\r\n\t\t},\r\n\t\tcreatehelp: [\r\n\t\t\t`/auction create [startingcredits] - Creates an auction. Requires: % @ # &`,\r\n\t\t],\r\n\t\tstart(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tauction.start();\r\n\t\t\tthis.addModAction(`The auction was started by ${user.name}.`);\r\n\t\t\tthis.modlog(`AUCTION START`);\r\n\t\t},\r\n\t\treset(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tauction.reset();\r\n\t\t\tthis.addModAction(`The auction was reset by ${user.name}.`);\r\n\t\t\tthis.modlog(`AUCTION RESET`);\r\n\t\t},\r\n\t\tdelete: 'end',\r\n\t\tstop: 'end',\r\n\t\tend(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tauction.end();\r\n\t\t\tthis.addModAction(`The auction was ended by ${user.name}.`);\r\n\t\t\tthis.modlog('AUCTION END');\r\n\t\t},\r\n\t\tinfo: 'display',\r\n\t\tdisplay(target, room, user) {\r\n\t\t\tthis.runBroadcast();\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tthis.sendReplyBox(auction.generateAuctionTable());\r\n\t\t},\r\n\t\tpricelist(target, room, user) {\r\n\t\t\tthis.runBroadcast();\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tthis.sendReplyBox(auction.generatePriceList());\r\n\t\t},\r\n\t\tminbid(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction minbid');\r\n\t\t\tconst amount = parseCredits(target);\r\n\t\t\tauction.setMinBid(amount);\r\n\t\t\tthis.addModAction(`${user.name} set the minimum bid to ${amount}.`);\r\n\t\t\tthis.modlog('AUCTION MINBID', null, `${amount}`);\r\n\t\t},\r\n\t\tminbidhelp: [\r\n\t\t\t`/auction minbid [amount] - Sets the minimum bid. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tminplayers(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction minplayers');\r\n\t\t\tconst amount = parseInt(target);\r\n\t\t\tauction.setMinPlayers(amount);\r\n\t\t\tthis.addModAction(`${user.name} set the minimum number of players to ${amount}.`);\r\n\t\t},\r\n\t\tminplayershelp: [\r\n\t\t\t`/auction minplayers [amount] - Sets the minimum number of players. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tblindmode(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (this.meansYes(target)) {\r\n\t\t\t\tauction.setBlindMode(true);\r\n\t\t\t\tthis.addModAction(`${user.name} turned on blind mode.`);\r\n\t\t\t} else if (this.meansNo(target)) {\r\n\t\t\t\tauction.setBlindMode(false);\r\n\t\t\t\tthis.addModAction(`${user.name} turned off blind mode.`);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.parse('/help auction blindmode');\r\n\t\t\t}\r\n\t\t},\r\n\t\tblindmodehelp: [\r\n\t\t\t`/auction blindmode [on/off] - Enables or disables blind mode. Requires: # & auction owner`,\r\n\t\t\t`When blind mode is enabled, teams may only place one bid per nomination and only the highest bid is revealed once the timer runs out or after all teams have placed a bid.`,\r\n\t\t],\r\n\t\taddowner: 'addowners',\r\n\t\taddowners(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst owners = target.split(',').map(x => x.trim());\r\n\t\t\tif (!owners.length) return this.parse('/help auction addowners');\r\n\t\t\tauction.addOwners(owners);\r\n\t\t\tthis.addModAction(`${user.name} added ${Chat.toListString(owners.map(o => Users.getExact(o)!.name))} as auction owner${Chat.plural(owners.length)}.`);\r\n\t\t},\r\n\t\taddownershelp: [\r\n\t\t\t`/auction addowners [user1], [user2], ... - Adds users as auction owners. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tremoveowner: 'removeowners',\r\n\t\tremoveowners(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst owners = target.split(',').map(x => x.trim());\r\n\t\t\tif (!owners.length) return this.parse('/help auction removeowners');\r\n\t\t\tauction.removeOwners(owners);\r\n\t\t\tthis.addModAction(`${user.name} removed ${Chat.toListString(owners.map(o => Users.getExact(o)?.name || o))} as auction owner${Chat.plural(owners.length)}.`);\r\n\t\t},\r\n\t\tremoveownershelp: [\r\n\t\t\t`/auction removeowners [user1], [user2], ... - Removes users as auction owners. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tasync importplayers(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction importplayers');\r\n\t\t\tif (!/^https?:\\/\\/pastebin\\.com\\/[a-zA-Z0-9]+$/.test(target)) {\r\n\t\t\t\treturn this.errorReply('Invalid pastebin URL.');\r\n\t\t\t}\r\n\t\t\tlet data = '';\r\n\t\t\ttry {\r\n\t\t\t\tdata = await Net(`https://pastebin.com/raw/${target.split('/').pop()}`).get();\r\n\t\t\t} catch {}\r\n\t\t\tif (!data) return this.errorReply('Error fetching data from pastebin.');\r\n\r\n\t\t\tauction.importPlayers(data);\r\n\t\t\tthis.addModAction(`${user.name} imported the player list from ${target}.`);\r\n\t\t},\r\n\t\timportplayershelp: [\r\n\t\t\t`/auction importplayers [pastebin url] - Imports a list of players from a pastebin. Requires: # & auction owner`,\r\n\t\t\t`The pastebin should be a list of tab-separated values with the first row containing tier names and subsequent rows containing the player names and a Y in the column corresponding to the tier.`,\r\n\t\t\t`See https://pastebin.com/jPTbJBva for an example.`,\r\n\t\t],\r\n\t\taddplayer(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst [name, ...tiers] = target.split(',').map(x => x.trim());\r\n\t\t\tif (!name) return this.parse('/help auction addplayer');\r\n\t\t\tconst player = auction.addAuctionPlayer(name, tiers);\r\n\t\t\tthis.addModAction(`${user.name} added player ${player.name} to the auction.`);\r\n\t\t},\r\n\t\taddplayerhelp: [\r\n\t\t\t`/auction addplayer [name], [tier1], [tier2], ... - Adds a player to the auction. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tremoveplayer(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction removeplayer');\r\n\t\t\tconst player = auction.removeAuctionPlayer(target);\r\n\t\t\tthis.addModAction(`${user.name} removed player ${player.name} from the auction.`);\r\n\t\t},\r\n\t\tremoveplayerhelp: [\r\n\t\t\t`/auction removeplayer [name] - Removes a player from the auction. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tassignplayer(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst [player, team] = target.split(',').map(x => x.trim());\r\n\t\t\tif (!player) return this.parse('/help auction assignplayer');\r\n\t\t\tif (team) {\r\n\t\t\t\tauction.assignPlayer(player, team);\r\n\t\t\t\tthis.addModAction(`${user.name} assigned player ${player} to team ${team}.`);\r\n\t\t\t} else {\r\n\t\t\t\tauction.assignPlayer(player);\r\n\t\t\t\tthis.sendReply(`${user.name} returned player ${player} to the draft pool.`);\r\n\t\t\t}\r\n\t\t},\r\n\t\tassignplayerhelp: [\r\n\t\t\t`/auction assignplayer [player], [team] - Assigns a player to a team. If team is blank, returns player to draft pool. Requires: # & auction owner`,\r\n\t\t],\r\n\t\taddteam(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst [name, ...managers] = target.split(',').map(x => x.trim());\r\n\t\t\tif (!name) return this.parse('/help auction addteam');\r\n\t\t\tconst team = auction.addTeam(name);\r\n\t\t\tauction.addManagers(team.name, managers);\r\n\t\t\tthis.addModAction(`${user.name} added team ${team.name} to the auction.`);\r\n\t\t},\r\n\t\taddteamhelp: [\r\n\t\t\t`/auction addteam [name], [manager1], [manager2], ... - Adds a team to the auction. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tremoveteam(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction removeteam');\r\n\t\t\tconst team = auction.removeTeam(target);\r\n\t\t\tthis.addModAction(`${user.name} removed team ${team.name} from the auction.`);\r\n\t\t},\r\n\t\tremoveteamhelp: [\r\n\t\t\t`/auction removeteam [team] - Removes a team from the auction. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tsuspendteam(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction suspendteam');\r\n\t\t\tauction.suspendTeam(target);\r\n\t\t\tconst team = auction.teams.get(toID(target))!;\r\n\t\t\tthis.addModAction(`${user.name} suspended team ${team.name}.`);\r\n\t\t},\r\n\t\tsuspendteamhelp: [\r\n\t\t\t`/auction suspendteam [team] - Suspends a team from the auction. Requires: # & auction owner`,\r\n\t\t\t`Suspended teams have their nomination turns skipped and are not allowed to place bids.`,\r\n\t\t],\r\n\t\tunsuspendteam(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tif (!target) return this.parse('/help auction unsuspendteam');\r\n\t\t\tauction.unsuspendTeam(target);\r\n\t\t\tconst team = auction.teams.get(toID(target))!;\r\n\t\t\tthis.addModAction(`${user.name} unsuspended team ${team.name}.`);\r\n\t\t},\r\n\t\tunsuspendteamhelp: [\r\n\t\t\t`/auction unsuspendteam [team] - Unsuspends a team from the auction. Requires: # & auction owner`,\r\n\t\t],\r\n\t\taddmanager: 'addmanagers',\r\n\t\taddmanagers(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst [teamName, ...managers] = target.split(',').map(x => x.trim());\r\n\t\t\tif (!teamName || !managers.length) return this.parse('/help auction addmanagers');\r\n\t\t\tauction.addManagers(teamName, managers);\r\n\t\t\tconst team = auction.teams.get(toID(teamName))!;\r\n\t\t\tthis.addModAction(`${user.name} added ${Chat.toListString(managers.map(m => Users.getExact(m)!.name))} as manager${Chat.plural(managers.length)} for team ${team.name}.`);\r\n\t\t},\r\n\t\taddmanagershelp: [\r\n\t\t\t`/auction addmanagers [team], [user1], [user2], ... - Adds users as managers to a team. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tremovemanager: 'removemanagers',\r\n\t\tremovemanagers(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst managers = target.split(',').map(x => x.trim());\r\n\t\t\tif (!managers.length) return this.parse('/help auction removemanagers');\r\n\t\t\tauction.removeManagers(managers);\r\n\t\t\tthis.addModAction(`${user.name} removed ${Chat.toListString(managers.map(m => Users.getExact(m)?.name || m))} as manager${Chat.plural(managers.length)}.`);\r\n\t\t},\r\n\t\tremovemanagershelp: [\r\n\t\t\t`/auction removemanagers [user1], [user2], ... - Removes users as managers. Requires: # & auction owner`,\r\n\t\t],\r\n\t\taddcredits(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tconst [teamName, amount] = target.split(',').map(x => x.trim());\r\n\t\t\tif (!teamName || !amount) return this.parse('/help auction addcredits');\r\n\t\t\tconst credits = parseCredits(amount);\r\n\t\t\tauction.addCreditsToTeam(teamName, credits);\r\n\t\t\tconst team = auction.teams.get(toID(teamName))!;\r\n\t\t\tthis.addModAction(`${user.name} ${credits < 0 ? 'removed' : 'added'} ${Math.abs(credits)} credits ${credits < 0 ? 'from' : 'to'} team ${team.name}.`);\r\n\t\t},\r\n\t\taddcreditshelp: [\r\n\t\t\t`/auction addcredits [team], [amount] - Adds credits to a team. Requires: # & auction owner`,\r\n\t\t],\r\n\t\tnom: 'nominate',\r\n\t\tnominate(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tif (!target) return this.parse('/help auction nominate');\r\n\t\t\tauction.nominate(user, target);\r\n\t\t},\r\n\t\tnominatehelp: [\r\n\t\t\t`/auction nominate OR /nom [player] - Nominates a player for auction.`,\r\n\t\t],\r\n\t\tbid(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tif (!target) return this.parse('/help auction bid');\r\n\t\t\tauction.bid(user, parseCredits(target));\r\n\t\t},\r\n\t\tbidhelp: [\r\n\t\t\t`/auction bid OR /bid [amount] - Bids on a player for the specified amount. If the amount is less than 500, it will be multiplied by 1000.`,\r\n\t\t\t`During the bidding phase, all numbers that are sent in the chat will be treated as bids.`,\r\n\t\t],\r\n\t\tundo(target, room, user) {\r\n\t\t\tconst auction = this.requireGame(Auction);\r\n\t\t\tauction.checkOwner(user);\r\n\r\n\t\t\tauction.undoLastNom();\r\n\t\t\tthis.addModAction(`${user.name} undid the last nomination.`);\r\n\t\t},\r\n\t\tdisable(target, room) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('gamemanagement', null, room);\r\n\t\t\tif (room.settings.auctionDisabled) {\r\n\t\t\t\treturn this.errorReply('Auctions are already disabled.');\r\n\t\t\t}\r\n\t\t\troom.settings.auctionDisabled = true;\r\n\t\t\troom.saveSettings();\r\n\t\t\tthis.sendReply('Auctions have been disabled for this room.');\r\n\t\t},\r\n\t\tenable(target, room) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('gamemanagement', null, room);\r\n\t\t\tif (!room.settings.auctionDisabled) {\r\n\t\t\t\treturn this.errorReply('Auctions are already enabled.');\r\n\t\t\t}\r\n\t\t\tdelete room.settings.auctionDisabled;\r\n\t\t\troom.saveSettings();\r\n\t\t\tthis.sendReply('Auctions have been enabled for this room.');\r\n\t\t},\r\n\t\tongoing: 'running',\r\n\t\trunning() {\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\tconst runningAuctions = [...Rooms.rooms.values()].filter(r => r.getGame(Auction)).map(r => r.title);\r\n\t\t\tthis.sendReply(`Running auctions: ${runningAuctions.join(', ') || 'None'}`);\r\n\t\t},\r\n\t\t'': 'help',\r\n\t\thelp() {\r\n\t\t\tthis.parse('/help auction');\r\n\t\t},\r\n\t},\r\n\tauctionhelp() {\r\n\t\tif (!this.runBroadcast()) return;\r\n\t\tthis.sendReplyBox(\r\n\t\t\t`Auction commands<br/>` +\r\n\t\t\t`- create [startingcredits]: Creates an auction.<br/>` +\r\n\t\t\t`- start: Starts the auction.<br/>` +\r\n\t\t\t`- reset: Resets the auction.<br/>` +\r\n\t\t\t`- end: Ends the auction.<br/>` +\r\n\t\t\t`- running: Shows a list of rooms with running auctions.<br/>` +\r\n\t\t\t`- display: Displays the current state of the auction.<br/>` +\r\n\t\t\t`- pricelist: Displays the current prices of players by team.<br/>` +\r\n\t\t\t`- nom [player]: Nominates a player for auction.<br/>` +\r\n\t\t\t`- bid [amount]: Bids on a player for the specified amount. If the amount is less than 500, it will be multiplied by 1000.<br/>` +\r\n\t\t\t`You may use /bid and /nom directly without the /auction prefix.<br/><br/>` +\r\n\t\t\t`During the bidding phase, all numbers that are sent in the chat will be treated as bids.<br>` +\r\n\t\t\t`<details class=\"readmore\"><summary>Configuration Commands</summary>` +\r\n\t\t\t`- minbid [amount]: Sets the minimum bid.<br/>` +\r\n\t\t\t`- minplayers [amount]: Sets the minimum number of players.<br/>` +\r\n\t\t\t`- blindmode [on/off]: Enables or disables blind mode.<br/>` +\r\n\t\t\t`- addowners [user1], [user2], ...: Adds users as auction owners.<br/>` +\r\n\t\t\t`- removeowners [user1], [user2], ...: Removes users as auction owners.<br/>` +\r\n\t\t\t`- importplayers [pastebin url]: Imports a list of players from a pastebin.<br/>` +\r\n\t\t\t`- addplayer [name], [tier1], [tier2], ...: Adds a player to the auction.<br/>` +\r\n\t\t\t`- removeplayer [name]: Removes a player from the auction.<br/>` +\r\n\t\t\t`- assignplayer [player], [team]: Assigns a player to a team. If team is blank, returns player to draft pool.<br/>` +\r\n\t\t\t`- addteam [name], [manager1], [manager2], ...: Adds a team to the auction.<br/>` +\r\n\t\t\t`- removeteam [name]: Removes the given team from the auction.<br/>` +\r\n\t\t\t`- suspendteam [name]: Suspends the given team from the auction.<br/>` +\r\n\t\t\t`- unsuspendteam [name]: Unsuspends the given team from the auction.<br/>` +\r\n\t\t\t`- addmanagers [team], [user1], [user2], ...: Adds users as managers to a team.<br/>` +\r\n\t\t\t`- removemanagers [user1], [user2], ...: Removes users as managers..<br/>` +\r\n\t\t\t`- addcredits [team], [amount]: Adds credits to a team.<br/>` +\r\n\t\t\t`- undo: Undoes the last nomination.<br/>` +\r\n\t\t\t`- [enable/disable]: Enables or disables auctions from being started in a room.<br/>` +\r\n\t\t\t`</details>`\r\n\t\t);\r\n\t},\r\n\tnom(target) {\r\n\t\tthis.parse(`/auction nominate ${target}`);\r\n\t},\r\n\tbid(target) {\r\n\t\tthis.parse(`/auction bid ${target}`);\r\n\t},\r\n\toverpay() {\r\n\t\tthis.requireGame(Auction);\r\n\t\treturn '/announce OVERPAY!';\r\n\t},\r\n};\r\n\r\nexport const roomSettings: Chat.SettingsHandler = room => ({\r\n\tlabel: \"Auction\",\r\n\tpermission: 'editroom',\r\n\toptions: [\r\n\t\t[`disabled`, room.settings.auctionDisabled || 'auction disable'],\r\n\t\t[`enabled`, !room.settings.auctionDisabled || 'auction enable'],\r\n\t],\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
