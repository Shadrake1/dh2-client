{
  "version": 3,
  "sources": ["../../../config/chat-plugins/lottery.ts"],
  "sourcesContent": ["const LOTTERY_FILE = 'config/chat-plugins/lottery.json';\r\n\r\nimport {FS} from '../../lib/fs';\r\n\r\nconst lotteriesContents = FS(LOTTERY_FILE).readIfExistsSync();\r\nconst lotteries: {\r\n\t[roomid: string]: {\r\n\t\tmaxWinners: number,\r\n\t\tname: string,\r\n\t\tmarkup: string,\r\n\t\tparticipants: {[ip: string]: string},\r\n\t\twinners: string[],\r\n\t\trunning: boolean,\r\n\t},\r\n} = lotteriesContents ? Object.assign(Object.create(null), JSON.parse(lotteriesContents)) : Object.create(null);\r\n\r\nfunction createLottery(roomid: RoomID, maxWinners: number, name: string, markup: string) {\r\n\tif (lotteries[roomid] && !lotteries[roomid].running) {\r\n\t\tdelete lotteries[roomid];\r\n\t}\r\n\tconst lottery = lotteries[roomid];\r\n\tlotteries[roomid] = {\r\n\t\tmaxWinners, name, markup, participants: (lottery && lottery.participants) || Object.create(null),\r\n\t\twinners: (lottery && lottery.winners) || [], running: true,\r\n\t};\r\n\twriteLotteries();\r\n}\r\nfunction writeLotteries() {\r\n\tfor (const roomid of Object.keys(lotteries)) {\r\n\t\tif (!Rooms.get(roomid)) {\r\n\t\t\tdelete lotteries[roomid];\r\n\t\t}\r\n\t}\r\n\tFS(LOTTERY_FILE).writeUpdate(() => JSON.stringify(lotteries));\r\n}\r\nfunction destroyLottery(roomid: RoomID) {\r\n\tdelete lotteries[roomid];\r\n\twriteLotteries();\r\n}\r\nfunction endLottery(roomid: RoomID, winners: string[]) {\r\n\tconst lottery = lotteries[roomid];\r\n\tif (!lottery) return;\r\n\tlottery.winners = winners;\r\n\tlottery.running = false;\r\n\tObject.freeze(lottery);\r\n\twriteLotteries();\r\n}\r\nfunction addUserToLottery(roomid: RoomID, user: User) {\r\n\tconst lottery = lotteries[roomid];\r\n\tif (!lottery) return;\r\n\tconst participants = lottery.participants;\r\n\tconst userSignedup = participants[user.latestIp] || Object.values(participants).map(toID).includes(user.id);\r\n\tif (!userSignedup) {\r\n\t\tparticipants[user.latestIp] = user.name;\r\n\t\twriteLotteries();\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\nfunction removeUserFromLottery(roomid: RoomID, user: User) {\r\n\tconst lottery = lotteries[roomid];\r\n\tif (!lottery) return;\r\n\tconst participants = lottery.participants;\r\n\tfor (const [ip, participant] of Object.entries(participants)) {\r\n\t\tif (toID(participant) === user.id || ip === user.latestIp) {\r\n\t\t\tdelete participants[ip];\r\n\t\t\twriteLotteries();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\nfunction getWinnersInLottery(roomid: RoomID) {\r\n\tconst lottery = lotteries[roomid];\r\n\tif (!lottery) return;\r\n\tconst winners = [];\r\n\tconst participants = Object.values(lottery.participants);\r\n\tfor (let i = 0; i < lottery.maxWinners; i++) {\r\n\t\tconst randomIdx = participants.length * Math.random() << 0;\r\n\t\tconst winner = participants[randomIdx];\r\n\t\twinners.push(winner);\r\n\t\tparticipants.splice(randomIdx, 1);\r\n\t}\r\n\treturn winners;\r\n}\r\n\r\nexport const commands: ChatCommands = {\r\n\tlottery: {\r\n\t\t''(target, room) {\r\n\t\t\tconst lottery = lotteries[room.roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply(\"This room doesn't have a lottery running.\");\r\n\t\t\t}\r\n\t\t\treturn this.parse(`/join view-lottery-${room.roomid}`);\r\n\t\t},\r\n\t\tedit: 'create',\r\n\t\tcreate(target, room, user, connection, cmd) {\r\n\t\t\tif (!this.can('declare', null, room)) return;\r\n\t\t\tif (room.battle || !room.chatRoomData) {\r\n\t\t\t\treturn this.errorReply('This room does not support the creation of lotteries.');\r\n\t\t\t}\r\n\t\t\tconst lottery = lotteries[room.roomid];\r\n\t\t\tconst edited = lottery && lottery.running;\r\n\t\t\tif (cmd === 'edit' && !target && lottery) {\r\n\t\t\t\tthis.sendReply('Source:');\r\n\t\t\t\tconst markup = Chat.html`${lottery.markup}`.replace(/\\n/g, '<br />');\r\n\t\t\t\treturn this.sendReplyBox(`<code style=\"white-space: pre-wrap\">/lottery edit ${lottery.maxWinners}, ${lottery.name}, ${markup}</code>`);\r\n\t\t\t}\r\n\t\t\tconst [maxWinners, name, markup] = Chat.splitFirst(target, ',', 2).map(val => val.trim());\r\n\t\t\tif (!(maxWinners && name && markup.length)) {\r\n\t\t\t\treturn this.errorReply(\"You're missing a command parameter - see /help lottery for this command's syntax.\");\r\n\t\t\t}\r\n\t\t\tconst maxWinnersNum = parseInt(maxWinners);\r\n\t\t\tif (!this.canHTML(markup)) return;\r\n\t\t\tif (isNaN(maxWinnersNum)) {\r\n\t\t\t\treturn this.errorReply(`${maxWinners} is not a valid number.`);\r\n\t\t\t}\r\n\t\t\tif (maxWinnersNum < 1) {\r\n\t\t\t\treturn this.errorReply('The maximum winners should be at least 1.');\r\n\t\t\t}\r\n\t\t\tif (maxWinnersNum > Number.MAX_SAFE_INTEGER) {\r\n\t\t\t\treturn this.errorReply('The maximum winners number is too large, please pick a smaller number.');\r\n\t\t\t}\r\n\t\t\tif (name.length > 50) {\r\n\t\t\t\treturn this.errorReply('Name needs to be under 50 characters.');\r\n\t\t\t}\r\n\t\t\tcreateLottery(room.roomid, maxWinnersNum, name, markup);\r\n\t\t\tthis.sendReply(`The lottery was successfully ${edited ? 'edited' : 'created'}.`);\r\n\t\t\tif (!edited) {\r\n\t\t\t\tthis.add(Chat.html`|raw|<div class=\"broadcast-blue\"><b>${user.name} created the \"<a href=\"/view-lottery-${room.roomid}\">${name}</a>\" lottery!</b></div>`);\r\n\t\t\t}\r\n\t\t\tthis.modlog(`LOTTERY ${edited ? 'EDIT' : 'CREATE'} ${name}`, null, `${maxWinnersNum} max winners`);\r\n\t\t},\r\n\t\tdelete(target, room, user) {\r\n\t\t\tif (!this.can('declare', null, room)) return;\r\n\t\t\tconst lottery = lotteries[room.roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply('This room does not have a lottery running.');\r\n\t\t\t}\r\n\t\t\tdestroyLottery(room.roomid);\r\n\t\t\tthis.addModAction(`${user.name} deleted the \"${lottery.name}\" lottery.`);\r\n\t\t\tthis.modlog('LOTTERY DELETE');\r\n\t\t\tthis.sendReply('The lottery was successfully deleted.');\r\n\t\t},\r\n\t\tend(target, room) {\r\n\t\t\tif (!this.can('declare', null, room)) return;\r\n\t\t\tconst lottery = lotteries[room.roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply('This room does not have a lottery running.');\r\n\t\t\t}\r\n\t\t\tif (!lottery.running) {\r\n\t\t\t\treturn this.errorReply(`The \"${lottery.name}\" lottery already ended.`);\r\n\t\t\t}\r\n\t\t\tfor (const [ip, participant] of Object.entries(lottery.participants)) {\r\n\t\t\t\tconst userid = toID(participant);\r\n\t\t\t\tconst pUser = Users.get(userid);\r\n\t\t\t\tif (Punishments.userids.get(userid)\r\n\t\t\t\t\t|| Punishments.getRoomPunishments(pUser || userid, {publicOnly: true, checkIps: true}).length) {\r\n\t\t\t\t\tdelete lottery.participants[ip];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (lottery.maxWinners >= Object.keys(lottery.participants).length) {\r\n\t\t\t\treturn this.errorReply('There have been not enough participants for you to be able to end this. If you wish to end it anyway use /lottery delete.');\r\n\t\t\t}\r\n\t\t\tconst winners = getWinnersInLottery(room.roomid);\r\n\t\t\tif (!winners) return this.errorReply(`An error occured while getting the winners.`);\r\n\t\t\t// tslint:disable-next-line: max-line-length\r\n\t\t\tthis.add(Chat.html`|raw|<div class=\"broadcast-blue\"><b>${Chat.toListString(winners)} won the \"<a href=\"/view-lottery-${room.roomid}\">${lottery.name}</a>\" lottery!</b></div>`);\r\n\t\t\tthis.modlog(`LOTTERY END ${lottery.name}`);\r\n\t\t\tendLottery(room.roomid, winners);\r\n\t\t},\r\n\t\t'!join': true,\r\n\t\tjoin(target, room, user) {\r\n\t\t\t// This hack is used for the HTML room to be able to\r\n\t\t\t// join lotteries in other rooms from the global room\r\n\t\t\tconst roomid = target || (room && room.roomid);\r\n\t\t\tif (!roomid) {\r\n\t\t\t\treturn this.errorReply(`This is not a valid room.`);\r\n\t\t\t}\r\n\t\t\tconst lottery = lotteries[roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply(`${roomid} does not have a lottery running.`);\r\n\t\t\t}\r\n\t\t\tif (!lottery.running) {\r\n\t\t\t\treturn this.errorReply(`The \"${lottery.name}\" lottery already ended.`);\r\n\t\t\t}\r\n\t\t\tif (!user.named) {\r\n\t\t\t\treturn this.popupReply('You must be logged into an account to participate.');\r\n\t\t\t}\r\n\t\t\tif (!user.autoconfirmed) {\r\n\t\t\t\treturn this.popupReply('You must be autoconfirmed to join lotteries.');\r\n\t\t\t}\r\n\t\t\tif (user.locked || Punishments.getRoomPunishments(user, {publicOnly: true, checkIps: true}).length) {\r\n\t\t\t\treturn this.popupReply('Punished users cannot join lotteries.');\r\n\t\t\t}\r\n\t\t\tconst success = addUserToLottery(roomid as RoomID, user);\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.popupReply('You have successfully joined the lottery.');\r\n\t\t\t} else {\r\n\t\t\t\tthis.popupReply('You are already in the lottery.');\r\n\t\t\t}\r\n\t\t},\r\n\t\t'!leave': true,\r\n\t\tleave(target, room, user) {\r\n\t\t\t// This hack is used for the HTML room to be able to\r\n\t\t\t// join lotteries in other rooms from the global room\r\n\t\t\tconst roomid = target || (room && room.roomid);\r\n\t\t\tif (!roomid) {\r\n\t\t\t\treturn this.errorReply('This can only be used in rooms.');\r\n\t\t\t}\r\n\t\t\tconst lottery = lotteries[roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply(`${roomid} does not have a lottery running.`);\r\n\t\t\t}\r\n\t\t\tif (!lottery.running) {\r\n\t\t\t\treturn this.errorReply(`The \"${lottery.name}\" lottery already ended.`);\r\n\t\t\t}\r\n\t\t\tconst success = removeUserFromLottery(roomid as RoomID, user);\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.popupReply('You have successfully left the lottery.');\r\n\t\t\t} else {\r\n\t\t\t\tthis.popupReply('You have not joined the lottery.');\r\n\t\t\t}\r\n\t\t},\r\n\t\tparticipants(target, room, user) {\r\n\t\t\tconst lottery = lotteries[room.roomid];\r\n\t\t\tif (!lottery) {\r\n\t\t\t\treturn this.errorReply('This room does not have a lottery running.');\r\n\t\t\t}\r\n\t\t\tconst canSeeIps = user.can('ban');\r\n\t\t\tconst participants = Object.entries(lottery.participants).map(([ip, participant]) => {\r\n\t\t\t\treturn `${participant}${canSeeIps ? ' (IP: ' + ip + ')' : ''}`;\r\n\t\t\t});\r\n\t\t\tlet buf = '';\r\n\t\t\tif (user.can('declare', null, room)) {\r\n\t\t\t\tbuf += `<b>List of participants (${participants.length}):</b><p>${participants.join(', ')}</p>`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += `${participants.length} participant(s) joined this lottery.`;\r\n\t\t\t}\r\n\t\t\tthis.sendReplyBox(buf);\r\n\t\t},\r\n\t\thelp() {\r\n\t\t\treturn this.parse('/help lottery');\r\n\t\t},\r\n\t},\r\n\tlotteryhelp: [\r\n\t\t`/lottery - opens the current lottery, if it exists.`,\r\n\t\t`/lottery create max winners, name, html - creates a new lottery with [name] as the header and [html] as body. Max winners is the amount of people that will win the lottery. Requires # & ~`,\r\n\t\t`/lottery delete - deletes the current lottery without declaring a winner. Requires # & ~`,\r\n\t\t`/lottery end - ends the current lottery, declaring a random participant as the winner. Requires # & ~`,\r\n\t\t`/lottery editmarkup html - edits the lottery markup with the provided HTML. Requires # & ~`,\r\n\t\t`/lottery join - joins the current lottery, if it exists, you need to be not currently punished in any public room, not locked and be autoconfirmed.`,\r\n\t\t`/lottery leave - leaves the current lottery, if it exists.`,\r\n\t\t`/lottery participants - shows the current participants in the lottery.`,\r\n\t],\r\n};\r\n\r\nexport const pages: PageTable = {\r\n\tlottery(query, user) {\r\n\t\tthis.extractRoom();\r\n\t\tthis.title = 'Lottery';\r\n\t\tlet buf = '<div class=\"pad\">';\r\n\t\tconst lottery = lotteries[this.room.roomid];\r\n\t\tif (!lottery) {\r\n\t\t\tbuf += `<h2>There is no lottery running in ${this.room.title}</h2></div>`;\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tbuf += `<h2 style=\"text-align: center\">${lottery.name}</h2>${lottery.markup}<br />`;\r\n\t\tif (lottery.running) {\r\n\t\t\tconst userSignedUp = lottery.participants[user.latestIp]\r\n\t\t\t\t|| Object.values(lottery.participants).map(toID).includes(user.id);\r\n\t\t\tbuf += `<button class=\"button\" name=\"send\" style=\" display: block; margin: 0 auto\" value=\"/lottery ${userSignedUp ? 'leave' : 'join'} ${this.room.roomid}\">${userSignedUp ? \"Leave the \" : \"Sign up for the\"} lottery</button>`;\r\n\t\t} else {\r\n\t\t\tbuf += '<p style=\"text-align: center\"><b>This lottery has already ended. The winners are:</b></p>';\r\n\t\t\tbuf += '<ul style=\"display: table; margin: 0px auto\">';\r\n\t\t\tfor (const winner of lottery.winners) {\r\n\t\t\t\tbuf += `<li>${winner}</li>`;\r\n\t\t\t}\r\n\t\t\tbuf += '</ul>';\r\n\t\t}\r\n\t\treturn buf;\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": ["markup"]
}
