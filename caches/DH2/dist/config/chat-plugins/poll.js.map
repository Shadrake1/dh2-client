{
  "version": 3,
  "sources": ["../../../config/chat-plugins/poll.ts"],
  "sourcesContent": ["/*\r\n * Poll chat plugin\r\n * By bumbadadabum and Zarel.\r\n */\r\n\r\n'use strict';\r\n\r\ninterface QuestionData {\r\n\tsource: string; supportHTML: boolean;\r\n}\r\ninterface Option {\r\n\tname: string; votes: number; correct?: boolean;\r\n}\r\n\r\nexport class Poll {\r\n\treadonly activityId: 'poll';\r\n\tpollNumber: number;\r\n\troom: ChatRoom | GameRoom;\r\n\tquestion: string;\r\n\tsupportHTML: boolean;\r\n\tvoters: {[k: string]: number};\r\n\tvoterIps: {[k: string]: number};\r\n\ttotalVotes: number;\r\n\ttimeout: NodeJS.Timer | null;\r\n\ttimeoutMins: number;\r\n\tisQuiz: boolean;\r\n\toptions: Map<number, Option>;\r\n\tconstructor(room: ChatRoom | GameRoom, questionData: QuestionData, options: string[]) {\r\n\t\tthis.activityId = 'poll';\r\n\t\tthis.pollNumber = ++room.gameNumber;\r\n\t\tthis.room = room;\r\n\t\tthis.question = questionData.source;\r\n\t\tthis.supportHTML = questionData.supportHTML;\r\n\t\tthis.voters = {};\r\n\t\tthis.voterIps = {};\r\n\t\tthis.totalVotes = 0;\r\n\t\tthis.timeout = null;\r\n\t\tthis.timeoutMins = 0;\r\n\t\tthis.isQuiz = false;\r\n\r\n\t\tthis.options = new Map();\r\n\t\tfor (const [i, option] of options.entries()) {\r\n\t\t\tconst info: Option = {name: option, votes: 0};\r\n\t\t\tif (option.startsWith('+')) {\r\n\t\t\t\tthis.isQuiz = true;\r\n\t\t\t\tinfo.correct = true;\r\n\t\t\t\tinfo.name = info.name.slice(1);\r\n\t\t\t}\r\n\t\t\tthis.options.set(i + 1, info);\r\n\t\t}\r\n\t}\r\n\r\n\tvote(user: User, option: number) {\r\n\t\tconst ip = user.latestIp;\r\n\t\tconst userid = user.id;\r\n\r\n\t\tif (userid in this.voters || ip in this.voterIps) {\r\n\t\t\treturn user.sendTo(this.room, `You have already voted for this poll.`);\r\n\t\t}\r\n\r\n\t\tthis.voters[userid] = option;\r\n\t\tthis.voterIps[ip] = option;\r\n\t\tthis.options.get(option)!.votes++;\r\n\t\tthis.totalVotes++;\r\n\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tblankvote(user: User) {\r\n\t\tconst ip = user.latestIp;\r\n\t\tconst userid = user.id;\r\n\r\n\t\tif (!(userid in this.voters) || !(ip in this.voterIps)) {\r\n\t\t\tthis.voters[userid] = 0;\r\n\t\t\tthis.voterIps[ip] = 0;\r\n\t\t}\r\n\r\n\t\tthis.updateTo(user);\r\n\t}\r\n\r\n\tgenerateVotes() {\r\n\t\tconst iconText = this.isQuiz ? '<i class=\"fa fa-question\"></i> Quiz' : '<i class=\"fa fa-bar-chart\"></i> Poll';\r\n\t\tlet output = `<div class=\"infobox\"><p style=\"margin: 2px 0 5px 0\"><span style=\"border:1px solid #6A6;color:#484;border-radius:4px;padding:0 3px\">${iconText}</span> <strong style=\"font-size:11pt\">${this.getQuestionMarkup()}</strong></p>`;\r\n\t\tfor (const [num, option] of this.options) {\r\n\t\t\toutput += `<div style=\"margin-top: 5px\"><button class=\"button\" style=\"text-align: left\" value=\"/poll vote ${num}\" name=\"send\" title=\"Vote for ${num}. ${Chat.escapeHTML(option.name)}\">${num}. <strong>${this.getOptionMarkup(option)}</strong></button></div>`;\r\n\t\t}\r\n\t\toutput += `<div style=\"margin-top: 7px; padding-left: 12px\"><button value=\"/poll results\" name=\"send\" title=\"View results - you will not be able to vote after viewing results\"><small>(View results)</small></button></div>`;\r\n\t\toutput += `</div>`;\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\tgenerateResults(ended = false, option: number | null = 0) {\r\n\t\tconst iconText = this.isQuiz ? '<i class=\"fa fa-question\"></i> Quiz' : '<i class=\"fa fa-bar-chart\"></i> Poll';\r\n\t\tconst icon = `<span style=\"border:1px solid #${ended ? '777;color:#555' : '6A6;color:#484'};border-radius:4px;padding:0 3px\">${iconText}${ended ? \" ended\" : \"\"}</span>`;\r\n\t\tlet output = `<div class=\"infobox\"><p style=\"margin: 2px 0 5px 0\">${icon} <strong style=\"font-size:11pt\">${this.getQuestionMarkup()}</strong></p>`;\r\n\t\tconst iter = this.options.entries();\r\n\r\n\t\tlet i = iter.next();\r\n\t\tlet c = 0;\r\n\t\tconst colors = ['#79A', '#8A8', '#88B'];\r\n\t\twhile (!i.done) {\r\n\t\t\tconst percentage = Math.round((i.value[1].votes * 100) / (this.totalVotes || 1));\r\n\t\t\tconst answerMarkup = this.isQuiz ? `<span style=\"color:${i.value[1].correct ? 'green' : 'red'};\">${i.value[1].correct ? '' : '<s>'}${this.getOptionMarkup(i.value[1])}${i.value[1].correct ? '' : '</s>'}</span>` : this.getOptionMarkup(i.value[1]);\r\n\t\t\toutput += `<div style=\"margin-top: 3px\">${i.value[0]}. <strong>${i.value[0] === option ? '<em>' : ''}${answerMarkup}${i.value[0] === option ? '</em>' : ''}</strong> <small>(${i.value[1].votes} vote${i.value[1].votes === 1 ? '' : 's'})</small><br /><span style=\"font-size:7pt;background:${colors[c % 3]};padding-right:${percentage * 3}px\"></span><small>&nbsp;${percentage}%</small></div>`;\r\n\t\t\ti = iter.next();\r\n\t\t\tc++;\r\n\t\t}\r\n\t\tif (option === 0 && !ended) output += '<div><small>(You can\\'t vote after viewing results)</small></div>';\r\n\t\toutput += '</div>';\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\tgetQuestionMarkup() {\r\n\t\tif (this.supportHTML) return this.question;\r\n\t\treturn Chat.escapeHTML(this.question);\r\n\t}\r\n\r\n\tgetOptionMarkup(option: Option) {\r\n\t\tif (this.supportHTML) return option.name;\r\n\t\treturn Chat.escapeHTML(option.name);\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tconst results = [];\r\n\r\n\t\tfor (let i = 0; i <= this.options.size; i++) {\r\n\t\t\tresults.push(this.generateResults(false, i));\r\n\t\t}\r\n\r\n\t\t// Update the poll results for everyone that has voted\r\n\t\tfor (const id in this.room.users) {\r\n\t\t\tconst user = this.room.users[id];\r\n\t\t\tif (user.id in this.voters) {\r\n\t\t\t\tuser.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${results[this.voters[user.id]]}`);\r\n\t\t\t} else if (user.latestIp in this.voterIps) {\r\n\t\t\t\tuser.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${results[this.voterIps[user.latestIp]]}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdateTo(user: User, connection: Connection | null = null) {\r\n\t\tconst recipient = connection || user;\r\n\t\tif (user.id in this.voters) {\r\n\t\t\trecipient.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${this.generateResults(false, this.voters[user.id])}`);\r\n\t\t} else if (user.latestIp in this.voterIps) {\r\n\t\t\trecipient.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${this.generateResults(false, this.voterIps[user.latestIp])}`);\r\n\t\t} else {\r\n\t\t\trecipient.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${this.generateVotes()}`);\r\n\t\t}\r\n\t}\r\n\r\n\tupdateFor(user: User) {\r\n\t\tif (user.id in this.voters) {\r\n\t\t\tuser.sendTo(this.room, `|uhtmlchange|poll${this.pollNumber}|${this.generateResults(false, this.voters[user.id])}`);\r\n\t\t}\r\n\t}\r\n\r\n\tdisplay() {\r\n\t\tconst votes = this.generateVotes();\r\n\r\n\t\tconst results = [];\r\n\r\n\t\tfor (let i = 0; i <= this.options.size; i++) {\r\n\t\t\tresults.push(this.generateResults(false, i));\r\n\t\t}\r\n\r\n\t\tfor (const id in this.room.users) {\r\n\t\t\tconst thisUser = this.room.users[id];\r\n\t\t\tif (thisUser.id in this.voters) {\r\n\t\t\t\tthisUser.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${results[this.voters[thisUser.id]]}`);\r\n\t\t\t} else if (thisUser.latestIp in this.voterIps) {\r\n\t\t\t\tthisUser.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${results[this.voterIps[thisUser.latestIp]]}`);\r\n\t\t\t} else {\r\n\t\t\t\tthisUser.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${votes}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdisplayTo(user: User, connection: Connection | null = null) {\r\n\t\tconst recipient = connection || user;\r\n\t\tif (user.id in this.voters) {\r\n\t\t\trecipient.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${this.generateResults(false, this.voters[user.id])}`);\r\n\t\t} else if (user.latestIp in this.voterIps) {\r\n\t\t\trecipient.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${this.generateResults(false, this.voterIps[user.latestIp])}`);\r\n\t\t} else {\r\n\t\t\trecipient.sendTo(this.room, `|uhtml|poll${this.pollNumber}|${this.generateVotes()}`);\r\n\t\t}\r\n\t}\r\n\r\n\tonConnect(user: User, connection: Connection | null = null) {\r\n\t\tthis.displayTo(user, connection);\r\n\t}\r\n\r\n\tend() {\r\n\t\tconst results = this.generateResults(true);\r\n\r\n\t\tthis.room.send(`|uhtmlchange|poll${this.pollNumber}|<div class=\"infobox\">(The poll has ended &ndash; scroll down to see the results)</div>`);\r\n\t\tthis.room.add(`|html|${results}`).update();\r\n\t}\r\n}\r\n\r\nexport const commands: ChatCommands = {\r\n\tpoll: {\r\n\t\thtmlcreate: 'new',\r\n\t\tcreate: 'new',\r\n\t\tnew(target, room, user, connection, cmd, message) {\r\n\t\t\tif (!target) return this.parse('/help poll new');\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (target.length > 1024) return this.errorReply(\"Poll too long.\");\r\n\t\t\tif (room.battle) return this.errorReply(\"Battles do not support polls.\");\r\n\r\n\t\t\tconst text = this.filter(target);\r\n\t\t\tif (target !== text) return this.errorReply(\"You are not allowed to use filtered words in polls.\");\r\n\r\n\t\t\tconst supportHTML = cmd === 'htmlcreate';\r\n\t\t\tlet separator = '';\r\n\t\t\tif (text.includes('\\n')) {\r\n\t\t\t\tseparator = '\\n';\r\n\t\t\t} else if (text.includes('|')) {\r\n\t\t\t\tseparator = '|';\r\n\t\t\t} else if (text.includes(',')) {\r\n\t\t\t\tseparator = ',';\r\n\t\t\t} else {\r\n\t\t\t\treturn this.errorReply(\"Not enough arguments for /poll new.\");\r\n\t\t\t}\r\n\r\n\t\t\tlet params = text.split(separator).map(param => param.trim());\r\n\r\n\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\tif (supportHTML && !this.can('declare', null, room)) return false;\r\n\t\t\tif (!this.canTalk()) return;\r\n\t\t\tif (room.minorActivity) return this.errorReply(\"There is already a poll or announcement in progress in this room.\");\r\n\t\t\tif (params.length < 3) return this.errorReply(\"Not enough arguments for /poll new.\");\r\n\r\n\t\t\t// @ts-ignore In the case that any of these are null, the function is terminated, and the result never used.\r\n\t\t\tif (supportHTML) params = params.map(parameter => this.canHTML(parameter));\r\n\t\t\tif (params.some(parameter => !parameter)) return;\r\n\r\n\t\t\tconst options = params.splice(1);\r\n\t\t\tif (options.length > 8) {\r\n\t\t\t\treturn this.errorReply(\"Too many options for poll (maximum is 8).\");\r\n\t\t\t}\r\n\r\n\t\t\tif (new Set(options).size !== options.length) {\r\n\t\t\t\treturn this.errorReply(\"There are duplicate options in the poll.\");\r\n\t\t\t}\r\n\r\n\t\t\troom.minorActivity = new Poll(room, {source: params[0], supportHTML}, options);\r\n\t\t\troom.minorActivity.display();\r\n\r\n\t\t\tthis.roomlog(`${user.name} used ${message}`);\r\n\t\t\tthis.modlog('POLL');\r\n\t\t\treturn this.addModAction(`A poll was started by ${user.name}.`);\r\n\t\t},\r\n\t\tnewhelp: [\r\n\t\t\t`/poll create [question], [option1], [option2], [...] - Creates a poll. Requires: % @ # & ~`,\r\n\t\t\t`Polls can be used as quiz questions. To do this, prepend all correct answers with a +.`,\r\n\t\t],\r\n\r\n\t\tvote(target, room, user) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'poll') return this.errorReply(\"There is no poll running in this room.\");\r\n\t\t\tif (!target) return this.parse('/help poll vote');\r\n\t\t\tconst poll = room.minorActivity as Poll;\r\n\t\t\tif (target === 'blank') {\r\n\t\t\t\tpoll.blankvote(user);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst parsed = parseInt(target);\r\n\t\t\tif (isNaN(parsed)) return this.errorReply(\"To vote, specify the number of the option.\");\r\n\r\n\t\t\tif (!poll.options.has(parsed)) return this.sendReply(\"Option not in poll.\");\r\n\r\n\t\t\tpoll.vote(user, parsed);\r\n\t\t},\r\n\t\tvotehelp: [`/poll vote [number] - Votes for option [number].`],\r\n\r\n\t\ttimer(target, room, user) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'poll') return this.errorReply(\"There is no poll running in this room.\");\r\n\t\t\tconst poll = room.minorActivity as Poll;\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\t\tif (target === 'clear') {\r\n\t\t\t\t\tif (!poll.timeout) return this.errorReply(\"There is no timer to clear.\");\r\n\t\t\t\t\tclearTimeout(poll.timeout);\r\n\t\t\t\t\tpoll.timeout = null;\r\n\t\t\t\t\tpoll.timeoutMins = 0;\r\n\t\t\t\t\treturn this.add(\"The poll timer was turned off.\");\r\n\t\t\t\t}\r\n\t\t\t\tconst timeout = parseFloat(target);\r\n\t\t\t\tif (isNaN(timeout) || timeout <= 0 || timeout > 0x7FFFFFFF) return this.errorReply(\"Invalid time given.\");\r\n\t\t\t\tif (poll.timeout) clearTimeout(poll.timeout);\r\n\t\t\t\tpoll.timeoutMins = timeout;\r\n\t\t\t\tpoll.timeout = setTimeout(() => {\r\n\t\t\t\t\tif (poll) poll.end();\r\n\t\t\t\t\troom.minorActivity = null;\r\n\t\t\t\t}, timeout * 60000);\r\n\t\t\t\troom.add(`The poll timer was turned on: the poll will end in ${timeout} minute(s).`);\r\n\t\t\t\tthis.modlog('POLL TIMER', null, `${timeout} minutes`);\r\n\t\t\t\treturn this.privateModAction(`(The poll timer was set to ${timeout} minute(s) by ${user.name}.)`);\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\t\tif (poll.timeout) {\r\n\t\t\t\t\treturn this.sendReply(`The poll timer is on and will end in ${poll.timeoutMins} minute(s).`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(\"The poll timer is off.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\ttimerhelp: [\r\n\t\t\t`/poll timer [minutes] - Sets the poll to automatically end after [minutes] minutes. Requires: % @ # & ~`,\r\n\t\t\t`/poll timer clear - Clears the poll's timer. Requires: % @ # & ~`,\r\n\t\t],\r\n\r\n\t\tresults(target, room, user) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'poll') return this.errorReply(\"There is no poll running in this room.\");\r\n\t\t\tconst poll = room.minorActivity as Poll;\r\n\r\n\t\t\treturn poll.blankvote(user);\r\n\t\t},\r\n\t\tresultshelp: [`/poll results - Shows the results of the poll without voting. NOTE: you can't go back and vote after using this.`],\r\n\r\n\t\tclose: 'end',\r\n\t\tstop: 'end',\r\n\t\tend(target, room, user) {\r\n\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\tif (!this.canTalk()) return;\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'poll') return this.errorReply(\"There is no poll running in this room.\");\r\n\t\t\tconst poll = room.minorActivity as Poll;\r\n\t\t\tif (poll.timeout) clearTimeout(poll.timeout);\r\n\r\n\t\t\tpoll.end();\r\n\t\t\troom.minorActivity = null;\r\n\t\t\tthis.modlog('POLL END');\r\n\t\t\treturn this.privateModAction(`(The poll was ended by ${user.name}.)`);\r\n\t\t},\r\n\t\tendhelp: [`/poll end - Ends a poll and displays the results. Requires: % @ # & ~`],\r\n\r\n\t\tshow: '',\r\n\t\tdisplay: '',\r\n\t\t''(target, room, user, connection) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'poll') return this.errorReply(\"There is no poll running in this room.\");\r\n\t\t\tconst poll = room.minorActivity as Poll;\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\troom.update();\r\n\r\n\t\t\tif (this.broadcasting) {\r\n\t\t\t\tpoll.display();\r\n\t\t\t} else {\r\n\t\t\t\tpoll.displayTo(user, connection);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdisplayhelp: [`/poll display - Displays the poll`],\r\n\t},\r\n\tpollhelp: [\r\n\t\t`/poll allows rooms to run their own polls. These polls are limited to one poll at a time per room.`,\r\n\t\t`Polls can be used as quiz questions. To do this, prepend all correct answers with a +.`,\r\n\t\t`Accepts the following commands:`,\r\n\t\t`/poll create [question], [option1], [option2], [...] - Creates a poll. Requires: % @ # & ~`,\r\n\t\t`/poll htmlcreate [question], [option1], [option2], [...] - Creates a poll, with HTML allowed in the question and options. Requires: # & ~`,\r\n\t\t`/poll vote [number] - Votes for option [number].`,\r\n\t\t`/poll timer [minutes] - Sets the poll to automatically end after [minutes]. Requires: % @ # & ~`,\r\n\t\t`/poll results - Shows the results of the poll without voting. NOTE: you can't go back and vote after using this.`,\r\n\t\t`/poll display - Displays the poll`,\r\n\t\t`/poll end - Ends a poll and displays the results. Requires: % @ # & ~`,\r\n\t],\r\n};\r\n\r\nprocess.nextTick(() => {\r\n\tChat.multiLinePattern.register('/poll (new|create|htmlcreate) ');\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
