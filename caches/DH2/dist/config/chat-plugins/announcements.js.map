{
  "version": 3,
  "sources": ["../../../config/chat-plugins/announcements.ts"],
  "sourcesContent": ["/*\r\n * Announcements chat plugin\r\n * By Spandamn\r\n */\r\n\r\n'use strict';\r\n\r\nexport class Announcement {\r\n\treadonly activityId: 'announcement';\r\n\tannouncementNumber: number;\r\n\troom: ChatRoom | GameRoom;\r\n\tsource: string;\r\n\ttimeout: NodeJS.Timer | null;\r\n\ttimeoutMins: number;\r\n\tconstructor(room: ChatRoom | GameRoom, source: string) {\r\n\t\tthis.activityId = 'announcement';\r\n\t\tthis.announcementNumber = ++room.gameNumber;\r\n\t\tthis.room = room;\r\n\t\tthis.source = source;\r\n\t\tthis.timeout = null;\r\n\t\tthis.timeoutMins = 0;\r\n\t}\r\n\r\n\tgenerateAnnouncement() {\r\n\t\treturn `<div class=\"broadcast-blue\"><p style=\"margin: 2px 0 5px 0\"><strong style=\"font-size:11pt\">${this.source}</strong></p></div>`;\r\n\t}\r\n\r\n\tdisplayTo(user: User, connection: Connection | null = null) {\r\n\t\tconst recipient = connection || user;\r\n\t\trecipient.sendTo(this.room, `|uhtml|announcement${this.announcementNumber}|${this.generateAnnouncement()}`);\r\n\t}\r\n\r\n\tdisplay() {\r\n\t\tconst announcement = this.generateAnnouncement();\r\n\t\tfor (const id in this.room.users) {\r\n\t\t\tconst thisUser = this.room.users[id];\r\n\t\t\tthisUser.sendTo(this.room, `|uhtml|announcement${this.announcementNumber}|${announcement}`);\r\n\t\t}\r\n\t}\r\n\r\n\tonConnect(user: User, connection: Connection | null = null) {\r\n\t\tthis.displayTo(user, connection);\r\n\t}\r\n\r\n\tend() {\r\n\t\tthis.room.send(`|uhtmlchange|announcement${this.announcementNumber}|<div class=\"infobox\">(The announcement has ended.)</div>`);\r\n\t}\r\n}\r\n\r\nexport const commands: ChatCommands = {\r\n\tannouncement: {\r\n\t\thtmlcreate: 'new',\r\n\t\tcreate: 'new',\r\n\t\tnew(target, room, user, connection, cmd, message) {\r\n\t\t\tif (!target) return this.parse('/help announcement new');\r\n\t\t\ttarget = target.trim();\r\n\t\t\tif (room.battle) return this.errorReply(\"Battles do not support announcements.\");\r\n\r\n\t\t\tconst text = Chat.filter(this, target, user, room, connection);\r\n\t\t\tif (target !== text) return this.errorReply(\"You are not allowed to use filtered words in announcements.\");\r\n\r\n\t\t\tconst supportHTML = cmd === 'htmlcreate';\r\n\r\n\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\tif (supportHTML && !this.can('declare', null, room)) return false;\r\n\t\t\tif (!this.canTalk()) return;\r\n\t\t\tif (room.minorActivity) return this.errorReply(\"There is already a poll or announcement in progress in this room.\");\r\n\r\n\t\t\tconst source = supportHTML ? this.canHTML(target) : Chat.escapeHTML(target);\r\n\t\t\tif (!source) return;\r\n\r\n\t\t\troom.minorActivity = new Announcement(room, source);\r\n\t\t\troom.minorActivity.display();\r\n\r\n\t\t\tthis.roomlog(`${user.name} used ${message}`);\r\n\t\t\tthis.modlog('ANNOUNCEMENT');\r\n\t\t\treturn this.privateModAction(`(An announcement was started by ${user.name}.)`);\r\n\t\t},\r\n\t\tnewhelp: [`/announcement create [announcement] - Creates an announcement. Requires: % @ # & ~`],\r\n\r\n\t\ttimer(target, room, user) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'announcement') return this.errorReply(\"There is no announcement running in this room.\");\r\n\t\t\tconst announcement = room.minorActivity as Announcement;\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\t\tif (target === 'clear') {\r\n\t\t\t\t\tif (!announcement.timeout) return this.errorReply(\"There is no timer to clear.\");\r\n\t\t\t\t\tclearTimeout(announcement.timeout);\r\n\t\t\t\t\tannouncement.timeout = null;\r\n\t\t\t\t\tannouncement.timeoutMins = 0;\r\n\t\t\t\t\treturn this.add(\"The announcement timer was turned off.\");\r\n\t\t\t\t}\r\n\t\t\t\tconst timeout = parseFloat(target);\r\n\t\t\t\tif (isNaN(timeout) || timeout <= 0 || timeout > 0x7FFFFFFF) return this.errorReply(\"Invalid time given.\");\r\n\t\t\t\tif (announcement.timeout) clearTimeout(announcement.timeout);\r\n\t\t\t\tannouncement.timeoutMins = timeout;\r\n\t\t\t\tannouncement.timeout = setTimeout(() => {\r\n\t\t\t\t\tif (announcement) announcement.end();\r\n\t\t\t\t\troom.minorActivity = null;\r\n\t\t\t\t}, (timeout * 60000));\r\n\t\t\t\troom.add(`The announcement timer was turned on: the announcement will end in ${timeout} minute${Chat.plural(timeout)}.`);\r\n\t\t\t\tthis.modlog('announcement TIMER', null, `${timeout} minutes`);\r\n\t\t\t\treturn this.privateModAction(`(The announcement timer was set to ${timeout} minute${Chat.plural(timeout)} by ${user.name}.)`);\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\t\tif (announcement.timeout) {\r\n\t\t\t\t\treturn this.sendReply(`The announcement timer is on and will end in ${announcement.timeoutMins} minute${Chat.plural(announcement.timeoutMins)}.`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.sendReply(\"The announcement timer is off.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\ttimerhelp: [\r\n\t\t\t`/announcement timer [minutes] - Sets the announcement to automatically end after [minutes] minutes. Requires: % @ # & ~`,\r\n\t\t\t`/announcement timer clear - Clears the announcement's timer. Requires: % @ # & ~`,\r\n\t\t],\r\n\r\n\t\tclose: 'end',\r\n\t\tstop: 'end',\r\n\t\tend(target, room, user) {\r\n\t\t\tif (!this.can('minigame', null, room)) return false;\r\n\t\t\tif (!this.canTalk()) return;\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'announcement') {\r\n\t\t\t\treturn this.errorReply(\"There is no announcement running in this room.\");\r\n\t\t\t}\r\n\t\t\tconst announcement = room.minorActivity as Announcement;\r\n\t\t\tif (announcement.timeout) clearTimeout(announcement.timeout);\r\n\r\n\t\t\tannouncement.end();\r\n\t\t\troom.minorActivity = null;\r\n\t\t\tthis.modlog('ANNOUNCEMENT END');\r\n\t\t\treturn this.privateModAction(`(The announcement was ended by ${user.name}.)`);\r\n\t\t},\r\n\t\tendhelp: [`/announcement end - Ends a announcement and displays the results. Requires: % @ # & ~`],\r\n\r\n\t\tshow: 'display',\r\n\t\tdisplay(target, room, user, connection) {\r\n\t\t\tif (!room.minorActivity || room.minorActivity.activityId !== 'announcement') {\r\n\t\t\t\treturn this.errorReply(\"There is no announcement running in this room.\");\r\n\t\t\t}\r\n\t\t\tconst announcement = room.minorActivity as Announcement;\r\n\t\t\tif (!this.runBroadcast()) return;\r\n\t\t\troom.update();\r\n\r\n\t\t\tif (this.broadcasting) {\r\n\t\t\t\tannouncement.display();\r\n\t\t\t} else {\r\n\t\t\t\tannouncement.displayTo(user, connection);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdisplayhelp: [`/announcement display - Displays the announcement`],\r\n\r\n\t\t''(target, room, user) {\r\n\t\t\tthis.parse('/help announcement');\r\n\t\t},\r\n\t},\r\n\tannouncementhelp: [\r\n\t\t`/announcement allows rooms to run their own announcements. These announcements are limited to one announcement at a time per room.`,\r\n\t\t`Accepts the following commands:`,\r\n\t\t`/announcement create [announcement] - Creates a announcement. Requires: % @ # & ~`,\r\n\t\t`/announcement htmlcreate [announcement] - Creates a announcement, with HTML allowed. Requires: # & ~`,\r\n\t\t`/announcement timer [minutes] - Sets the announcement to automatically end after [minutes]. Requires: % @ # & ~`,\r\n\t\t`/announcement display - Displays the announcement`,\r\n\t\t`/announcement end - Ends a announcement. Requires: % @ # & ~`,\r\n\t],\r\n};\r\n\r\nprocess.nextTick(() => {\r\n\tChat.multiLinePattern.register('/announcement (new|create|htmlcreate) ');\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
